IEEE International Conference on e-Business Engineering

Real-Time Correlation of Network Security Alerts
Zhitang Li, Aifang Zhang , Jie Lei, Li Wang
Computer Department, Huazhong University of Science and Technology,
Wuhan, Hubei, 430074, China
{ leeying, frost }@mail.hust.edu.cn
correlating different alerts, constructing attack
scenarios, discovering attack strategies and predicting
the next step of attacks.
Recently there have been several proposals on alert
correlation, but most of these approaches depend on
rules that must be deeply understood and accurately
predefined by domain knowledge experts. In fact, it is
mostly impossible for experts to enumerate all attacks
with pre-conditions and consequence. In this paper,
the algorithms for mining sequential pattern in data
mining field is applied to discover and update attack
behavior patterns and transform correlation rules
conveniently.
Few papers mentioned real-time correlation of
security device alerts. In fact, we think it is more
significant to detect an on-going attack behavior than
afterwards analysis. The other main contribution of the
paper is the design of an integrated correlation system
to detect an ongoing attack and predict the upcoming
next step of a multistage attack in real time.
Accordingly, network administrator can be aware of
the threat as soon as possible and take deliberate
action to prevent the target of an attack from further
impact.
The remainder of this paper is organized as follows.
Section 2 discusses the related work. We illustrate
how to use the sequential pattern mining algorithm to
discover and update multistage attack behavior
patterns in Section 3. In Section 4, the real-time
correlation system for security alerts is presented. We
briefly introduce the implementation of our algorithm
in SATA system and report the experiment result in
Section 5. Finally, the paper is summarized and future
work is pointed out in Section 6.

Abstract
With the growing deployment of network security
devices, it becomes a great challenge to manage the
large volume of security alerts from these devices. In
this paper a novel method using sequential pattern
mining algorithm is applied to discover complicated
multistage attack behavior patterns. Their result can
be transformed into rules automatically. In contrast
with other approaches, it overcomes the drawback of
high dependence on precise attack specifications and
accurate rule definitions. Based on the algorithms, a
real-time alert correlation system is proposed to detect
an ongoing attack and predict the upcoming next step
of a multistage attack in real time. Consequently,
network administrator can be aware of the threat as
soon as possible and take deliberate action to prevent
the target of an attack from further compromise. We
implement the system and valid our method by a series
of experiments with test dataset and in real network
environment. The result shows the effectivity of the
system in discovery and predication of attacks.

1. Introduction
In response to attacks and potential threats in
corporate and military network, more and more
security devices such as firewall, IDS and
vulnerability scanner are deployed. These different
devices provide wealthy information that is useful to
reduce false positives and false negatives resulting
from only focus on local detection. Unfortunately,
they also provide a large volume of security data,
leading to the difficulty of making sure whether an
attack is of true threat. These redundant data keep the
network administrator from adequately understanding
the security state of the network and performing
effective analysis, and making appropriate response in
a timely fashion. Therefore, it is important to develop
a real-time network security alert correlation system
whose functions are reducing the redundancy of alerts,

0-7695-3003-6/07 $25.00 © 2007 IEEE
DOI 10.1109/ICEBE.2007.69

2. Related Work
The research on alert correlation has been carried
out for several years and there have been some
approaches proposed recently.
In [1][2], Valdes and Skinner in SRI international
used a probabilistic method to correlate alerts

73

according to constitute similarity metric between their
features. Alert aggregation and scenario construction
are conducted by enhancing or relaxing the similarity
requirements in some attribute fields. This
probabilistic method has been implemented in the
EMERALD architecture. MIT Lincoln Laboratory
presents an alert correlation model similar to the one
presented by SRI International [3]. The main
difference is the use of automatic optimization of
correlation parameters using training sets of tagged
alerts.
In [4][5][6], Wenke Lee and Xinzhou Qin proposed
a GCT-based and Bayesian-based correlation approach
without the dependence of the prior knowledge of
attack transition patterns. However, these methods are
only suitable for discovering causal or statistical alert
relationship.
Debar,H and Wespi in IBM research developed an
Aggregation and Correlation Component[7]. Two
kinds of correlation relationships handle duplicate
alerts and consequences of alerts. Aggregation
relationships are used to group alerts into attack
situations according to various selection criteria.
Ning et al.[8][9][10], Cuppens and Mi`ege
[11][12][13] and Cheung et al.[14] build alert
correlation systems based on matching the pre-/postconditions of individual alerts. The idea of this
approach is that prior attack steps prepare for later
ones. Therefore, the consequences of earlier attacks
correspond to the prerequisites of later attacks. The
correlation engine searches alert pairs that have a
consequence and prerequisite matching. Further
correlation graphs can be built with such alert pairs [8].
One challenge to this approach is that a new attack
cannot be paired with any other attacks because its
prerequisites and consequences are not defined.
Hellerstein and Ma et al.[15] presented efficient
algorithms to mine three types of important patterns
from historical event data: event bursts, periodic
patterns, and mutually dependent patterns.
Our approach aims to address the challenge of how
to generate correlation rules conveniently, overcoming
the limitation of necessity of accurate attack
specifications and precise rule definitions. Based on
the approach, a real-time alert correlation system
SATA is implemented.

results can be transformed into rules automatically by
constructing attack pattern graph. In contrast with
other approaches, the method in this paper overcomes
the limitation of necessity of accurate attack
specifications and precise rule definitions. The
algorithm is based on our observation that most kinds
of complicated attacks have the common features:
sequence and frequency.

3.1. Preparation for AprioriAll
The AprioriAll algorithm is initially used for
mining frequent sequential patterns in transaction
database to discovery the customer purchase patterns.
So we have to modify the algorithm slightly to meet
our requirement. Here the concept of sliding time
window is introduced to represent the time interval
between the first step and the last step of a multistage
attack. It is based on our observation that most
attackers complete their attacks in a certain time span.
The AprioriAll algorithm achieves its goal by
mining history data in database. We can collect alerts
from the different devices deployed in the protected
network for a long time and store them into the
database in time order. In order to discover correct and
interesting sequence, the alerts need to be reduced by
filtering background noise, aggregation, clustering,
verifying and so on. There are many approaches
introduced [17][18][19][20] to solve this problem. In
this way, a data set comprised of rich multistage attack
alerts but few false alerts is gained. Then the attributes
of alerts are mapped to the format which is more
convenient for computation. And last we cut the global
sequences into separate candidate attack sequences by
the sliding time window.

Here we give an example of how the candidate
attack sequences are generated. Table 1 gives a sample
sequence of attack signatures in which the signatures
have been mapped into integers. Then we divide it into
separate attack sequences by Time Window Wt, as
shown in Figure 1. We can get the candidate attack
sequences as Table 2.

3. The Algorithm for Mining Multistage
Attack Patterns
AprioriAll [16], an algorithm for mining frequent
sequential pattern in Data mining field, is used to
discovery multistage attack behavior patterns. Its

74

alert, to the node which represents the attack class of
immediate successor of that alert. The root node of a
tree represents the attack class of the alert triggered by
the initial step of an attack sequence. The path from
the root node to a leaf node represents a complete
sequence of alerts with their attack class. The
sequences with the same k (k>=1) steps are
represented by a sub tree with the common root. There
are node constraints assigned to each node of the
graph such that if there are alerts which satisfy the
node constraints, an alarm is raised to remind the
network administrator to keep watch. Figure 2 shows
the pattern graph generated by AprioriAll.

Table 1. Part of global alert sequence.
Attack Class
…
7
4
5
2
3
5
…

DetectTime
…
06-08-09-11:12:14
06-08-09-11:13:18
06-08-09-11:34:46
06-08-09-11:34:46
06-08-10-00:06:53
06-08-10-00:12:47
…

Other attributes
…
…
…
…
…
…
…
…

Table 2. Candidate attack sequences.
Sub sequence id
1
2
3
4

Attack class sequence
<(7,5),2,6,4>
<7,6,4,(6,5)>
<7,2,6,4>
<7,6,5>

Table 3. Generation of Maximal Sequence with support
40%.
Sub
sequence
id
<(7,5),2,6,
4>
<7,6,4,(6,
5)>
<7,2,6,4>
<7,6,5>

3.2. Mining Attack Behavior Patterns
The problem of mining attack behavior patterns
transforms to mine the frequent attack class sequences
from these alert subsequences in database.
Consequently, based on the previous work, AprioriAll
can execute in the same way as it does on transaction
database [17].
Table 3 illustrates the complete course of
generating Maximal Sequence with support 40%. The
results of AprioriAll is {<7,2,6,4>, <7,6,5>, <4,5>}.
Other sequences are deleted because they are
subsequences included in <7,2,6,4>.
In fact, not all Maximal Sequences found out here
is correct and interesting. For example, it is more
rational that an exploit follows a probe than the other
way round. Therefore, we remove the obviously
illogical sequences. We can not remove all illogical
sequences because no more precise information can be
used, due to our only focus on the attack class and
timestamp attributes in the alerts in sequential patterns
mining phase. Luckily, we can deal with them in alert
correlation phase by computing correlativity score.

1sequence

2sequence

3sequence

4sequence

<7> <2>
<6> <4>
<5>

<7,2>,<7,
6>,<7,4>,
<7,5>,<2,
6>,<2,4>,
<6,4>,<6,
5>,<4,5>

<7,2,6,4>
<7,2,6
>,<7,2,4>
,
<7,6,4>,<
7,6,5>,
<2,6,4>

4. Real-Time Correlation Algorithm
Based on the algorithm in above section, a realtime alert correlation system is proposed to detect an
ongoing attack and predict the upcoming next step of a
multistage attack in a timely fusion. Alert correlation
is a multi-component process that receives a stream of
alerts from multiple security systems as input. In each
component, alerts are reduced, fused or correlated.

4.1. Alert Preprocessing
Because of the diversity of security devices
deployed in protected network, the alerts can be
encoded in different formats. As a result, we have to
translate all attributes of each alert from various
sensors to a common format. This problem named
normalization has been proposed in many papers, so
we will not discuss in detail here.
Only several important attributes used in this paper
are highlighted. Sensors identify the source and target
of an attack in different ways. In particular, networkbased IDS system is likely to provide IP address,
whereas host-based IDS will provide host name. We
adapt IP address to replace host name. It is also
necessary to translate well known services name into

3.3. Pattern Graph
We use pattern graph to represent frequent attack
class sequences mined by AprioriAll, which are
represented by acyclic, directed graph. An attack
behavior pattern describes the sequence of attack class
corresponding to a series of alerts that appear in time
order frequently. Each single attack class is
represented as a node of resulting graph. The nodes
are connected by the directed edges. An edge leads
from a node representing the attack class of a certain

75

port number. Especially we are forced to examine the
alerts from each sensor and assign them to a much
smaller number of attack classes to address the nonuniformity of attack description, as is important to
detect an attack in our approach because the attack
class will be matched first of all in section 4.4.

○
7
○
2
○
6
○
4

of the queue with the earliest DetectTime. A match is
found if all overlapping attributes except sensor-id are
equal. Upon finding a match, the two alerts are merged,
the resulting meta-alert replaces the matched alert in
the queue, and the search is terminated. If no match is
found after searching through the whole queue, the
alert is inserted into the queue, to be considered for
matching with future alerts. The alerts from different
sensors matched in this step are very likely to be
triggered by the same attack behavior. So we merge
them and reduce the number of alerts. In our
implementation the merge of alerts is performed by
creating a meta-alert. The DetectTime timestamp of
the meta-alert is assigned the earlier of the both alerts.
This is done because a later timestamp is likely to be
the result of a delay. The sensor-id field of the fused
meta-alert is set to the union of the respective values
of the corresponding attributes of the merged alerts,
which is useful in the following process. Another
attribute fields named counter is needed to record the
number of fused alerts. Note that it is possible that
more than two sensor alerts may be fused into a single
meta-alert. In this case, two alerts are first fused into a
meta-alert that is subsequently fused (one at a time)
with additional sensor alerts.
When the time difference between the oldest and
the newest alert (may be mete-alert) in the queue
exceeds time difference parameter t, the oldest one is
removed from the queue. Before removed, we
compare it with the next one in the queue. They are
merged after identifying that all values of the
overlapping attributes except the DetectTime
timestamp are equal. The sensor-id fields are
considered equal if one is a subset of the other. Here
another field is needed for mete-alert to store the later
one of the DetectTime of the merged alerts. This is
different from the above step because they are likely to
the persistent report of either the same attack behavior,
or persist attack behaviors with the same intent and
features. We store it in order that precise value can be
computed in section 4.4. The merge is continued until
another alert with the different values of overlapping
attributes besides DetectTime arrives. Then the
merged meta-alert is passed to the next component in
our system.
The time difference parameter t is used to wait for
the delayed alerts. It is determined by combination the
Agent performance with local network delay. So it has
to be set deliberately according to the actual condition
of the protected network. A value that is too low
causes related alerts to escape fusion, while a value
that is too high causes performance degrade in our
real-time system.

○
4
○
6

○
5

○
5
○
9
○
8

Figure. 2. Pattern graph representing the result of
AproiriAll.

Agents deployed in each sensor are responsible for
normalization and transmitting formatted alerts to
management platform for integrated processing. Every
alert comply with the common format, which is a tuple
<alert-id, sensor-id, attack class-id, DetectTime,
source-ip, source-port, destination-ip, destination-port
>.

4.2. Merge and Aggregation
The motivation in this step is to reduce the number
of alerts and alleviate burden of the platform. One
alert per attack is ideal. However, it is difficult to
realize thanks to the complicated network situation.
Our approach aims to fuse the alerts triggered by the
same attacks.
The correlation algorithm in this paper is time
sensitive, and needs a unified time conference for
alerts. So this part is based on the hypothesis that
sensors are synchronized. The problems of clock drift
and how to deal with it are beyond our discussion.
The decision to merge two alerts is based on the
temporal difference between these alerts and the
information that they contain. Here a time difference
parameter t is introduced in the paper to deal with the
situation that alerts arrive at management platform in
the different order with their DetectTime timestamp,
resulted from the preprocessing and transmission
delay.
The alerts within the time difference are stored in a
time-ordered queue by comparing their DetectTime.
When a new alert arrives, it is compared with the
alerts in the queue, starting with the alert in the header

76

This step may not be as effective as other
approaches, but it mostly avoid the mistakes of
correlation in the following steps caused by incorrect
cluster. And the number of alerts to be searched in the
correlation phase can not be too large because the
sliding time window is introduced in this paper.

protected network. For single alert, the computed
result is the final value. But for a meta-alert, the final
value is either highest or the accumulative total of the
alerts merged.
The alert with low threat value indicates that the
attack is neither successful nor dangerous. It is not
important and interesting for security management.
Especially, it leads to the incorrect correlation
sometimes. Consequently, it is removed if the value of
alert threat is lower than a certain threshold.

4.3. Alert Verification
Alert verification is to identify whether an attack
resulting in a respective alert or meta-alert is
successful and then to estimate the threat of an attack
posing to the protected network. Correlating alerts that
refer to failed attack can easily result in the detection
of whole attack scenarios that are nonexistent.
Therefore one goal of alert verification is to remove or
filter the alerts that do not represent successful attack.
It is more interesting to recognize an attack with high
degree of threat. So another goal of alert verification is
designed to compute the value of threat for each alert
and then filter those with low degree of threat.
Firstly, alert verification technique need to look for
evidence of the success of an attack by checking for
the information at the victim machine. Then a
reliability score is computed by matching the alert
target’s topology with the known vulnerability
requirements of the attack. Take an example of a
RedCode II worm attack against a Linux host, its score
is quite low because it is a false positive. However, a
high score will be evaluated for complete match
between the attack and the vulnerability. The
vulnerability information can be acquired by real-time
vulnerability scanner tools.
Secondly, the severity of the alert is estimated by
comparing the attack target and the network critical
assets. If an attack aims at the web servers of an ebusiness website, it is much more dangerous than the
one aims at web server of a manufacturer because the
latter may be only used for advertisement. For a bank,
just a probe of the database server in the interior
network will be severely focused on because it is
likely the first step of a series of attacks. At the same
time, the attack class should be taken into
consideration in computing the severity level. It is
feasible that the severity level of the alert triggered by
a worm is higher than that triggered by the IP Ping
because the latter can impact the protected network
already.
The threat value is the overall assessment of the
given alert. The reliability score as well as the severity
level should contribute to the overall threat value of an
alert. The threat value is computed by combining them
with different weight. We can tune the values of
weight according to the nature and situation of the

4.4. Alert Correlation
The goal of alert correlation is to identify the
multistage attack scenarios that are composed of
several individual attacks and predict the upcoming
next step of a multistage attack in a timely fashion. In
our algorithm, the alert correlation is really a pattern
detection and match process. When a series of alerts or
mete-alerts fulfill the temporal and content based
constraint of a sequence, an alarm is raised to network
administrator. It is important to be aware of the fact
that the knowledge discovered in the sequential pattern
mining phase is rules, which are represented by
acyclic, directed graph.
As the sequential pattern mining algorithm in
section 3 only focuses on the attribute of attack class
in alerts, the correlation is carried out by comparing
the attack class of a new alert with a certain node in
the graphs. The matched alert sequence is stored as a
chain. When a new alert or meta-alert from alert
verification component arrives at correlation
component, its DetectTime timestamp is compared
with that of the header in a chain. If the time
difference between them exceeds the sliding window
size, the chain is reported to the administrator in a
certain means and then deleted. Otherwise, the attack
class of the incoming alert is compared with the next
node of the matched sequence in pattern graph, which
corresponds to the alert chain. The alert is inserted into
the tail of the chain if the match is successful. If the
chain with the new alert inserted satisfies the node
constraint, an alarm is raised to have network
administrator be careful of the likely next step of the
sequence pattern and take deliberate action to prevent
from further damage. The process of comparison and
insert is not terminated unless each existing chain has
been compared. Finally, a new chain is started, taking
the new alert as its header.
The successful match needs not only the same
attack class between the new alert and the node in
pattern graph but also the higher correlativity score
between the new alert and the alert ahead of it in the
chain. The correlativity score represents the logical

77

association of the contextual attack steps in a
multistage attack. It can be computed by the method
proposed in [1]. It is necessary to compute the
correlativity score because only attack class match is
not enough to make sure the contextual alerts have the
same attack intent. For example, the earlier attack is
aimed at host A while the target of the later one is host
B. Even though they match with the sequence in
pattern graph, there is not causal relationship between
them because the earlier step can not positively affect
the later one.

detect multistage attack in 20 seconds with the
detection ratio 93%. The main reason for missing
detection is that certain patterns can not exceed the
min_support and not appear in pattern graph.

5. Experiment
We implemented the SATA system with JAVA and
PHP with the approach presented in the paper
integrated.

5.1. DARPA 2000 Experiment
DARPA 2000 datasets consist of two intrusion
scenarios, LLDDOS1.0 and LLDDOS2.0.2. Each
dataset includes the network traffic collected from
both the DMZ and the inside part of the evaluation
network. LLDOS 1.0 contains a series of attacks in
which an attacker scans for victim target, exploits
vulnerability, illegally breaks in, sets up Trojan
Mstream DDos software and finally launches DDOS
attack. LLDOS 2.0.2 includes a similar sequence of
attacks run by an attacker which is a little more
sophisticated than the former one. The DARPA 1999
dataset contains 20 days’ different attack traffics. And
the two dataset share the same network topology.
We used playback technique [19] to replay each of
the LLDDOS1.0 and LLDDOS2.0.2 dataset 10 times
separately and each time we replayed one-day attack
traffic of DARPA1999 dataset simultaneously as the
background attack traffics. We chose Snort V2.4.5,
which is configured according to the network settings
of DARPA2000 Evaluation. Among many features of
the alerts generated by snort, we only preserve several
essential ones: DetectTime time stamp, source and
destination address, source and destination port, alert
type.Then we gathered the alerts and stored them in
the database sorting by ascending time order, then
preprocessed by the alert aggregation and verification.
We give the parameters with the minimum support
0.05 and attack sequence time window size 0.5 hours.
The algorithm generated attack pattern graph in
Figure 3.
Then we continue our experiment, replaying another
10 times, to evaluate the capability of real-time
detection of our method. We found that the system can

Figure. 3. The Pattern Graph

5.2. Live Data Experiment
To evaluate the validity of our algorithm and
performance of our system in real network
environment, we deploy a honey-net to attract various
attacks. We deliberately make some hosts in our lab
network run a considerable amount of services with
known vulnerabilities. We also deploy many security
devices, such as Snort, Cisco Router, iptables, Cisco
firewall etc. The topology of experiment network is
shown in Figure 4.
We first performed the experiment that persisted for
2 weeks to collect history data for algorithm in section
3. During 2 weeks test, our system received large
quantity of alerts. After preprocessed, we run
algorithm to discover sequential patterns. Afterward,
we continued our experiment for 1 week to evaluate
our algorithm of detecting ongoing attacks and
predicting the upcoming next step of multistage
attacks.

78

[1] Valdes, A., Skinner, K.: Probabilistic alert correlation. In
Proceedings of the 4th International Symposium on Recent
Advances in Intrusion Detection (RAID), October 2001.

The detection decreased to 84% because the attacks
changes frequently and some new kinds of multi-stage
attacks which did not appear or appeared but did not
reach the min_support in pattern discovery phase.

[2] Valdes, A., Skinner, K.: Adaptive, Model-Based
Monitoring for Cyber Attack Detection. In Proceedings of
the third International Workshop, Recent Advances in
Intrusion Detection (RAID) 2000, Springer-Verlag Lecture
Notes in Computer Science, October 2000.
[3] Dain, O. M. , Cunningham,. Building Scenarios from a
Heterogeneous Alert Stream. In IEEE Workshop on
Information Assurance and Security, United States Military
Academy, West Point, NY, 5-6 June 2001.
[4] Lee, W., Qin, X.: Statistical Causality Analysis of
INFOSEC Alert Data. In: RAID2003.
[5] Qin, X, Lee, W.: Discovering novel attack strategies
from INFOSEC alerts. In: Sophia Antipolis, France, 2004.

Figure. 4. The network topology of experiment

6. Conclusion and Future Work

[6] Qin, X: A Probabilistic-Based Framework for INFOSEC
Alert Correlation. In: College of Computing Georgia
Institute of Technology, Aug. 2005.

In this paper, we proposed a novel approach to
discover the complicated multistage attack behavior
patterns. It adopts the sequential pattern mining
algorithm AprioriAll in data mining field, to find out
the frequency and sequence features in attack
behaviors. The result of AprioriAll is attack class
sequences with user-specified minimum frequency.
Based on the results, we construct pattern graph to
represent the rules in multistage attack, which
overcomes the limitation of necessity of accurate
attack specifications and precise rule definitions. The
alert correlation really becomes
a pattern detection and match process. In order to
detect attack as soon as possible, the real-time alert
correlation system is represented, which is comprised
of the functions of reducing the redundant alerts,
correlating different alerts, constructing attack
scenarios, detecting an ongoing attack and predicting
the upcoming next step of a multistage attack in a
timely fashion. The experiment result shows the
validity of our SATA system in discovery and
predication of attacks.
We will continue to study alert correlation, with
focusing on complementary approaches that can be
integrated into our SATA system to improve the
detection capability. We can also make progress to
improve the system in many other aspects such as alert
reduction, alert aggregation, alert verification and so
on.

[7] Debar, H., Wespi, A.:Aggregation and Correlation of
Intrusion-Detection Alerts. In Proceedings of the 4th
International Symposium, Recent Advances in Intrusion
Detection (RAID) 2001, Springer-Verlag Lecture Notes in
Computer Science, October 2001.
[8] P. Ning, Y. Cui, and D. S. Reeves: Constructing attack
scenarios through correlation of intrusion alerts. In
Proceedings of the 9th ACM Conference on Computer and
Communications Security, Nov 18-22 2002, Washington,
DC, United States, 2002.
[9] P. Ning, Y. Cui, D. S. Reeves, and D. Xu: Techniques
and tools for analyzing intrusion alerts. In: ACM
Transactions on Information and System Security, vol. 7, pp.
274, 2004.
[10]P. Ning and D. Xu: Alert correlation through triggering
events and common resources. Tucson, AZ, USA, 2004.
[11]F. Cuppens. : Managing alerts in multi-intrusion
detection environment. In: Proceedings 17th annual
computer security applications conference. New Orleans;
2001.
[12] F. Cuppens, A. Mie`ge: Alert correlation in a
cooperative intrusion detection framework. In: Proceedings
of the 2002 IEEE symposium on security and privacy; 2002.
[13] F. Cuppens, F. Autrel, A. Mie`ge, S. Benferhat.:
Correlation in an intrusion detection process. In:
Proceedings SE´curite´ des communications sur internet
(SECI02); 2002.

7. References

79

[14] S. Cheung, U. Lindqvist,, M. W. Fong: Modeling
multistep cyber attacks for scenario recognition. In:
Proceedings of the Third DARPA Information Conference
and Exposition (DISCEX III), Washington, D.C., April 2003.

[18] Gula, R.: Correlating IDS Alerts with Vulnerability
Information. Tenable Network Security. 2002.technical
report.

[15] J. L. Hellerstein and S. Ma: Mining Event Data for
Actionable Patterns. In: Proceedings of the CMG 2000
International Conference, Orlando, FL, December 2000, The
Computer Measurement Group (2000).

[19] Kruegel, C. and Robertson, W., Alert Verification:
Determining the Success of Intrusion Attempts, In:
Proceeding of First Workshop the Detection of Intrusions
and Malware and Vulnerability Assessment 2004.

[16] R. Agrawal and R. Srikant: Mining sequential patterns.
In: Research Report RJ 9910, IBM Almaden Research
Center, San Jose, California, October 1994.

[20] Porras, P.A., Fong, M.W. ,Valdes, A.: A missionimpact-based approach to INFOSEC alarm correlation. In:
5th International Symposium Recent Advances in Intrusion
Detection.2002

[17] Eschelbeck, G. and Krieger, M., Eliminating noise from
intrusion detection systems. Information Security Technical
Report, 8(4): 26. 2003.

80

