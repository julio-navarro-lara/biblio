SECURITY AND COMMUNICATION NETWORKS Security Comm. Networks (2017) Published online in Wiley Online Library (wileyonlinelibrary.com). DOI: 10.1002/sec.1756

RESEARCH ARTICLE

Causal knowledge analysis for detecting and modeling multi-step attacks
Ali Ahmadian Ramaki and Abbas Rasoolzadegan*
Department of Computer Engineering, Ferdowsi University of Mashhad, Mashhad, Iran

ABSTRACT
In order to understand the security level of an organization network, detection methods are important to tackle the probable risks of the attackers' malicious activities. Intrusion detection systems, as detection solutions of the defense in depth concept, are one of the main devices to record and analyze suspicious behaviors. Besides the benefits of these systems for security enhancement, they will bring some challenges and issues for security administrators. A large number of raw alerts generated by the intrusion detection systems clearly reflect the need for a novel proactive alert correlation framework to reduce redundant alerts, correlate security incidents, discover and model multi-step attack scenarios, and track them. Several alert correlation frameworks have been proposed in the literature, but the majority of them address the alert correlation in the offline settings. In this paper, we propose a three-phase alert correlation framework, which processes the generated alerts in real time, correlates the alerts with the aid of causal knowledge discovery to automatically extract causal relationships between alerts, constructs the attack scenarios using the Bayesian network concept, and predicts the next goal of the attacks using the creating attack prediction rules. Experimental results show that the scalable proposed framework is efficient enough in learning and detecting known and unknown multi-step attack scenarios without using any predefined knowledge. The results also show that the proposed framework perfectly estimates complex attacks before they can damage the assets of the network. Copyright Š 2017 John Wiley & Sons, Ltd.
KEYWORDS network security; intrusion detection system; alert correlation; attack prediction; causal knowledge *Correspondence Abbas Rasoolzadegan, Department of Computer Engineering, Ferdowsi University of Mashhad, Mashhad, Iran. E-mail: rasoolzadegan@um.ac.ir

1. INTRODUCTION
Today, with regard to the recent growth in virtual appliances and cloud environments and the evolution of the several heterogeneous infrastructures, various applications and services are provided in computer systems and networks [1]. On the other hand, diverse and complex attacks launched on these assets and exploit their possible breaches and vulnerabilities by malicious attackers. Typically, these flaws raised from software components, network protocols, and misconfiguration of services. So network intrusions are one of the most challenges in the area of network security [2]. To protect computer networks from the network intrusions, we need to detect and understand possible intrusion attempts. Intrusion detection is an activity in which a set of methods detect malicious activities against the victims. Intrusion detection systems (IDSs), as detection solutions, are one of the most popular tools to record suspicious activ-

ities and defend heterogeneous infrastructures from network intrusions [3]. These systems use raw network packets and contextual information to detect unusual activities based on anomaly and misuse detection approaches. Heterogeneous IDSs form different vendors logs and record intrusion alerts in different formats. Although IDSs play a key role to enhance the security level of computer networks, they have some defects. The use of IDSs in organizations will bring some main challenges, which have been reported in the previous works [2]. These challenges include alert flooding, false-positive alerts, non-relevant alert, continuous human interaction, limited scalability, lack of interoperability, the inability to correlate and discover the causal relationship between the raw alerts, unable to detect multi-step attacks (isolated alerts), and the real-time prediction of most likely the next steps of the intruders. Based on the aforementioned drawbacks, there is a need for a proactive alert correlation system that analyzes

Copyright Š 2017 John Wiley & Sons, Ltd.

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

intrusion alerts generated by various detection sensors like IDSs in real-time manner [4]. In an organization with heterogeneous IDSs, each IDS tends to operate differently on each class of attack. Therefore, they log different intrusion reports in various formats. To enhance overall detection efficacy by applying several different IDSs on the same network packet dump, there is a need for an alert correlation tool that facilitates intrusion alert analysis task. This tool provides an overview of the probable intrusion efforts by collecting, aggregating, correlating, and jointly analyzing the generated alerts by distributed sensors that are placed at different locations of an organization. Up till now, many alert correlation frameworks have been proposed [2,3,5­7]. One of the most important applications of the alert correlation is to detect multi-step attack scenarios through which the attacker launches a complex attack using a set of single-step attacks. Researchers introduced different methods to detect these kinds of attacks using correlation concepts [2,3]. One of the main emerging components of recent alert correlation frameworks is prediction facility. The role of this component is to generate some prediction rules for the next components of a security operation center such as intrusion response system that prevents the unwanted intrusions. To the best of our knowledge, in spite of the importance of the prediction in such systems, the alert correlation systems containing the prediction component are rare. Based on the literature review, there are different approaches to perform intrusion alert analysis, correlate the raw-generated alerts by the sensors, and construct the attack patterns. These approaches are divided into three main categories: similarity-based, sequential-based, and case-based [2]. In this paper, we use sequential-based approaches to discover multi-step attack scenarios using causal relationships between the alerts. As mentioned before, with the development of networks and the increasing use of security sensors in monitored networks, there is a need to develop an alert correlation framework that is able to process alerts in real time and be scalable in large networks. This is called stream miningbased alert correlation. The main challenges in this area are coping with the high volume of generated alerts, in-time processing, and the changing nature of received alerts over time. In this paper, we propose an efficient alert correlation framework, which is an extension of our previous work [8]. The major differences between the present work and our previous work are as follows: applying Bayesian-based feature selection to improve the correlation probability between two hyper-alerts of attack scenarios, adding episode generation component after alerts normalization and aggregation to extract parts of multistep attacks that can be helpful in predicting the next steps of the attacker, proposing and employing a new attack strategy mining component that detects unknown multi-step attack strategies,

evaluating the framework with three different standard datasets, Defense Advanced Research Projects Agency (DARPA) [9], Information Security Center of Excellence (ISCX) [10], and grand challenge problem (GCP) [11], to show the robustness of the proposed framework in detecting various multi-step attack scenarios, applying a new mechanism for the offline episode tree (ET) and online attack tree (AT) construction process, increasing the number of constraint terms for calculation of correlation probability between two hyperalerts from 7 to 12 to achieve higher accuracy, and proposing a new method for prediction component that generates prediction rules with more than one step. The main contribution of our work is to introduce an efficient alert correlation system with the following features: detection of multi-step attack scenarios proactively, real-time causal knowledge analysis to determine the relationships between generated raw alerts, learning and detecting known and unknown attack patterns in an efficient manner and predicting the next goal of the attacks in on-the-fly attack scenarios, scalable for heterogeneous detection resources, and detecting multi-step attacks while the alerts of each step occurring at least once in a time. The rest of the paper is organized as follows: Section 2 presents a brief review of the related works. Section 3 reviews relevant concepts and definitions that are used in the paper. Section 4 describes the proposed alert correlation framework in the offline and online modes with the roles of their components in the correlation process. The simulation results of applying the proposed framework on the available standard datasets are presented in Section 5, and finally, Section 6 concludes the paper.

2. RELATED WORKS
Several alert correlation frameworks have been proposed in the literature. Salah et al. [2] divided correlation approaches into three groups: similarity-based [12­14], sequential-based [13­19], and case-based methods [14,17,20­22]. As the proposed framework in this paper is based on sequential-based methods, this category is described in detail in the following. In sequential-based approaches, the alerts are correlated to each other based on cause­effect relationships. In other words, this is called prerequisite/consequence relations. These relations are mainly introduced as a logical formula using a combination of predicates of logical operators such as AND/OR connections. The correlation results of these methods are easy to understand because of the use of modeling techniques. Up to now, many methods have been introduced for this category. The methods in
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

this category are divided into seven sub-categories that the most important ones are Bayesian networks [17­19], Markov models [23,24], graphs [25,26], and neural networks [27,28]. The main advantages of these methods are their ability to detect complex attack scenarios, discover the new unknown attack scenarios, and their scalability and usability for heterogeneous resources. However, most of these methods suffer from the false correlation. In the rest of this section, some related works are reviewed from viewpoints of the real time, the Bayesian networks, and the prediction, the main features of the proposed correlation framework. Also, a comparison analysis for the main related work is provided in Table I regarding the taxonomy of Salah et al. [2]. From the viewpoint of proposing real-time frameworks, Soleimani and Ghorbani [13] proposed an approach to detect multi-step attack scenarios using the combination of stream mining and decision tree methods. In their approach, a decision tree-based method is used for learning the specification of each attack pattern and detecting them in alert streams. They used the alert correlation matrix for this purpose. Alert correlation matrix defines the correlation strength of each two alert types in the system. The main drawback of their work is that their framework is more dependent on the expert knowledge. Ramaki et al. [14] proposed a framework for alert correlation in early warning systems. This framework includes a correlation scheme based on the combination of statistical and stream mining techniques. Their framework works in real time by extracting critical episodes from the sequences of alerts, which could be a part of multi-step attack scenarios. A causal correlation matrix is then used for encoding correlation strength between the alert types of attack scenarios. The main disadvantage of their method is that it is timeconsuming and not scalable because of the use of similarity functions. Zali et al. [16] proposed an alert correlation system based on prerequisite and consequence analysis. In the system of Zali et al., the knowledge base of attack patterns is represented as a graph model, namely, causal relations graph. Some trees related to alerts probable correlations are constructed in an offline manner, while the correlations of each received alert in real time with previously received alerts will be identified by performing a search only in the corresponding tree. Faraji and Abbaspour [29] proposed an adaptive framework for a multi-step attack scenario extraction based on fuzzy inference rules. Their model consists of two main components, namely, online fuzzy clustering and fuzzy inter-event pattern matching. The role of the first component is clustering generated lowlevel alerts into fuzzy events using their similarity scores. The next component supplies the first component with the historical relevance of low-level alerts by discovering fuzzy patterns among them. Since their approach works based on similarity-based methods, it cannot detect new attack patterns, which their behaviors are unknown. Also, from the viewpoint of applying Bayesian networks techniques, Kavousi and Akbari [17] proposed a new algorithm to detect attack behavior patterns from a
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

large number of intrusion alerts without prior knowledge of the multi-step attacks. Their algorithm has two modes. The offline mode, which periodically learns multi-step attack patterns from historical alerts using a Bayesian causality analysis and the online mode, which correlates alerts in real time based on the attack patterns extracted by the offline mode. Their proposed framework is not able to predict the future behavior of a running attack. Qin [18] proposed a probabilistic correlation model based on Bayesian mechanisms to correlate alerts and mine the related alerts if they match to these three features: They have a causal relationship; they have a sequential relationship based on time constraint; and there exists a high statistical one-way dependency from the effect alert to the causal alert. The work presented in [19] deals with the analysis of Transmission Control Protocol (TCP) connections and compares the performances of Bayesian networks and decision trees in detecting network attacks and attack plans. In addition, from the viewpoint of prediction capabilities, Farhadi et al. [23] proposed an algorithm based on the stream mining, namely, the attack scenario extraction algorithm (ASEA), which is able to predict the future events using hidden Markov model. Their algorithm constructs attack scenarios using alert frequencies in different time windows and analyze the correlated alerts. High false-negative rate in detecting the scenarios is the main drawback of the ASEA proposed by them. Moreover, the ASEA is not able to detect new attack scenarios. In [24], Fredj proposed a global alert correlation system that unifies heterogeneous alerts, removes false alerts, aggregates the alerts, and correlates them to create multi-step attack scenarios. The framework is based on absorbing Markov chain model that is able to predict the future behavior of an attacker. In Fredj's work, the intruder gravity ratio of the attack is computed as a prediction value instead of calculating the probability of the next step of an attack. Another method for predicting the multi-step attack behaviors was proposed by Cheng et al. [20]. Their method is called judge evaluation of attack intension, which inspects the security alerts in the network and provides a probabilistic approach for the projection of the multi-step attacks by measuring the differences between the stored actual multi-step attack session graphs and the related under-running ones. When used in conjunction with statistical data mining techniques, the Bayesian inference model has several advantages for alerts analysis: the high speed of the alert correlation process, incorporating expert knowledge by populating the conditional probability tables, convenient to introduce partial evidence and find the probability of unobserved variables, the adaptive nature to new evidence and knowledge by updates through network propagation, and calculating the correlation output as a probability, between 0 and 1, instead of a binary result from a logical combination that is easy to understand for security experts.

A. Ahmadian Ramaki and A. Rasoolzadegan

Table I. Main related works comparison regarding the taxonomy of Salah et al. [2]. Cheng et al. [20] Soleimani and Ghorbani [13] Ramakiet al. [14] Zali et al. [16] Kavousi and Akbari [17] Qin and Lee [18] Khor et al. [19]

Farhadi et al. [23]

Fredj [24]

Faraji and Abbaspour [29]

Causal knowledge analysis for detecting and modeling multi-step attacks

Number of data sources Single Multiple Type of applications Network management IT security (SCADA) Correlation method Similarity-based Sequential-based Case-based Type of architecture Centralized Distributed Hierarchical X X X X X X X X X X X X X X X
SCADA, Supervisory control and data acquisition.

X X X X X

X

X

X

X

X

X

X

X

X

X

X

X X

X X

X

X X

X

X

X

X

X

X

X

X

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.

DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

In this paper, with regard to the aforementioned advantages of the Bayesian inference model as a causal knowledge discovery approach, an alert correlation framework, which is called three-phase alert correlation (3PAC), is proposed for large heterogeneous. The proposed framework processes the generated alerts in real time, correlates the alerts, constructs the attack scenarios using the Bayesian network concept, and estimates the next goal of attacks using the creation of the attack prediction rules. In the next section, some relevant concepts and definitions that are required for a better understanding of the proposed framework are presented.

3. PRELIMINARIES
The concepts used in this paper are episode, sub-episode, serial episode, and Bayesian networks, which are briefly explained in the following statements. An episode is a partially ordered set of consequent events that can be explained as a directed acyclic graph (DAG) [13,14]. For example, an episode is shown in Figure 1. In this example, the event type Sadmind_Ping occurs before the event type Sadmind_Amslverify_Overflow. We say, episode e0 is a sub-episode of another episode e, expressed by e0 v e, if there is a mapping between their event types. It should be noted that to determine the subepisode relationship, the event types are important not the events themselves. A sample of a sub-episode concept is depicted in Figure 2. A serial episode is a partially ordered set of events for consecutive and fixed-time intervals in a sequence. An example of a serial episode is illustrated in Figure 1. In this work, a serial episode concept is used to discover different serial combination of events (hyper-alerts) to determine critical episodes. For the sake of simplicity, we represent a serial episode ei as a tuple ei = hA1 , A2 , : : : , An i, where A1 ­An are the types of hyper-alerts a1 , a2 , : : : , an

constructing the serial episode and occurring in the order appeared in the tuple. Serial episode frequencies are a non-negative number assigned to a serial episode discovered from the sequences of events in an episode window. A frequent serial episode might be a part of a multi-step (complex) attack pattern, if it is noticed as a critical episode that is explained in Section 4.1.5. The other main concept is Bayesian network. A Bayesian network is a DAG, where its nodes represent random variables (x1 , : : : , xn ) and the arcs represent conditional independence among these variables. Furthermore, each node has a conditional probability distribution that calculates the effect of the parents on the nodes [30]. In the Bayesian networks, probabilistic beliefs about the connections strength are updated as new information becomes available using Bayes' theorem based on Equation 1. In this equation, P(X | Y ) is the posterior probability, P(X ) is the prior probability, P(Y | X ) is the probability of observed information Y given a particular event X , and P(Y ) is the unconditional probability of occurring Y [8]. P(X |Y ) = P(Y |X )P(X ) P(Y ) (1)

4. THE PROPOSED FRAMEWORK
As mentioned in Section 2, there are many different frameworks for the alert correlation problem in alert streams [13,14,16,23], but each of them has considerable drawbacks. The proposed framework in this paper provides a real-time algorithm for the alert correlation, which is suitable for large scalable networks. The proposed framework extracts causal knowledge based on the Bayesian network. However, automating the alert correlation process raises some main challenges. There is a large volume of generated raw alerts, and the alerts of a multi-step attack scenario meet the correlation component at different points in time. In addition, the most important challenge in the real-time applications is that the received low-level alerts are analyzed and eliminated upon arrival because the memory is bounded. In the following, as shown in Figure 3, the proposed framework is described. The first two components in Figure 3 are performed in the offline mode, and the last one is performed in the online mode. The framework consists of the following three main phases: Phase 1. In this phase, after collecting generated raw alerts from IDSs and storing them in the alerts database, these alerts are converted into a standard format for later processing by the alert normalization component. Following this, to reduce information redundancy, the similar alerts are aggregated by the alert aggregation component. This is performed by the similarities between

Figure 1. An example of serial episode [14].

Figure 2. Sub-episode concept (e1 is a sub-episode of serial episode e2 ) [13].

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Figure 3. Overview of the proposed alert correlation framework.

the features of raw alerts that occurred in a specified period of the time. The output of this step is a hyper-alerts database. Then, Bayesianbased feature selection is used to infer the causal relationships between the hyper-alerts over a Bayesian network. The output of this component is two tables, namely, correlation and relevance tables. Phase 2. In the second phase, the episode generation component uses hyper-alerts to extract serial episodes with different lengths. Next, the ET construction component learns actual multi-step attack scenarios and the false combination of hyper-alerts by using the information of the correlation and relevance tables. This component filters the episodes based on their degree of criticality. The final outputs of the second phase will be the ET of known attack scenarios. Phase 3. In this phase, the real-time alert stream is received by the correlation framework. In the online mode, the stream mining-based alert correlation will be performed in a real-time manner. In this area, the alerts must be processed once a time and cannot be stored for later processing. In this phase, normalization, aggregation, Bayesian-based feature selection, and episode generation components are applied to the incoming alerts. The main goal of this phase is understanding the current behavior of the attacker by constructing the AT. Then, the discovered benign episodes are sent to the new attack strategy detection component for more analysis to find probable unknown attack strategies. On the other hand, by creating the on-the-fly AT and comparing it with the calculated ET in the offline

mode, the framework will be able to predict the next goal of running attacks. In continuation, we describe the overall functionality of the proposed framework based on some assumptions. In this paper, we assume that in a heterogeneous environment, there are a number of IDSs that monitor the users' behaviors and trace their activities and generate low-level alerts. Then, the generated alerts by each IDS are transmitted to a central alert correlation unit. In continuation, the alerts are normalized and sorted based on their creation timestamp. After that, the main attack scenario detection is applied to the alerts' database. The low-level alerts generated by the deployed heterogeneous sensors are divided into larger parts, named batches. Each batch is categorized into smaller parts, named time windows (Figure 4). When a batch of alerts is completed, the alerts are sorted based on their create time, and after that, the alerts are aggregated and divided in some smaller parts that are called time windows. The fused alerts are called hyper-alerts. Processing a time window starts when that window is completed. Then, relevance analysis of the alerts is applied to extract causally correlated alerts that might be the parts of some multi-step attack scenarios that are running on the target. In this framework, there is an attack prediction compo-

Figure 4. Episode window of size win and batch time [13].

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Figure 5. The proposed correlation framework in the offline mode. IDS, intrusion detection system.

nent that is responsible for generating prediction rules that represent all of the probable actions with their probability values that may be launched by an attacker. The overview of our proposed alert correlation framework in the offline and online modes is shown in Figures 5 and 9, respectively. In the following, the role of each component of these modes is described.

4.1. Offline mode As stated before, in the offline mode, the ET of the generated hyper-alerts is constructed. This process is performed in five steps: alert normalization, alert aggregation, Bayesian-based feature selection, episode generation, and ET construction, which will be described in the following subsections. Typically, in an organization with heterogeneous IDSs, the IDS sensors generate a huge number of low-level alerts in different points in time where each of them has a unique create time. These alerts may include false-positive, redundant, irrelevant, and low-priority alerts. Only a part of these alerts are interesting alerts and can be part of a multi-step attack scenario. The alert receiver module receives and prepares the low-level alerts properly. Some alert features are very important for further analysis by the correlation component. These features include source and destination IP addresses, source and destination port numbers, the alert type, the attack severity, and the timestamp. After feature extraction process, the alerts are stored in a relational database for further analysis.
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

4.1.1. Alert normalization. In the normalization phase, it is assumed that the alerts that are generated by heterogeneous IDSs are gathered and saved in a central database before they are converted into a standard format. Normalization means that we take known log messages, parse them for piece part components (IP addresses, port numbers, timestamps, severity, etc.), and turn them into a common format. This common format is called intrusion detection message exchange format [31]. Because the raw alerts are generated from heterogeneous sensors with different vendors and the alerts are encoded in different formats, the normalization operation is considered a necessity.

4.1.2. Alert aggregation. The aggregation component reduces the number of generated low-level alerts to simplify alerts analysis and management. The operations of this component on the raw alerts do not eliminate the main security information of the generated alerts. A significant amount of alerts, generated by heterogeneous IDSs, are grouped into a fused alert (or hyper-alert). A low-level alert ati (ti represents the timestamp of a low-level alert a) is an alert generated by an IDS with a set of alert features as source and destination IP addresses, source and destination port values, the alert type, the attack severity, and the timestamp denoted by f1 , f2 , . . . , fj . The value of the feature fj in the alert ati is represented by ati [fj ]. The range of possible values or domain of feature fj is represented as dom(fj ).

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Figure 6. A sample of the snort intrusion detection system alert.

Figure 6 illustrates a log entry of a single intrusion alert generated by the snort IDS [32]. The entry consists of the number of features. The first line represents the type, classification, and the default priority (severity) of the intrusion alert. The second line records the creation time of intrusion alert and the IP addresses and ports of the source and destination of the packet that generated the alert. Additionally, the third line logs the details of the packet such as the packet's time to live, network protocol, type of service, and length of the packet. In the proposed framework, only the eight features mentioned in the aggregation process participate in correlation analysis, and the other features of an alert do not effect on the value of correlation probability between two distinguished alerts. In the aggregation process, all low-level alerts with a unique type of alert, which occurred in a specified time period, are grouped together. The combination of these alerts forms a hyper-alert. After aggregation component, the total number of hyper-alerts is reduced and less than the number of low-level alerts. Formally, if an alert set {at1 , at2 , : : : , atn } to be generated in a time interval t and each alert has a set of attributes as aforementioned, these alerts are similar and can be grouped if at1 [alertType] = at2 [alertType] = ... = atn [alertType]. A hyper-alert (named A) of these identical alerts is defined as follows: A[srcIP] = at1 [srcIP] = at2 [srcIP] = : : : = atn [srcIP], A[dstIP] = at1 [dstIP] = at2 [dstIP] = : : : = atn [dstIP], A[srcPort] = at1 [srcPort] = at2 [srcPort] = : : : = atn [srcPort], A[dstPort] = at1 [dstPort] = at2 [dstPort] = : : : = atn [dstPort], A[startTime] = t1, A[endTime] = tn, A[alertType] = at1 [alertType], A[attackSeverity] = Max{ati [attackSeverity]}, A[counter] = The number of similar alerts. 4.1.3. Bayesian-based feature selection. This component is the core component of the framework for extracting attack scenarios. The basic idea of this component is discovering causal analysis between identical alert types within a time window. The statisticalbased causal analysis [23] is leveraged in this component for finding the relationships between alert types in the alert streams. In this framework, the relationships between hyper-alerts based on their co-occurrence within a time interval are statistically analyzed. Basically, evaluating the relationships between intrusion alerts is meant alert features similarity analysis. Because all the features of an alert do not have the same effect on the relationship between two hyper-alerts, it is significant to determine the attributes that are vital to be analyzed. Having a set of hyper-alerts, the aim is to identify

alert attributes that have the greatest impact on the relationships between intrusion alerts. In this study, the basic idea of attribute-level analysis originates from Ren et al. [15]. This component performs the causal knowledge discovery process in two main steps as follows: Step 1: correlation probability calculation This module calculates the correlation strength of the alerts and identifies the alert attributes that are closer to the correlation probability of the alerts. As mentioned before, the probability inference model is based on the Bayesian network concept. A Bayesian network is a probabilistic graphical model that calculates probabilistic relationships between a set of variables. A Bayesian network consists of the following parts: (1) a causal network structure that represents the variables via a DAG and (2) a set of probabilities associated with each variable and represented in tables that are called conditional probability tables. These two components together represent causal relationships between child and parent variables and the correlation strength between them. To calculate the child variable occurrence probability given its parents state a conditional probability P(child|parent) has to be computed. This probability can be calculated as Equation 1, where X = child and Y = parent. In the area of alert correlation, the probabilistic relationships between a huge volume of the low-level alerts are represented in order to form a probabilistic inference from them. Pre-conditions (parent alerts) are described as the crucial preconditions that must exist for the complex attack to be successful, and the consequences (child alerts) of the attack are explained as the impacts that come after a specific attack has occurred. Therefore, in this context, every hyper-alert can be a node of the Bayesian network that a child node can be the result of the occurrence of a parent node. Propagating the probabilistic inference calculation from parent alerts to child ones allows to infer relations between hyper-alerts and estimate the correlation strengths of their relationships. In fact, using the Bayesian network to analyze causal relationships has the following advantages: estimating the relationships between hyper-alerts and examining the effect of each hyper-alerts attribute on the correlation strength between them. After hyper-alert generation, we use the output of the aggregation component for Bayesian inference analysis. After that, we suppose that A and B are two generated hyper-alerts in a time window with size win and a and b are
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

their alert types, respectively. Moreover, the procedure calculates the effect of the feature fj on the correlation strength between identical alert types of hyper-alerts. This process is depicted in Algorithm 1. Algorithm 1 Causal Knowledge Analysis Procedure [15]
1:

Algorithm 2 Feature Subset Selection Procedure [15]
1:

2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: 22: 23: 24: 25: 26: 27: 28: 29: 30: 31: 32:

function C AUSAL K NOWLEDGE A NALYSIS (alerts, batch, win) F where alerts: hyper-alerts, batch: length of the batch time, and win: length of the time window input: hyper ­ alert set length of the batch time length of the time window output: probability of each alert type causal correlated alert pairs with their probability algorithm: compute P(B) AF ; for all Ai 2 A do if Ai [fj ] 2 dom(B, fj ) then add Ai into AF end if end for compute P(Ai [fj ] = dom(B, fj )) ABF ; for all Ai 2 AF do w number of the time windows in a w batch time TWAi time window of Ai TW TWAi , TWAi +1 , : : : , TWAi +w if 9 Bii 2 B, s.t. Bii [fj ] = Ai [fj ] then add Ai into ABF end if end for compute P(B ^ A[fj ] = dom(B, fj )) P(B | A[fj ] = dom(B, fj ))
P(B^A[fj ]=dom(B,fj )) P(A[fj ]=dom(B,fj ))

2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: 22: 23: 24: 25: 26: 27: 28: 29: 30: 31: 32:

function F EATURE S UBSET S ELEC TION (alerts, features, Â ) F where alerts: hyper-alerts, features: the list of alert features, Â : a predefined threshold input: hyper ­ alert set feature set predefined threshold output: A subset of the relevant features algorithm: Fsubset ; for all fj 2 F do if P(B ^ A[fj ] = dom(B, fj )) > Â then add fi into Fsubset end if end for n number of the elements in the Fsubset k 2 while k Ä n do G k size combination from the Fsubset tempSet ; for all gi 2 G do if P(B | A[G] = dom(B, G)) > Â then add 8fj 2 gi into tempSet end if end for if tempSet ¤ ; then Fsubset tempSet n number of elements in Fsubset k k+1 end if end while return Fsubset end function

return P(B), P(B | A[fj ] = dom(B, fj )) end function

Algorithm 1 returns the occurrence probability of the alert type b given that alert type a occurred, denoted by P(B|A[fj ]) = dom(B, fj ). This procedure is based on the calculation of following three steps: the prior probabilities of the alert type b, the probability of the occurrence of the type alert a as P(A[fj ]) = dom(B, fj ), and the probability of the occurrence of the type alert b as P(B ^ A[fj ]) = dom(B, fj ). In Algorithm 2, to extract casual relationships between identical alert types, we use a time constraint as the batch
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

time. This limitation allows the algorithm to numerate only those alerts of the type b that have occurred in a batch time period. The value of the batch time is considered based on the overall performance of the system. In other words, for an attack with a high speed, such as distributed denial of service (DDoS), we set a small value for the batch time. On the other hand, by applying Algorithm 2 on a stream of alerts, we are able to distinguish between the effective and non-effective features of an alert on the value of the correlation probability. However, by using Algorithm 2, we cannot determine the degrees of effectiveness of the certain attributes of the alerts. To this aim, we use Algorithm 2 to determine whether the combinations of certain attributes could have the greatest impact on the value of the correlation probability of the two identical alert types a and b. For more analysis of the alert's features, they can be categorized into the four following groups based on the relevancy strength and a predefined threshold Â :

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

(1) If P(B|A[fj ]) = dom(B, fj ) = P(B), then fj is an irrelevant feature and does not effect on the occurrence probability of the alert types b. (2) If P(B|A[fj ]) = dom(B, fj ) < P(B), then fj is a relevant feature with negative impact. In other words, if an alert with type a contains specific values of feature fj , this can reduce the occurrence probability of the alert type b. (3) If P(B) < P(B|A[fj ]) = dom(B, fj ) < Â , then fj is a relevant feature with positive impact. In other words, if an alert with type a contains specific values of feature fj , this can increase the occurrence probability of the type b alerts. (4) If P(B|A[fj ]) = dom(B, fj ) > Â , then is a relevant feature with critical impact. In other words, if an alert with type a contains specific values of feature fj , this can considerably increase the occurrence probability of the type b alerts. After calculating the impact of each feature on the occurrence probability of the next alert type, we can select the best subset of features that have a critical impact on the value of the correlation probability. Algorithm 2 processes features based on a greedy method to determine the subset of them, which are relevant attributes with critical impact. Step 2: creating correlation and relevance tables After the calculation of the correlation probability and determining the effect of each of the alert's features on the occurrence probability of the next alert type, two tables are constructed, namely, correlation and relevance tables. These tables represent the extracted causal knowledge between identical alert types. The role of the correlation table is to represent all pairs of alerts that can be part of

an attack scenario (Table II). The correlation table contains the correlation probability between two identical alert types and the relevant features and constraints between every pair of the alert types. For example, Table II represents a correlation table. In this table, A1 , A2 , . . . , An are the list of identical alert types in an attack scenario. On the other hand, the relevance table includes information about each alert type. This table contains the number of rows that each row is related to one alert type. Each row of the relevance table contains the occurrence probability of a unique type of alert, and its strong and weakly relevant feature set. The information of this table is needed for each alert type, when computing the causal knowledge analysis between two subsequent alerts. This is shown in Algorithm 1 (lines 27 and 28). Table III shows an example of the relevance table. 4.1.4. Episode generation. To extract parts of multi-step attacks, the correlation strength values between hyper-alerts are necessary. The high values of these relations represents a special activity of an intruder and can be helpful in predicting future steps of attacker. In the alert sequence depicted in Figure 7, we aim to find all serial episodes by using maximum time bound of 40 s and time window sizes of 10, 20, 30, and 40 s. In addition, frequency threshold is set to one occurrence. To find all serial episodes, at first, all singletons are created, that is, episodes of size 1 (hAi, hBi, hCi, hDi). While creating the singletons, we also create an occurrence table for them (Table IV). After the first database pass, we do not have to scan the database anymore, but we use the created inverse tables. In continuation, from those frequent episodes, build candidate episodes of size 2 including hA, Bi, hB, Ai, hA, Ci, hC, Ai, hA, Di, hA, Di, hB, Ci, hC, Bi, hB, Di, hD, Bi, hC, Di, and hD, Ci. Then, we use the inverse table to create the minimal occurrences for the candidates. For example, for hA, Bi, take all sub-episodes, namely, hAi and hBi, and compute minimal occurrence hA, Bi as follows:

Table II. Sample of the correlation table. Alert type pair hA1 , A2 i hA1 , A3 i ... hAi , Ai+1 i ... hAn­1 , An i Correlation probability 0.85 0.9 ... 0.65 ... 1.0 Relevance constraints f2 of A1 = f2 of A2 ­ ... ­ ... Subnet of f2 is in one range

No. 1 2 ... i ... n

Figure 7. An example of alert the data sequence.

Table III. Sample of the relevance table. Occurrence probability 0.85 0.9 ... 0.85 ... 1 Strongly relevant features f2 , f3 , f4 f3 , f6 ... f1 , f2 , f3 ... f2 , f6 , f8 , f9 Weakly relevant features f1 , f5 f2 , f4 ... f4 , f6 ... f1 , f4 , f5

No. 1 2 ... i ... n

Alert type hA1 i hA1 i ... hAi i ... hAn i

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Read the first occurrence of hAi (30 ­ 30), and find the first following hBi (40 ­ 40), where (X ­ Y ) means that the episode is started from the X second and finished in the Y second. Then take the second occurrence of hAi (60 ­ 60), and find the first following hAi (70 ­ 70). Then continue with hB, Ai. In the next step, we find all episodes frequent and build the candidate episodes of size 3. Again, almost all candidates are frequent. Finally, the same procedure is repeated for candidates of size 4, and episodes hD, C, A, Bi in (10 ­ 40), hD, A, B, Ci in (50 ­ 80), hC, A, B, Di in (20 ­ 50), hC, B, D, Ai in (20 ­ 60), and hB, D, A, Ci in (40 ­ 80) are found to occur. As shown in Figure 7, candidates of size 5 are not found, so the algorithm terminates. Table IV shows the repetition patterns of episodes with different

lengths of the mentioned alert sequence (Figure 7) and their occurrence time. In the proposed framework, the episode generation component extracts serial episodes by sliding a batch window to its episode windows over a sequence of hyper-alerts as it is shown in Table IV. The discovered frequent serial episodes are divided into two categories, namely, critical episodes and benign episodes, that are used for an attacker's behavior modeling using constructing the ET, which is described in Section 4.1.5.

4.1.5. Episode tree construction. Three-phase alert correlation framework needs to model attacker behavior using an ET during the offline mode. The ET is created based on the discovered critical episodes in different episode windows.

Table IV. Sample of episode generation process. No. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 Episode name hDi hCi hAi hBi hD, Ci hD, Ai hD, Bi hC, Di hC, Ai hC, Bi hA, Di hA, Ci hA, Bi hB, Di hB, Ci hB, Ai hD, C, Ai hD, C, Bi hD, A, Ci hD, A, Bi hD, B, Ci hC, D, Ai hC, A, Di hC, A, Bi hC, B, Di hC, B, Ai hA, D, Bi hA, B, Di hA, B, Ci hB, D, Ci hB, D, Ai hB, A, Ci hD, C, A, Bi hD, A, B, Ci hC, A, B, Di hC, B, D, Ai hB, D, A, Ci Episode length 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 Minimal occurrences (10 ­ 10), (50 ­ 50) (20 ­ 20), (80 ­ 80) (30 ­ 30), (60 ­ 60) (40 ­ 40), (70 ­ 70) (10 ­ 20), (50 ­ 80) (10 ­ 30), (50 ­ 60) (10 ­ 40), (50 ­ 70) (20 ­ 50) (20 ­ 30) (20 ­ 40) (30 ­ 50) (60 ­ 80) (30 ­ 40), (60 ­ 70) (40 ­ 50) (70 ­ 80) (40 ­ 60) (10 ­ 30) (10 ­ 40) (50 ­ 80) (10 ­ 40), (50 ­ 70) (50 ­ 80) (20 ­ 60) (20 ­ 50) (20 ­ 40) (20 ­ 50) (20 ­ 60) (30 ­ 70) (30 ­ 50) (60 ­ 80) (40 ­ 80) (40 ­ 60) (40 ­ 80) (10 ­ 40) (50 ­ 80) (20 ­ 50) (20 ­ 60) (40 ­ 80) Episode frequencies 2 2 2 2 2 2 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Definition 4.1 (Critical episode). A serial episode e = hA1 , : : : , An i is a critical episode, if for all consequent pairs of the alert types hAi , Ai+1 i (1 Ä i < n) in the episode, Table II, the following two conditions are met: (1) The correlation probability of all consequent pair of the alert types is equal to or greater than a predefined threshold Â . (2) Relevance constraints between each pair of a serial episode are the same exact constraint terms that are listed in Table II. The other extracted episodes that are not critical are determined as a benign episode. It has at least a pair of the uncorrelated and unmatched alert types that might be a false-positive or a sub-episode of a new unknown attack strategy. The recognized critical episodes in each episode window are directed to phase 2 (Figure 3) for the ET creation, and the other episodes are sent to the new attack strategy mining component to recognize new and unknown attack strategies. The main objective of the ET construction component is to construct the offline ET by extracting the critical episodes. The ET models attacker behaviors in the offline mode and is constructed by critical episodes. We define the ET in a formal way as follows [14]. Definition 4.2 (ET). An ET is defined as AT = (T , 6, f ), where T is a set of hyper-alerts. 6 is a partial order over set T (the hyper-alerts are listed in chronological order) such that 8 ai 2 T; set {aj 2 T |aj 6 ai } is a well-ordered set by relation 6 (a property which is required to be a tree). f is a labeling operator that associates with each node a 2 T, a triple f (a) = hA, ef , ew i, where A denotes the type of the node (hyper-alert), ef is the episode frequency calculating by traversing from the root node to node a in the tree, and ew is the total number of episode windows where the episode has been seen. This information is used in prediction rules extraction for early prediction of the attacker's next goal (for more details, refer to Section 4.2.2). In addition, each of the ETs contains a null node (in T) as its root node. At the start of the ET construction process, the ET contains the null node as its root. When the episode windows are processed and critical episodes are extracted, the ET is gradually updated by adding the critical episodes. To this aim, after discovering the critical episodes in an episode window, each of them that is a sub-episode of another one in the list is deleted from the list (to escape duplicated episode insertion in the ET). To add a discovered critical episode, if a prefix of it is matched with a prefix of a path in the ET, the episode is appended to the ET, and the labels of existing nodes in the matched prefix are updated (except

the types of the alerts in the labels that remain intact). It should be noted that if there is no path in the tree with a prefix matching a prefix of the critical episode, the critical episode is attached to the root node. This process is depicted in Algorithm 3. Algorithm 3 Episode Tree Construction Procedure
1:

2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: 22: 23: 24: 25: 26:

function E PISODE T REE C ONSTRUC TION (alerts, batch, win) F where alerts: hyper-alerts, batch: length of the batch time, and win: length of the time window input: hyper ­ alert set length of the batch time length of the time window output: off ­ line episode tree (ET ) algorithm: root null nb number of total batchs ne number of episode windows while batch window Ä nb while episode window Ä ne for i = 0 to alerts.size() generate episodes based on Table IV for all e 2 episodes apply Algorithm 1 if e is a critical episode ET .add[e] else discard e end for all end for end while end while end function

Figure 8(a) illustrates critical episodes e1 , e2 , e3 , and e4 (discovered from the first episode window). These episodes should be added into the ET. As shown in Figure 8(a), episode e1 is a sub-episode of episode e2 and should be deleted from the list. On the other hand, episode e2 (which contains e1 as well) is appended to the root of the ET based on Figure 8(b). After adding the critical episodes e3 and e4 , as shown in Figure 8(c), the information of the nodes is revised (e.g., the labels of nodes A and D). Generally, in the offline mode, 3PAC creates the ET using the fused alerts. In contrast, in the online mode, 3PAC builds the online AT and updates it in real-time manner after processing the alerts of each episode window. 4.2. Online mode As mentioned before, in the online mode (Figure 9), the most probable next steps of the attacker are predicted. The prediction is performed in five main steps on the real-time
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Figure 8. Example of the episode tree (ET) (a) critical episodes e1 , e2 , e3 , and e4 , (b) insertion of episode e2 (including e1 ) in the ET, and (c) insertion of episodes e2 , e3 , and e4 in the ET.

Figure 9. The proposed correlation framework in the online mode.

alert stream: alert normalization, alert aggregation, episode generation, AT construction, and alert prediction. The first three steps are the same as those of the offline mode. In the following, the role of the remaining components of this mode is described. Moreover, we describe how the framework is able to detect new attack scenarios and update the AT in Section 4.2.3. 4.2.1. Attack tree construction. According to the previous statements, in the offline mode, the attacker's behaviors are modeled into the ET based on critical episodes extraction. Furthermore, the ET maintains the frequency statistics of the detected critical episodes over the time windows processing. Similar to the ET creation in the offline mode, in order to predict the future behavior of the attacker, we need to construct an
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

AT in the online mode. This tree (the AT) is gradually constructed over consequent time windows and shows the current situation of the network. Formally, an AT is exactly the ET in structure and behavior, but this operation is performed in the online mode, based on the four following assumptions: Low-level alerts are generated by various sensors in the real-time mode. The nature of processing is a one-time processing and the changing nature of received alerts over time with the lack of any alert storing. After the episode generation phase, the extracted episodes are divided into two categories, critical episodes and benign episodes. The critical episodes are detected by using the stored information of the

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

correlation table of the related attack scenario. In contrast, the remaining benign episodes are led to the new attack strategy mining component to find new and unknown multi-step attacks strategies. For each extracted critical episode from the alert sequence, both ef and ew are inserted in the AT. This information is needed for the attack prediction component. Figure 10 demonstrates an example of an ET and the various states of an AT.

Algorithm 4 Attack Prediction Procedure
1:

4.2.2. Attack prediction. As we mentioned earlier, one of the main contributions of our work is to introduce an efficient alert correlation framework that is able to discover complex attack strategies in a proactive manner. In our proposed framework, during the online mode, after constructing the AT based on the real-time alert streams, the framework is able to predict the attacker's next goal for an under-running multi-step attack scenario whose parts of the mentioned scenario are discovered and emerged in the online AT. To this aim, the captured knowledge about the attack scenarios from previous steps, which is included in the offline ET, is used (Figure 9). In the online mode, after the AT construction, the AT has some leaves that can be considered to forecast the intruder's next action. Let A be the alert type of a leaf node in the online AT, and ei is the critical episode containing A (the episode acquired by traversing from the root node of the AT to the leaf node A). In addition, suppose that ej is an episode in the ET (with the beginning of the root node) such that ei v ej (ei is a sub-episode of ej ) and ei matches with a prefix of ej . To predict, for any of the leaf node, such as A, some prediction rules are produced. Each of them for leaf A is represented by hAi ) ek where ek v ej . In our implemented framework, the B-Tree data structure is used for searching. To the best of our knowledge, the time complexity of the B-Tree for the mentioned operation is O(n) in the worst case [33]. In our problem, parameter n indicates the total number of unique alerts. After prediction rule generation phase for each leaf node of AT like A, the prediction component calculates the probability of each generated prediction rule based on Equation 2, which is used in Algorithm 4. 1 ­ 2*isum ; if i is even *i 2* sum 1 ­ (i*i)­1 ; if i is odd

2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: 22: 23: 24: 25: 26: 27: 28: 29: 30: 31:

function P REDICTION A NALYSIS(e, ET , AT ) F e: current episode in AT, ET: episode tree, and AT: attack tree input: current episode in AT off ­ line episode tree (ET ) online episode tree (AT ) output: probability of prediction rule algorithm: node0 root of learning tree sum 0 for i = 0 to e.alerts.size() for child c0 of node0 if e.alert[i] == c0.alert node c0 break end if end for for child c1 of node1 if e.alert[i] == c1.alert node c1 break end if end for sum + = c0.windowFreq / c0.AlertFreq­ c1.windowFreq / c1.AlertFreq end for for i = 0 to e.alerts.size() ­ 1 for child c of node calculate probability based on Equation 2 end for end function

Probability =

(2)

Then, the most probable rules are extracted and reported to the security administrator. It should be noted that the size of the episodes appearing in the subsequents of the rules can be 1, 2, . . . , or n. Thus, just the rules with the subsequents of the same size can be compared together, using the computed probability.

4.2.3. New attack strategy mining. The proposed framework is able to find new attack strategies. As mentioned before, in the AT construction phase, the extracted episodes with different lengths are divided into two categories, critical episodes and benign episodes. Extracted benign episodes are the input of the new attack strategy component. After receiving benign episodes, the new attack strategy component decomposes them to the unary episodes. Each of the resulted unary episodes is a hyper-alert with a specific alert type, which has not been seen by the Bayesian-based feature selection component. After that, these new alert sequences are sent to the Bayesian-based feature selection component, and this component applies Algorithm 1 on the alert stream. After applying Algorithm 1 on the receiving alert stream, new types of alerts in the discovered malicious episodes that are absent in correlation table and their correlation strength (correlation probability) with the other types of alerts are calculated and inserted to the correlation table (by adding new rows and setting the new values). Then, the correlation table of the multi-step attack scenario
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Figure 10. Examples of episode tree (ET). (a) A sample of an ET, (b) inserting critical episode hAi, (c) inserting critical episodes hAi and hA, Di, and (d) inserting critical episodes hAi, hA, Di, and hA, D, F i.

is updated using the malicious episode as a critical episode. Finally, the detected malicious episodes are added in the online AT and update it.

5. EVALUATION
The experimental results of the proposed framework are represented in this section. To this aim, three evaluation measures are examined, including aggregation statistics, the completeness of the detected attack scenarios, and the accuracy of prediction component. 5.1. Parameters setting The input parameters of the proposed framework are shown in Table V. We implemented the proposed framework in Java under Ubuntu 14.04 Linux distribution. 5.2. Datasets To evaluate our proposed framework, we use three standard and famous datasets, which are called DARPA 2000 [9],
Table V. Parameters setting for initializing the three-phase alert correlation framework. No. 1 2 3 4 5 Parameter name Batch time Window time t (in hyper-alert) Â i Parameter value 1h 5 min 1 min 0.6 10 s

University of New Brunswick ISCX IDS dataset [10,34], and GCP [11]. We described the efficiency of the proposed framework in detecting the existing attack scenarios of the mentioned datasets. The alerts are generated by the RealSecure and snort IDSs after analyzing the packet dumps of the three datasets. Also, note that the method used for learning and testing process in the online and offline modes of the proposed framework is K -fold crossvalidation [35]. 5.3. Experimental results on DARPA dataset After 15 years of the DARPA 2000 dataset generation, it has been used in many research works in the area of the alert correlation because it is the only choice to compare alert correlation methods [12­14]. The DARPA 2000 dataset consists of two sub datasets, namely, LLDDoS1.0 and LLDDoS2.0.2, in which each of them is related to a DDoS attack scenario as a multi-step attack strategy. In this paper, we use both of them to test our correlation method for extracting multi-step attack scenarios. During running algorithm on the mentioned datasets, we constructed the related correlation table for every attack scenario that is used for the ET generation in the offline mode. For this purpose, we used some general constraint terms for two consequent hyper-alerts with identical alert types. Table VI shows different constraint terms between every two alert types in a generated serial episode during episode generation phase. After doing episode generation process on every incoming episode window, we use these constraint terms (Table VI) to find critical episodes that can be a part of the multi-step attack scenario. Relevance constraints between two alert types can be one or more

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Table VI. Constraint terms of two sample hyper-alerts A and B. No. Constraint index 1 2 3 4 5 6 7 8 9 10 11 12 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 Constraint name SrcIP of A = SrcIP of B SrcPort of A = SrcPort of B DestIP of A = DestIP of B DestPort of A = DestPort of B CreateTime of B ­ CreateTime of A Ä i SrcSubnet of A = SrcSubnet of B DestSubnet of A = DestSubnet of B DestIP of A = SrcIP of B DestPort of A = SrcPort of B AlertType of A = AlertType of B AlertType of A ¤ AlertType of B Severity of A = Severity of B

(4) Running the DDoS software via telnet, rcp, or rsh. In this step, IDS generates Rsh and MStream_Zombie alerts. (5) Initializing a DDoS attack. At the end, a Stream_DoS alert is raised. The resulted correlation table of LLDDoS1.0 scenario is shown in Table VII. It should be noted that the full name of alerts in Table VII is represented in Figure 11. In addition, the generated ET of the first scenario is illustrated in Figure 11. This figure shows the possible attack paths that in each path, an attacker can compromise the host machine and penetrate into the system. The generated attack graph is also comparable with attack graphs of the first scenario that is reported in the previous research works such as [12,13,28]. After running the RealSecure IDS on the packet dump of the second attack scenario, LLDDoS2.0.2, 18 unique alert types is generated that are available at [37]. The main steps of this attack scenario with the corresponding generated alerts are as follows: (1) Mill Domain Name Server (DNS) server probing via the HINFO query. In this step, the RealSecure IDS generates no alerts. (2) Exploiting Samind service vulnerability to get access to the victim host. In this step, Sadmind_Amslverify_Overflow and Admind alerts are generated. (3) Upload mstream DDoS and attack script to Mill using FTP. In this step, FTP_Put alert is generated by the IDS. (4) Running the DDoS software on the Mill server alongside two more machines via Mill to try to break

constraints terms of Table VI. For example, for two identical hyper-alerts in an extracted episode such as A and B, the first row of the Table VI describes that the source IP of the hyper-alert A is equal to source IP of the hyper-alert B. Generally, when all relevance constraints of the two hyperalerts are established based on the correlation table, they can be correlated and form critical episodes. The other main component of the proposed alert correlation framework is the alert aggregation component. The DARPA dataset consists of a huge volume of raw network packets. After replying corresponding packet dump, the packets are replayed into the IDS tool, and output alerts are logged and stored. The final alert logs were generated using the inside-tcpdump of LLDDoS1.0 and LLDDoS2.0.2 attack scenarios. The generated alerts were given to the correlation algorithm for further analysis. As mentioned before, DARPA 2000 includes two DDoS attack scenarios, LLDDoS1.0 and LLDDoS2.0.2. After describing each step of them, we presented the generated correlation tables from each packet dump. In addition, we presented the resulted ET of the RealSecure alerts for each packet dump. The first attack scenario, LLDDoS1.0, consists of five main steps. After running IDS on this packet dump, 19 unique alert types were obtained that are available at [36]. After describing each step, the alerts generated by the RealSecure IDS for each step are presented. The main steps of the first attack scenario with associative generated alerts are as follows: (1) Finding live IP addresses of the network topology by using Internet Control Message Protocol (ICMP) ping sweeping. Because the RealSecure drops ICMP packets, no alert is generated in this step. (2) Detecting Sadmind service that runs on live IP addresses obtained in the first step. In this step, the RealSecure generates Sadmind_Ping alerts. (3) Exploiting Samind service vulnerability to get access to the victim host. In this step, Sadmind_Amslverify_Overflow and Admind alerts are generated.

Table VII. Correlation table of LLDDoS 1.0 attack scenario. No. Alert type pair hS ­ P, S ­ Pi hS ­ P, S ­ A ­ Oi hS ­ P, Admindi hS ­ P, Rshi hS ­ P, M ­ Z i hS ­ A ­ O, S ­ A ­ Oi hS ­ A ­ O, Admindi hS ­ A ­ O, Rshi hS ­ A ­ O, M ­ Z i hAdmind, Admindi hAdmind, S ­ Pi hAdmind, S ­ A ­ Oi hAdmind, Rshi hAdmind, M ­ Z i hRsh, Rshi hRsh, M ­ Z i hM ­ Z , M ­ Z i hM ­ Z , S ­ DoSi Correlation probability 0.96 1.0 1.0 1.0 1.0 0.86 1.0 0.86 1.0 0.81 0.13 0.87 0.75 1.0 0.81 1.0 0.79 1.0 Relevance constraints C1 , C7 , C1 0 C1 , C3 , C4 , C11 C1 , C2 , C3 , C4 , C11 C1, C3 , C11 C8 , C11 C1 , C4 , C7 , C10 C1 , C2 , C3 , C4 , C11 C1 , C3 , C11 C8 , C11 C1 , C4 , C7 , C10 C1 , C3 , C11 C1 , C3 , C4 , C11 C1 , C3 , C11 C8 , C11 C4 , C6 , C7 , C10 C8 , C11 C4 , C10 C5 , C11

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Figure 11. LLDOS1.0 attack scenario (inside part).

Table VIII. Correlation table of LLDDoS 2.0.2 attack scenario. No. Alert type pair hAdmind, Admindi hAdmind, S ­ A ­ Oi hAdmind, FTP ­ Puti hAdmind, M ­ Z i hS ­ A ­ O, S ­ A ­ Oi hS ­ A ­ O, Admindi hS ­ A ­ O, M ­ Z i hS ­ A ­ O, FTP ­ Puti hFTP ­ Put, FTP ­ Useri hFTP ­ Put, M ­ Z i hFTP ­ Put, T ­ XDi hFTP ­ User, FTP ­ Passi hFTP ­ Pass, FTP ­ Passi hFTP ­ Pass, FTP ­ Systi hFTP ­ Syst, M ­ Z i hT ­ XD, T ­ E ­ Ai hS ­ D, P ­ Si Correlation probability 0.84 0.84 0.64 0.8 0.82 0.86 0.81 1.0 0.76 0.79 0.74 0.87 0.79 0.79 0.61 1.0 1.0 Relevance constraints C1 , C4 , C7 , C10 C1 , C2 , C3 , C4 , C11 C1 , C3 , C11 C8 , C11 C1 , C4 , C7 , C10 C8 , C11 C8 , C11 C1 , C3 , C4 , C11 C1 , C2 , C3 , C4 , C11 C1 , C3 , C8 , C11 C1 , C2 , C3 , C11 C1 , C2 , C3 , C4 , C11 C1 , C3 , C4 , C10 C1 , C2 , C3 , C4 , C11 C8 , C11 C1 , C2 , C3 , C4 , C11 C5 , C8 , C11

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17

Table VIII is represented in Figure 12. Figure 12 shows the possible attack paths. In each path, an attacker can compromise the host machine and penetrate into the system. The generated attack graph is also comparable with the attack graphs of the first scenario that is reported in the previous research works such as [17,23,28]. 5.4. Experimental results on Information Security Center of Excellence dataset In order to show the efficiency of the proposed framework in detecting various multi-step attack scenarios, the framework is evaluated on a new standard dataset, which is developed by ISCX in the University of New Brunswick [10] in 2012. This dataset contains various multi-step attack scenarios that are targeted on the well-known protocols and services such as HTTP, SMTP, SSH, IMAP, POP3, and FTP. The raw packets of these attack scenarios are included in this dataset as anomalous portion of the dataset. ISCX dataset consists of the following four multi-stage attack scenarios: island-hopping attack scenario, HTTP denial of service, DDoS using an IRC Botnet, and brute force SSH. In this section, we use the first scenario of the ISCX dataset to evaluate our proposed framework. The reasons for choosing this scenario are as follows: (1) The size of this attack scenario's packet dump is too much (about

in them. In this step, Rsh and MStream_Zombie alerts are raised. (5) Launching the DDoS attack. Finally, Stream_DoS alert is generated by the RealSecure IDS. The resulted correlation table of LLDDoS2.0.2 scenario of the DARPA dataset is shown in Table VIII. Furthermore, the generated ET of the first scenario is illustrated in Figure 12. It should be noted that the full name of alerts in
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Figure 12. LLDOS2.0.2 attack scenario (inside part).

3.96 GB raw packets); (2) this is the most complex multistep attack scenario among the ISCX's attack scenarios with eight steps; (3) because it is needed to have all the event types of a multi-step attack scenario for its ET construction, after replying the packet dump of this attack scenario to the snort IDS, we were able to log all the event types of this scenario (an XML file that contains the recorded event types is available in [34]). For the other scenarios, we could not have all event types of them because of the problems in logging process, and (4) since being able to evaluate our proposed framework in detecting the complete attack scenario, we should compare our work with the previous works. Some existing works like reported only the results of this attack scenario [1,29,38]. This attack scenario is an example of island-hopping attack that called infiltrating the network from the inside. By using the island-hopping attack, the attacker penetrates in a sample network via a weak link and then walks around systems within that network. In this scenario, the malicious intruder exploits the Adobe Reader util.printf() buffer overflow vulnerability (CVE-2008-2992) to run an arbitrary shell code with the same privileges as the user running it. The steps of the island-hopping attack scenario is shown in Figure 13. After running the snort IDS on the packet dump of the first attack scenario, island-hopping attack scenario, 11 unique alert types are generated. The types of the alerts are available at [38]. The main steps of this attack scenario with the corresponding generated alerts are as follows:

(1) The attacker constructs a malicious PDF file using Metasploit tool and sets a Meterpreter reverse TCP shell on port 5555. In this step, Local_Exploit alerts are generated by the Host-based Intrusion Detection System (HIDS) and antivirus tools. (2) The attacker composes a system upgrade email including the mentioned PDF file and sends the email to all the users of the network through admin[...] command. In this step, Reverse_Connection alert is generated. (3) The attacker scans potential machines on two consecutive subnets 192.168.1.0/24 and 192.168.2.0/24. In this step, scanning alert is generated. (4) The attacker identifies an active Windows XP SP1, which has an Server Message Block (SMB) authentication protocol vulnerability on port 445. The recognized vulnerability ID is CVE-2008-4037. Then, the attacker exploits this vulnerability to compromise a user. In this step, Windows_File_Sharing and Local_Exploit alerts are generated. (5) The captured user from the previous step scans the server subnet (192.168.5.0/24). In this step, scanning alert is generated. (6) The attacker identifies an active Windows Server 2003 that runs in an internal Web application using MSSQL server. This leads the attacker to perform an SQL injection attack. In this step, HTTP_Web alert is generated. (7) At the end of attack scenario, the attacker injects into the target system using an SQL injection technique.
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Figure 13. The steps of island-hopping attack scenario [38].

In this step, SQL_Injection and Bad_Request alerts are generated. The resulted correlation table of ISCX dataset is shown in Table IX. In addition, the generated ET of the first scenario of this dataset is illustrated in Figure 14. It should be noted that the full name of the alerts in Table IX is repre-

sented in Figure 14. Figure 14 shows the island-hopping attack graph. The generated attack graph is also comparable with the attack graphs of the first scenario that was reported in the previous research works such as [1,29,38]. 5.5. Experimental results on GCP2.0 dataset To evaluate the ability of the new attack strategy mining component of the proposed framework, we used another standard dataset that is published by the DARPA institute and is called GCP, available at [11]. This database also contains two different multi-step attack scenarios. In this paper, to test the new attack pattern detection, we used the second GCP scenario, which is configured with the RealSecure IDS and contains 22 500 raw alerts. In the GCP2.0 dataset, there are eight unique alert types that are represented in [18]. To this purpose, we injected the raw alerts of this attack scenario to the end of the LLDDoS1.0 attack scenario, and then we ran the algorithm on the merged dataset. Three main steps of this attack scenario with the alerts of each step are as follows: (1) Launching a buffer overflow attack to the IIS server in order to gain the application server to install a malicious shell script. In this step,

Table IX. Correlation table of island-hopping attack scenario of Information Security Center of Excellence dataset. No. Alert type pair hL ­ E, L ­ Ei hL ­ E, R ­ Ci hR ­ C, Scanningi hScanning, Scanningi hScanning, W ­ F ­ Si hW ­ F ­ S, W ­ F ­ Si hW ­ F ­ S, L ­ Ei hL ­ E, Scanningi hScanning, H ­ W i hH ­ W , SQL ­ I i hSQL ­ I , SQL ­ I i hSQL ­ I , B ­ Ri Correlation probability 1.0 0.92 0.74 0.79 0.8 0.65 0.76 0.85 0.9 1.0 0.82 1.0 Relevance constraints C1 , C4 , C7 , C10 C1 , C2 , C3 , C4 , C11 C1 , C3 , C7 , C11 C8 , C10 C1 , C4 , C7 , C11 C1 , C4 , C7 , C10 C8 , C11 C6 , C7 , C11 C1 , C3 , C4 , C11 C1 , C2 , C3 , C4 , C11 C1 , C3 , C8 , C11 C1 , C2 , C3 , C11

1 2 3 4 5 6 7 8 9 10 11 12

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Figure 14. The island-hopping attack graph.

IIS_Buffer_Overflow and IIS_Unicode_Attack were generated by the IDS. (2) Remote access to the registry file and manipulating its contents. In this step, Plan_Registry_Modified alert is raised. (3) Disabling the existing IIS server. In this step, the RealSecure generates Plan_Service_Status_Down and Plan_Server_Status_Down alerts. The resulted correlation table of GCP2.0 dataset is shown in Table X. In addition, the generated ET of the
Table X. Correlation table of GCP 2.0 attack scenario. No. Alert type pair hIIS ­ B ­ O, IIS ­ B ­ Oi hIIS ­ B ­ O, P ­ R ­ Mi hIIS ­ U ­ A, P ­ R ­ Mi hP ­ R ­ M , P ­ R ­ Mi hP ­ R ­ M , P ­ Service ­ S ­ Di hP ­ R ­ M , P ­ Server ­ S ­ Di hP ­ Service ­ S ­ D, P ­ Server ­ S ­ Di Correlation probability 0.69 0.72 0.66 0.82 0.87 0.92 0.89 Relevance constraints C1 , C3 , C4 , C10 C8 , C11 C8 , C11 C1 , C2 , C3 , C4 , C10 C4 , C5 , C8 , C9 , C11 C4 , C5 , C8 , C9 , C11 C1 , C3 , C4 , C5 , C8 , C11

first scenario is illustrated in Figure 15. It should be noted that the full name of the alerts in Table X is represented in Figure 15. Figure 15 shows the possible attack paths that in each path, an attacker can compromise the host machine and penetrate into the system. The generated attack graph is also comparable with the attack graphs of the first scenario that was reported in the previous research works such as [14,18]. 5.6. Performance criteria As mentioned before, one of the main components of the proposed framework is the aggregation component (Section 4.1.2). The statistics of the aggregation component are presented in Table XI. As shown in Table XI, the raw alert reduction percentage for LLDDoS1.0, LLDDoS2.0.2, GCP2.0, and ISCX is 25.77%, 32.61%, 99.92%, and 45.55%, respectively. Finally, to evaluate the accuracy of the prediction rule extraction, we used 30% of the test datasets for
Table XI. The aggregation component statistics. No. Dataset No. of raw alerts 1813 924 22 500 3348 No. of hyper-alerts 1364 632 1800 1823

1 2 3 4 5 6 7

1 2 3 4

LLDDoS1.0 LLDDoS2.0.2 GCP2.0 ISCX

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

Figure 15. GCP2.0 attack scenario.

initialization of the AT. With the remaining test dataset, the AT construction component gradually completes the AT. During constructing the AT, if the visited node be the same as the corresponding ET, then a new prediction rule that describes the next possible attack goal is determined by the prediction component. Table XII represents the accuracy of the prediction for the different attack steps based on Equation (3). According to Table XII, when the length of the attack scenario increases (the attack nears the final steps), the accuracy of these predictions increases significantly. Prediction Accuracy = No. of Correct prediction rules No. of Total prediction rules (3)

As mentioned before, based on an existing review paper in the alert correlation scope, Salah et al. [2] categorized correlation methods into three major groups: similarity-

based, sequential-based, and case-based methods. Each category is also divided into some sub-categories. In the view point of this review paper, our work falls into sequential-based methods. More specially, our proposed framework performs based on the Bayesian network concept that is one of the powerful approaches for correlation application [2]. On the other hand, the most previous research works correlate the alerts in offline settings; however, nowadays, with regard to the nature of alert streaming, most of them are not suitable for correlation applications. Furthermore, because of the rapid changes in the attacker's behaviors, it is very important to design and develop a dynamic correlation method to detect a new attack strategy mining, what the proposed framework does in an effective manner. One of the best challenges of the security administrator is to use the IDS analysis to have a foresight view of the attacker's behaviors to be able to show a good reaction against the probable

Table XII. The accuracy of the prediction component based on each step of multi-step attacks. Step 1 2 3 4 5 6 7 8 LLDDoS 1.0 92.3% 94.4% 95.7% 98.5% 99.2% ­ ­ ­ LLDDoS 2.0.2 86.9% 89.3% 90.1% 90.8% 92.6% ­ ­ ­ GCP 2.0 95.3% 97.8% 98.4% ­ ­ ­ ­ ­ Information Security Center of Excellence 78.6% 83.3% 85.2% 88.9% 88.6% 92.4% 96.3% 98.2%

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

Table XIII. Comparison of the proposed framework with the related works. Ref. Correlation method Attribute-based Attribute-based Predefined scenario Predefined scenario Temporal-based Temporal-based Bayesian networks Pre-post conditions Bayesian networks Bayesian networks Markov models Markov models Graphs Graphs Neural networks Neural networks Expert rules Fuzzy rules Bayesian networks Alert clustering X X New attack mining X Real-time analysis Prediction capability Scalability capability X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X

[1] [12] [21] [22] [13] [14] [15] [16] [17] [18] [23] [24] [25] [26] [27] [28] [38] [29] PF *
PF * :

X X X

X X X X

X

X

X

the proposed framework.

risks. Our proposed framework contains a prediction component that estimates the next step of the multi-step attacks with their probability value. This is very helpful for the intrusion response system to have proactive solution against anomalies. Finally, we aimed to offer a system with a good performance and scalable against the increasing number of sensors in the network under surveillance. According to the mentioned capability criteria in [2,39], the results of the evaluation of the present work against the other major related research papers are drawn in Table XIII.

6. CONCLUSION
In this paper, an efficient alert correlation framework is proposed in the real-time settings, which works based on the causal knowledge discovery to find the relationships between the generated low-level alerts. The proposed correlation framework is suitable for detecting known and unknown multi-step attack scenarios. It works in two modes: offline and online. At first, in the offline mode, after the low-level alert normalization, it aggregates the alerts based on the similarity of their features and generates the hyper-alerts. Next, an ET is constructed using the concept of the Bayesian network, which learns critical episodes that can be a part of a multi-step attack. In addition, during the learning phase, the ET stores the frequency of each critical episode in the generated ET. Besides, in the online mode, in order to predict the next steps of the attacks, the changes in the attacker's behavior are saved in the AT. Also, the proposed framework provides a prediction facility that is able to predict the attacker's next goal in

an under-running multi-step attack scenario. This facility generates some prediction rules for security administrator by observing the attacker's early behaviors in an efficient manner. In addition, using the new attack strategy mining component, current situation of the network is learned and stored in the AT. Experimental results approved the completeness of the proposed framework for alert correlation and its efficiency in real-time applications. In this study, we propose an alert correlation framework that is able to detect attack scenario by processing data at rest (batch data). However, the proposed framework cannot mine frequent items of an attack scenario in any window of recent streaming data, whose given length is constant. Therefore, our work can be extended in a number of ways. One of them is selecting a variable length windowing approach. This will improve the performance of the framework because of detecting those attack scenarios that cannot be discovered by using a constant value for time window batching. Also, regarding to recent advances in big data science and the amount of generated heterogeneous security events by the monitored sensors, the applied process of AT construction is not suitable because of high consumption of resources. Hence, for the sake of performance in real-time application, we plan to use datain-motion (streaming data) frameworks like Storm, Spark, and Flink in order to handle the raw-generated alerts to mine the possible attack pattern recognition.

REFERENCES
1. Saad S, Traore I. Semantic aware attack scenarios reconstruction. Journal of Information Security and Applications 2013; 18 (1): 53­67.
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

A. Ahmadian Ramaki and A. Rasoolzadegan

Causal knowledge analysis for detecting and modeling multi-step attacks

2. Salah S, Maci-Fernndez G, Daz-Verdejo JE. A modelbased survey of alert correlation techniques. Computer Networks 2013; 57 (5): 1289­1317. 3. Valeur F, Vigna G, Kruegel C, Kemmerer RA. Comprehensive approach to intrusion detection alert correlation. IEEE Transactions on Dependable and Secure Computing 2004; 1 (3): 146­169. 4. Ramaki AA, Atani RE. A survey of IT early warning systems: architectures, challenges, and solutions. Security and Communication Networks 2016; 9 (17): 475­4776. 5. Njogu HW, Jiawei L, Kiere JN. Network specific vulnerability based alert reduction approach. Security and Communication Networks 2013; 6 (1): 15­27. 6. Elshoush TI. An Innovative Framework for Collaborative Intrusion Alert Correlation. Science and Information Conference (SAI), IEEE, London, United Kingdom, 2014; 607­614. 7. Yusof R, Selamat SR, Sahib S, Masud MZ, Abdollah MF. Enhanced alert correlation framework for heterogeneous log. In Informatics Engineering and Information Science. Springer: Berlin Heidelberg, 2011; 107­122. 8. Ramaki AA, Khosravi-Farmad M, Bafghi AG. Real Time Alert Correlation and Prediction using Bayesian Networks. 2015 12th International Iranian Society of Cryptology Conference on Information Security and Cryptology (ISCISC15), IEEE, Rasht, Iran, 2015; 98­103. 9. Zissman M. DARPA intrusion detection scenario specific data sets, 2000. Available at http://www.ll.mit. edu. 10. Information Security Centre of Excellence (ISCX). UNB ISCX intrusion detection evaluation dataset, 2012. Available at http://www.unb.ca/research/iscx/ dataset/iscx-IDS-dataset.html. 11. DARPA Cyber Panel Program. DARPA cyber panel program grand challenge problem (GCP), 2003. Available at http://ia.dc.teknowledge.com/CyP/GCP. 12. GhasemiGol M, Ghaemi-Bafghi A. E-correlator: an entropy-based alert correlation system. Security and Communication Networks 2015; 8 (5): 822­836. 13. Soleimani M, Ghorbani AA. Multi-layer episode filtering for the multi-step attack detection. Computer Communication 2012; 35 (11): 1368­1379. 14. Ramaki AA, Amini M, Atani RE. RTECA: real time episode correlation algorithm for multi-step attack scenarios detection. Computers & Security 2015; 49 (1): 206­219. 15. Ren H, Stakhanova N, Ghorbani AA. An online adaptive approach to alert correlation. In Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2010; 153­172.
Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd. DOI: 10.1002/sec

16. Zali Z, Hashemi MR, Saidi H. Real-time intrusion detection alert correlation and attack scenario extraction based on the prerequisite-consequence approach. The ISC International Journal of Information Security 2013; 4 (2): 125­136. 17. Kavousi F, Akbari B. A Bayesian network-based approach for learning attack strategies from intrusion alerts. Security and Communication Networks 2014; 7 (5): 833­853. 18. Qin X, Lee W. A Probabilistic-based Framework for Infosec Alert Correlation, Doctoral Dissertation. Georgia Institute of Technology Atlanta: GA, USA, 2205. 19. Khor KC, Ting CY, Amnuaisuk SP. A Probabilistic Approach for Network Intrusion Detection. Second Asia International Conference on Modeling & Simulation (AICMS 08), IEEE, Kuala Lumpur, Malaysia, 2008; 463­468. 20. Cheng BC, Liao GT, Huang CC, Yu MT. A novel probabilistic matching algorithm for multi-stage attack forecasts. IEEE Journal on Selected Areas in Communications 2011; 29 (7): 1438­1448. 21. Cuppens F, Ortalo R. Lambda: a language to model a database for detection of attacks. In Recent Advances in Intrusion Detection. Springer: Berlin Heidelberg, 2000; 197­216. 22. Cheung S, Lindqvist U, Fong MW. Modeling Multistep Cyber Attacks for Scenario Recognition. DARPA information survivability conference and exposition, IEEE, Washington, DC, USA, 2003; 284­293. 23. Farhadi H, Amirhaeri M, Khansari M. Alert correlation and prediction using data mining and HMM. ISeCure, The ISC International Journal of Information Security 2011; 3 (2): 77­102. 24. Fredj OB. A realistic graph-based alert correlation system. Security and Communication Networks 2015; 8 (15): 2477­2493. 25. Roschke S, Cheng F, Meinel C. A new alert correlation algorithm based on attack graph. Proceedings of the 4th International Conference on Computational Intelligence in Security for Information Systems (CISIS11), 2011; 58­67. 26. Wang L, Liu A, Jajodia S. Using attack graphs for correlating, hypothesizing, and predicting intrusion alerts. Journal of Computer Communications 2006; 29 (1): 2917­2933. 27. Manganiello F, Marchetti M, Colajanni M. Multistep attack detection and alert correlation in intrusion detection systems. Information Security and Assurance 2011; 200 (1): 101­110. 28. Zhu B, Ghorbani AA. Alert correlation for extracting attack strategies. International Journal of Network Security 2006; 3 (1): 244­258.

Causal knowledge analysis for detecting and modeling multi-step attacks

A. Ahmadian Ramaki and A. Rasoolzadegan

29. Faraji Daneshgar F, Abbaspour M. Extracting fuzzy attack patterns using an online fuzzy adaptive alert correlation framework. Security and Communication Networks 2016, https://doi.org/10.1002/sec.1483. 30. Neapolitan RE. Probabilistic Reasoning in Expert Systems: Theory and Algorithms. CreateSpace Independent Publishing Platform, 2012. 31. Debar H, Curry DA, Feinstein BS. The intrusion detection message exchange format (IDMEF), 2007. 32. Martin R. Snort: lightweight intrusion detection for networks. LISA 1999; 99 (1): 229­238, Available at https://www.snort.org/. 33. Thomas H, Cormen L, Leiserson CE, Rivest RL. Introduction to Algorithms (Vol. 6). MIT press: Cambridge, 2001. 34. Shiravi A, Shiravi H, Tavallaee M, Ghorbani AA. Toward developing a systematic approach to generate benchmark datasets for intrusion detection. Computers & Security 2012; 31 (3): 357­374.

35. Refaeilzadeh P, Tang L, Liu H. Cross-validation. In Encyclopedia of Database Systems. Springer, 2009. 36. Cyber Defense Laboratory. TIAA: a toolkit for intrusion alert analysis, 2002. Available at http:// discovery.csc.ncsu.edu/software/correlator/ver0.4/ inside1_events.txt. 37. Cyber Defense Laboratory. TIAA: a toolkit for intrusion alert analysis, 2002. Available at http:// discovery.csc.ncsu.edu/software/correlator/ver0.4/ inside2_events.txt. 38. Sadighian AR, Fernandez J, Lemay A, Zargar ST. ONTIDS: A Highly Flexible Context-aware and Ontology-based Alert Correlation Framework. 6th International Symposium on Foundations and Practice of Security (FPS'13), Springer International Publishing, La Rochelle, France, 2014; 161­177. 39. Sirag M, Hashim S. Network intrusion alert correlation challenges and techniques. Jurnal Teknologi Maklumat 2008; 20 (2): 12­36.

Security Comm. Networks (2017) Š 2017 John Wiley & Sons, Ltd.
DOI: 10.1002/sec

