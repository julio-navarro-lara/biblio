INformation Fusion Engine for Real-time Decision-making (INFERD): A Perceptual System for Cyber Attack Tracking
Adam Stotz Center for Multisource Information Fusion CUBRC Buffalo, U.S.A. stotz@cubrc.org
INformation Fusion Engine for Real-time DecisionMaking (INFERD) is a perceptual information fusion engine designed and developed for the purpose of cyber attack tracking and network situational awareness. While the original application was cyber orientated, the engine itself is designed to generalize and has been ported to other application environments such as maritime domain awareness and medical syndromic surveillance. Comparisons and contrasts are drawn to the traditional Kalman ground target tracking science, motivating high level architectural modules and presenting the cyber environment complexities and assumptions. Performance results are presented showing success in both detection accuracy and temporal expedience, an important design goal. Keywords: situation awareness, tracking, INFERD, cyber, information fusion, L1, L2, heuristic, intrusion detection, alert correlation

Moises Sudit Center for Multisource Information Fusion CUBRC Buffalo, U.S.A. sudit@cubrc.org
we present INFERD's concept of operations (CONOPS), discussing a notional network security organizational structure and detail the role targeted by our research effort.

2

Cyber Security Background

The cyber security problem space is vastly large in terms of decision space, sensor technologies, and general problem complexities. Both corporate and agency network security policies vary, requiring any cyber fusion system to be flexible in accommodating different sensor types and installations. This section will serve the purposes of presenting background information about the cyber security problem space and where INFERD fits within the more macroscopic problem of network security. 2.1 Concept of Operations

1

Introduction

As technology continues to advance, services and capabilities become computerized, and an increasing amount of business is conducted electronically, there is a growing need for real-time decision-making systems with many capabilities in various decision spaces. With computer networks rapidly growing in size and sensors producing increasing amounts of data, manual inspection of the data quickly becomes infeasible. The Information Fusion (IF) battle cry of "Analysts are drowning in data but starving for information" is readily apparent when talking to these analysts and researching the cyber security problem domain. INFERD was created in the context of cyber security to provide a network security analyst with an increased situational understanding to facilitate their decision making process. Network security analysis when used generically can mean many different things 足 there are many different roles a network security analyst can serve. Since the decision space for these different roles require a very different type of situational awareness, systems claiming to perform decision support must concentrate on and nominate a specific analyst role. The system presented in this paper focuses on a role very similar to a dispatcher in common law enforcement. In Section 2.1

The Air Force has conceived the notion of a six stage target cycle referred to as the Kill Chain or AF2T2EA4 [1]. Being able to place munitions on target in less than ten minutes has been one of former Chief of Staff General John Jumper's top priorities. Compressing the execution time of these six stages (Anticipate, Find, Fix, Track, Target, and Execute) and/or the seams between them can help to accomplish this goal and eliminate sanctuary for "run and scoot" highly mobile weapon groups. Given that the Air Force has included in its new mission statement the dominance of cyberspace, it is natural to transition the kill chain target process cycle also to cyberspace into a notional Cyber Kill Chain. The time limited visibility of highly mobile weapon systems exhibit very similar characteristics to red team cyber attackers. That is, they remain hidden for the majority of time, until the deployment of their attack in which the impact of that specific attack is most likely inevitable. An example of such a unit was the mobile SCUD launcher in Desert Storm. For the foreseeable future, humans will always be in the loop of any decision process. Augmenting the kill chain process with C4ISR1 technology such as decision support systems like INFERD can reduce the execution

1

Command, Control, Communications, Computers, Intelligence, Surveillance and Reconnaissance

Figure 1 - Dispatcher Role within Cyber Kill Chain time of the overall process and help minimize the negative impacts of attack sequences. Given the broad scope of the decision space involved with performance of the entire cyber kill chain, system capabilities and performance must target a subset of specific analyst roles within the overall scheme. To keep within the scope of this paper, we will describe only the Find and Fix stage of the cyber kill chain to couch our target system user. These two stages within the target cycle can be extrapolated to the cyber environment. Detailed information gathering, such as that within the Fix stage, requires both of these limited resources. It makes sense then, to maximize the usage of these resources, to prioritize the targets which are sent from the Find stage to the Fix stage. This function, cast within the Find stage, is the function INFERD was designed to augment. Figure 1 depicts this analyst workflow, and where INFERD can currently play a role within the Find decision space. The role of broad area, low detail surveillance and the reporting of an initial prioritized target list is the role of our notional cyber dispatcher. The receivers of these reports (other analysts) perform the Fix stage of the target cycle, expending the time and effort to collect detailed information regarding the specific machines and events detected within the report. 2.2 Related Work

rules for event detections and causal relationships between the events. Their approach is dependent on detailed machine configuration information which must be coded into their rules a priori. While detailed network information can lead to a more refined analysis and is necessary for the Fix stage of processing, it is not necessarily a requirement for the Find stage and is difficult to obtain and keep up to date in operational settings. Cuppens and Miege [3] automatically create detailed alert correlation rules from LAMBDA attack scripts to create aggregate alerts composing information from multiple sensor alerts. While this allows detailed attack patterns to be modeled, cyber attacks are consistently changing in method. This approach limits detection to only those attacks in which a LAMBDA script has been written, making the system cumbersome to keep updated with new sensors or attacks. In [4], Valdes and Skinner approach the problem with a probabilistic method inspired from multisensory data fusion. Their approach correlates alerts based on feature similarity expectations. Alerts are classified into attack classes by Bayesian means, and attack class similarity is taken from a type of conditional probability table. This work is interesting, however many will argue on the dependency of the system on conditional probability tables. These tables are often difficult to generate accurately and justify. To achieve the aforementioned CONOPS, our team has formulated a number of system requirements throughout the testing and evaluation of the system which must be met: 1. Minimize A Priori Knowledge 足 Cyber networks are highly dynamic. INFERD's cyber models are designed to require only a small list of ip addresses representing computers which have active listening services to internet users. The models can also be automatically updated through a few mouse clicks to new Snort rule sets which get loaded into the sensors on the network. Limit the Analyst Search Space (Flexibly) 足 Analysts have heterogeneous roles necessitating configurable ranking rules. INFERD can load any number of customized measurements which automatically provide quantitative ranking values to be used by a visualization system. Real-time Processing Rates 足 To prevent subsequent attack stages, analysts must react to cyber attacks in a real-time streaming manner. The term "real time" is open to interpretation, but for purposes of this paper we will use the following definition: a process which helps the human actor to perform a task fast enough to avoid the malicious event from attaining its main objective. In our testing we have encountered alert rates ranging from 15,000 up to 4.4 million per day. INFERD's current configuration on standard modern desktop hardware exceeds this upper bound and can reach a rate of 4.9 million per day.

2.

3.

There has been much work in the way of cyber alert correlation. Alert correlation serves to create clusters of raw sensor reports, reducing the amount of data an analyst must look at. INFERD's output, attack tracks, are much like clusters of alerts however they include metainformation as well, allowing INFERD to rank the clusters based on additional information. There are many methods that have been applied to performing alert correlation. In [2], Xu and Ning create

3
3.1

INFERD
System Architecture

Figure 2 - INFERD Architecture INFERD was created as a stream based system to update track estimates in real time as sensor messages are produced. We consider INFERD to be L1+, in terms of the JDL data fusion model, due to the measurements which can be applied to the tracks and reports which can be generated across multiple tracks. It is important to note that the tracks being mentioned are not designed to be kinematic based such as those in traditional target tracking; rather they are semantically or contextually based, incorporating a much different type of sensor information. The architecture has been designed in a way such that the system features can be applied to problems in many different domains. The inputs to INFERD are twofold: (1) a priori models and (2) runtime sensor information. The output of INFERD is a series of tracks which represent aggregated and tagged information. Figure 2 depicts INFERD's architecture. Within the main box are the processes internal to INFERD which produces the track set from the a priori models and runtime sensor inputs. The numbered sub modules will be discussed in this paper as they relate to track generation processes found in typical target tracking applications, while the ambiguity detection and track archival sub modules will be ignored due to scope. The other processes manipulate the track set which is produced, but are not involved in the origination of the tracks. INFERD currently supports two types of interfacing also shown in the diagram. The first is the publishing of sensor messages and output messages though the Java Messaging Service, which is a service orientated architecture type of messaging system. 3.2 Data Alignment

subsequent fusion processes. For target tracking this is usually a two-way alignment in terms of physical time and space. Within INFERD this must be extended to multiple dimension alignment according to the models being used and the contextual sensors (databases) being supported. Not only are the messages in different formats, the locations of the sensors can be scattered throughout the network. The Data Alignment functional module within INFERD provides remote access mechanisms to distributed cyber sensor databases. The results of Data alignment (the Caching Layer and INFERD Access Layer) provide a common querying interface into the data within the core (raw) payload. For example, the payload of a homogenized IDS alert is an XML file containing information such as target and source ip addresses. When defining model elements which need to reference these values in the data, the INFERD Access Layer is responsible for providing the mapping between references in the model with data values in the message. The Caching Layer is present to only optimize multiple requests by the fusion process for the same piece of raw data. The wrappers written for cyber sensor alerts receive cyber model requests such as "Alert.TargetIP" and return the appropriate value such as "192.168.1.1". The syntax of requests in the model and the expected values returned must be mutually understood between the sensor message wrappers and model definition. It is not a requirement within INFERD for the payload of a sensor message to be XML or the query string to be of the form "X.Y.Z", so long as the sensor message wrapper and model reference syntax have a mutually agreed upon understanding of what that syntax will be. The relationship between sensor message values and model references to those values will become clearer in our discussion of Connotation Elicitation and Data Association. 3.3 Connotation Elicitation

Each problem environment most likely involves very different types of sensors, producing very different types of measurements or messages necessitating the Data Alignment process to provide common referencing for the

This is a unique and important additional stage of processing within INFERD that is not common to traditional target tracking, and which creates value-added for INFERD as a Situational Understanding tool. What necessitates this stage for the tracking of abstract events or entities is the contextual dependency on a sensor message's meaning. Take for example a sensor message which contained the event keyword "trigger." In the context of a gun this would imply something entirely different than in the context of a bomb. In target tracking, an object is simply a physical target and the tracking is constrained to kinematic features of the terrain, and object. These restrictions can be seen as constraints within a type of inherent model to the tracking algorithm. When attempting to track abstract events and entities such as cyber attacks, this inherent model must be made explicit to make the same algorithm portable to applications other than the one it was designed under.

Figure 3 - Subset of Sample Cyber Model INFERD models play a role in Connotation Elicitation, Data Association, and Track Update. To understand these interactions between data and model, we will be concise in our description of the relevant model components to their respective functions. INFERD models are complex structures defined in XML and not deriving from any single commonly accepted science such as graph theory, or Bayesian networks. Figure 3 is a graphical representation showing the conceptual contents of a subset of an example cyber model. The input to this stage of processing is the Sensor Message, and the output is what we define as an Elicited Message. The Elicited Message is basically the Sensor Message plus a Model Connotation Layer. For example, in the cyber domain, if a Snort message is received containing the data: source ip A, target ip 192.168.1.1, and attack signature ICMP Ping NMAP, the Model Connotation Layer would contain the information that this was a Recon Scan attempt by an internet address on a DMZ computer. The role of the model in defining the contents of the Model Connotation layer is as follows. Mathematically speaking, an INFERD model can be defined at the highest level as: Where is the model composed of a set of key concepts, , and a set of directed relationships between those concepts, . In Figure 3, the key concepts are depicted as labeled circles, and the relationships as , is composed of a set directed arcs. Each concept, which represent the possible contributing of features, observables to the hypothesis that concept is present or is/has occurred in the sensed environment. Key Concepts in the models represent the entities or events which will be tracked. In the cyber case, they represent singleton attack steps in a sequence of a multistage attack. Sensors do not detect these conceptual stages per se, but rather report

specific attack signatures which, during elicitation, assert features contained by that concept and add the information to the Model Connotation Layer. During Track Update, a subsequent stage of processing, this information conceptually constitutes possible contributing evidence to the hypothesis that the concept has occurred or is present. In Figure 3, the dotted line represents an exploded view of the contents of the Recon Scan DMZ key concept. We can see that it is composed of a number of constraints. is asserted with confidence A single feature, on the condition that the set of defined classification , are entirely satisfied by the set constraints on , of data elements in the sensor message, . Constraints in the INFERD model are plug-ins to the engine consisting of a label and a set of arguments. These arguments can be variables referring to values in the sensor message, or static values. Some examples of constraints that could be defined on a feature are shown in Figure 3. Consider the previous example. In this case there was a concept defined to be Recon Scan DMZ. This concept had one feature which was asserted, namely Feature 1. The satisfaction of all three of this feature 's constraints led to its assertion and the addition of both this feature and its parent concept into the Model Connotation layer of the Elicited Message. Since the Alert.Signature constraint on Feature 2 was not satisfied, this feature was not asserted and no more information was added to the connotation layer. All constraints defined in the model, whether they are classification or association constraints are of the form: <label>{<arg1>,<arg2>,...} Valid labels reference constraints which are loaded in INFERD via its configuration file. Default constraints such as STREQ, which performs a string equality check, are supported by default, but through our development and testing cycle, the team saw a need for customized constraints which perform other types of operations. IPIN depicted in Figure 3 is one such example. The same functionality can be performed by a series of STREQ constraints within an OR clause, but there are both performance advantages and definitional advantages of implementing this custom constraint. For example, an IPRANGE constraint was implemented which checked whether an IP address was within some defined subnet range. Specifying two endpoints of a range is much more efficient than specifying all of the discrete addresses within that range. This constraint plug-in capability supported by INFERD and the minor code development needed to generate custom constraints makes the models both flexible and efficient in dealing with sensor messages in different domains. 3.4 Data Association

Data Association is a function which has history with multiple target tracking [5,6]. There is an association problem present if two tracks exist in a close vicinity to each other. To which track does that measurement

belong? This is the problem that Data Association attempts to solve. INFERD tracking shares a similar concept of data association. When a new sensor message is received, to which track does that message correspond? Furthermore, how does it associate within the track? In the case of cyber defense, when a new attack was found crossing the network sensors, which attacker is actually performing that attack? In traditional multiple target tracking (MTT), a new measurement received is fused as a position update. This requires association to a track at the track level. This idea is extended within INFERD to accommodate multiple types of association within a single track: (1) new concept and new feature, (2) new feature, existing concept, (3) existing feature, existing concept. This adds complexity to the association process, but provides for a refined association result which was necessitated by the idea of tracking abstract concepts. The input to the Data Association process is an Elicited Message, and the output is the nominated set of tracks for fusion2 (this includes the inner track association results for those tracks in the nominated set). The Model Connotation layer is used along with the set of relationships defined in the model , and the association constraints within the track contents to make this determination. Each relationship defined in the model, , is a directed arc between two concepts of interest . Each of these defined in the model, relationships defines and contains a set of association in the same fashion as mentioned constraints, before for features. An example of the association constraints defined on relationships is shown in Figure 4 as the small purple rectangles. This constraint is existent on all the relationships shown in the model and whose content is shown in the black outlined box. When determining the feasibility for an association between an Elicited Message ( ) and a track ( ), there is a multiple step inner track association process which is performed. The idea behind the inner track association process is to determine how the Elicited Message is relevant to the track. The inter-track association process (irta) is very simple; it merely calls the intra-track association process (iata) for the existent tracks in the current state space, . If the message is associated to any element within the track, then that track is appended to the associated list and at completion, the associated list of tracks ( ) is output.

Message ( ) and a track ( ) one of four types of elements can be returned: 1. A feature 足 In this case the message was associated to an existing feature in an existing instantiated concept. A concept node 足 In this case the message was associated as a new feature to an existing instantiated concept. A concept arc 足 In this case the message was associated as a new concept related to an existing instantiated concept. The empty set 足 The message was not associated to any element within the track.

2.

3.

4.

There may be multiple points within a track in which an Elicited Message may be feasibly associated. Because variable, and an Elicited Message can feasibility is a only be associated to a single location within a track, the order in which track elements are checked for feasible association is important. For example, we do not want to associate the Elicited Message as a new concept if it is actually redundant information for an already existent concept. The actual order of the intra-track association is as given above: (1) Existing features, (2) Existing Concept Nodes, (3) Concept Arcs. The ramifications of how an Elicited Message is associated within a track will become clear in the next section. While the purpose of the Data Association function is representative of that of target tracking, there are aspects of the process which differ. For instance, in basis INFERD, multiple tracks are nominated on a and not ranked. This conceptually provides tracks which are feasible for the message to be a part of, which differs slightly from that of target tracking. In target tracking, multiple tracks are ranked based on a closeness value . The most likely track is then chosen for which is in fusion. In INFERD if there are multiple feasible tracks, a new special type of track is created, called a Hyper Track3. Figure 4 provides a view of a sample association. A trivial subset of a model depicted showing a relationship between an intrusion and a scan from that machine to the internal network. We assume that a Sensor Message was received resulting in the Model Connotation layer encompassing the concept of interest `Recon Scan Internal' supported by the raw data shown. The track shown is composed of 2 estimated concepts of interest, namely `......' and `Intrusion Root DMZ'. The name of the first node is commented out to focus attention on the details which are important for the association shown. Also note that the estimated concepts of interest have raw
3

When the intra-track association process determines the feasibility for an association between an Elicited

2

An interesting point here to mention is the possibility for multi hypothesis estimation. While not implemented currently, this is on the minds of the research team.

Hyper Tracks represent fragments of a track with multiple possible predecessors which could not be deterministically assigned with the data at face value. Further statistical processing is performed to make a possible probabilistic assignment. A discussion of this process is out of scope of this paper.

Figure 5 - Track Update Example case of a concept node being reported, and a concept instantiation in the case of a concept arc being reported. A feature, as defined in the model, is a group of constraints. In the cyber case, these constraints measure the values of the source and target ip addresses and attack signature to determine the class and endpoints of the possibly malicious event which was detected. Features, as they exist within a track, are the instantiated versions of those found in the model. The process of instantiation populates the variables found in the association constraints with the values found in the Elicited Message which produced the instantiation. The variable and value combination between model and track allow the tracks in INFERD to evolve dynamically as new sensor messages are ingested by the system. Another important distinction between the features and concepts as they exist between the model and track is the addition of a likelihood value to the instantiated version of the model element. When a model element is instantiated, the instantiation is not necessarily a value. Sensor messages contain error and this error should be propagated within the track. Likelihood values exist for all instantiated features and concepts within the tracks. How these values are calculated is dependent upon the model definition and the update which is being performed. In Figure 5 the content of a newly instantiated track is shown to indicate how the association constraints affect the contents of the track given the model definition and contents of the Elicited Message. In this graphic, notice how the contents of the association constraints change from variable-valued in the model to data-valued in the track. Subsequent associations to this track will now be based on these instantiated values. This functionality allows the model to be very general in nature and allowing subject matter experts to model as little or as much a priori information as needed. Feature Update When a feature update is performed, an Elicited Message was received which satisfied the association constraints of some already existing feature (which was reported by the Data Association stage of processing). Conceptually, this additional Elicited Message in the track 3.5.1

Figure 4 - Sample Association data associated with them, this raw data is not present in the model. When the Elicited Message is received by the Data Association process, the track shown in the bottom of the figure is determined to be feasible since the constraints on the arc connecting `Intrusion Root DMZ' to `Recon Scan Internal' in the model, are satisfied by the information contained within the Elicited Message and estimated concept of interest in the track. 3.5 Track Update and Reporting

The output of the data association stage produces a set of feasible tracks and the elements within those tracks in which the Elicited Message was associated with. The cardinality of this set determines which of three main processing branches the Track Update module will take: 1. 2. 3. If the Elicited Message is not associated to any track, a new track will be created. If associated to a single track, the message will be fused to that track. If associated to multiple tracks, a hyper track will be created and the possible predecessor tracks will be linked.

When an Elicited Message is fused to a track, three different types of updates can occur. The way the message was associated to the track determines how the track is updated during fusion. Also, in the case of a new track or hyper track being created, there is only a single type of update which can occur 足 concept instantiation since there are no existing elements within the track to update. The three types of update which can occur within a track are: (1) feature update, (2) concept update, and (3) concept instantiation. The type of update which occurs is a function of the type of association reported by the intratrack association process. In the case of a feature being reported, a feature update occurs, a concept update in the

adds no new information since this feature was previously observed. The only new information is the most recent time that the feature was observed which may or may not be utilized within the track measurements or reporting. The utilization of this update is entirely dependent upon the measurement which will be described later. A feature likelihood, , is calculated as an ordered weighted average (OWA)[7] of the confidences reported in the sensor messages which have been fused to that ). Using the OWA function allows the feature ( model to parameterize the actual aggregation function which is applied during fusion to various common functions such as max, min, median, etc. In the event that a sensor does not include a confidence value, a default value is used. A change in feature likelihood causes the recalculation of its parent concept likelihood. This is natural since the concept likelihood is a function of its feature likelihoods. The bottom-up calculation of likelihood values allows INFERD to optimize which values actually need recalculation. Concept Update Concept update occurs when Data Association outputs an existing instantiated concept. This means the Elicited Message was not associated to any existing features, but does satisfy the association constraints defined for some existing instantiated concept in the track. In this case, the new feature within the Model Connotation Layer of the Elicited Message is added to the feature list of the existing associated concept within the track. Conceptually, this represents INFERD determining that the Elicited Message contained information which supported, in a non-redundant fashion, an already tracked concept. The concept likelihood, is calculated in much the same fashion as feature likelihood. The difference is the values which are input to the OWA function. In the case of concept likelihood, feature likelihood values ( ) are used as input. Concept Instantiation Concept instantiation occurs when Data Association outputs a concept arc. This means the Elicited Message did not satisfy the association constraints on any existing feature or concept in the track. In this case, the Elicited Message is a new concept which is created and linked to the concept at the head of the arc (the existing concept which triggered the association to that track). This is the case shown in Figure 4 where the `Recon Scan Internal' is a new estimated event within the track and linked to the `Intrusion Root DMZ'. 3.5.4 Track Measurement and Reporting The model also defines a set of measurements to load and run on its tracks. These measurements are executed when a track changes, and can iterate over the 3.5.3 3.5.2

. The concepts and features, outputting a value in actual measurements are Turing complete in the sense that they are Java classes which are reflectively loaded through the model definition. This allows custom analysis to be applied which resides at the higher track level, and not over the raw data. The measurements allow the tracks generated by INFERD to be ranked according to quantitative values associated with the tracks. This ranking criteria applied to the tracks can drastically differ between users of the system. For this reason, INFERD allows multiple measurements to be executed on every track, and necessitates the plug-in approach implemented within the engine. The track measurements are executed on an asneeded basis determined by the fusion process altering a track's content. Given that the measurements are Turing complete, however, functionality can be implemented to force a recalculation periodically to simulate, for instance, dampening. This approach was necessitated by the fact that tracks within INFERD can be representative of very different sequences of activity. There is no single measurement which will be applicable to every situation. Just as custom measurements can be loaded into a model, so can custom reporting procedures. These reporting procedures are used to summarize information across the tracks and generate a report in some format to be sent to subscribers of that report. While track measurements apply to only single tracks, the reporting processes which are loaded are utilized to provide inference between tracks. This type of processing goes beyond normal target tracking systems making INFERD capable of a much richer decision support.

4

Evaluation and Conclusions

INFERD has been developed under funding from the Disruptive Technology Office (DTO) and Air Force Research Laboratories, Rome Directorate (AFRL-Rome) under the umbrella program of Proactive and Predictive Information Assurance for Next Generation Systems (P2INGS). As part of our annual evaluation, the system was forced to undergo what was termed blind tests. An evaluation tool developed by AFRL-Rome applied a series of metrics to the fused results against a ground truth; see [8] for a detailed description of the metric calculations. An interesting comment is in the difficulty of even evaluating cyber tracking systems. Since there is no gold standard model for cyber attacks, the model used to generate ground truth of IDS alerts may not be exactly the model which generated the results. Thus an assignment problem must be solved to assign tracks in system output to tracks in ground truth based on percentage of identical alerts in their contents. From the results of these tests and by the comments of the evaluators, INFERD has survived two program termination phases due to its successes. These successes are not only shown in the quantitative metrics results presented below, but also in the CONOPS and satisfaction of the system requirements presented in section 2.2. The

use of the system and its ability to qualitatively achieve decision support in the proposed space was determined to be unique. Systems using Bayesian techniques were found to be non-robust since the conditional probability tables required to be continually modified for changing network conditions and attack types. Graph matching systems required too much time to compute matches making the requirements of timeliness not tractable to meet. INFERD succeeded where these techniques fell short by not requiring extensive a priori information to generate hypotheses and performing that generation at rates much higher than the worst case alert volumes our testing has encountered. 4.1 Measures of Confidence

not discarded as irrelevant, perfect performance in this category will not be negatively impacted. INFERD scored an average of 98% on this metric.

5

References

[1] A. Hebert, Compressing the Kill Chain, Journal of the Air Force Association, Vol 86, 2003. [2] D. Xu and P. Ning, Alert correlation through triggering events and common resources, 20th Annual Computer Security Applications Conference, 2004. [3] F. Cuppens and A. Miege, Alert correlation in a cooperative intrusion detection framework, Proceedings of the IEEE Symposium on security and Privacy, 2002. [4] A. Valdes and K. Skinner, Probabilistic Alert Correlation, 4th International Symposium on Recent Advances in Intrusion Detection, 2001. [5] G. Pulford et al., Taxonomy of multiple target tracking methods, IEEE Proceedings of Radar, Sonar, and Navigation, Vol 152, 2005. [6] C. Hue et al., Sequential Monte Carlo methods for multiple target tracking and data fusion , IEEE Transactions on Signal Processing, Vol 50, 2002. [7] R. Yager and D. Filev, Induced ordered weighted averaging operators, IEEE Transactions on Systems, Man, and Cybernetics, Vol 29, 1999. [8] G. Tadda et al., Realizing situation awareness in a cyber environment, SPIE Defense and Security Symposium, Orlando, 2006.

Recall measures the percentage of tracks generated in relation to the total in ground truth. This applies across all tracks in the output and not on a correctly assigned track-by-track basis. The success of INFERD with this metric, stems from the quality of the Content Elicitation stage of the fusion process. Alerts which could not be elicited due to the model definition negatively affect this result. On the most recent blind test consisting of five independent attack scenarios, INFERD scored an average of 84.14%. Precision measures the percentage of tracks generated and correctly assigned to tracks in ground truth, in relation to the number of tracks generated. The major fusion process contributed to success in this metric is the Data Association stage. If alerts are correctly associated to tracks, then the number of tracks in the output and ground truth will be similar and the assignment algorithm mentioned before should result in precise assignments. INFERD scored an average of 86.16% on this metric. Fragmentation measures the percentage of tracks in the results, reported as multiple tracks that should have been reported as a single track. Data Association again is the major contributor to success in this evaluation. INFERD scored an average of 1.66% fragmentation, and in this case the lower the number, the better the result. 4.2 Measures of Purity

Mis-Assignment Rate measures the percentage of alerts incorrectly associated to a track. Low percentages in this measure rectify good scores, and INFERD scored 11.95%. An inconsistency in this measurement occurs when a track constituted by a large percentage of alerts is incorrectly assigned to ground truth, since the percentage of incorrectly assigned tracks is not taken into account in this measure. This was the case in this particular run in which a track consisting of hundreds of scanning type alerts was not assigned to the incorrect ground truth track. Evidence Recall measures the number of alerts which appear in the output in relation to those which also appear in ground truth. This is across all tracks and not on a track-by-track basis. Content Elicitation is the contributing factor in this case and as long as the alerts are

