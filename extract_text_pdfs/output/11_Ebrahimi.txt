Automatic attack scenario discovering based on a new alert correlation method
Ali Ebrahimi
I.A.U. of Shabestar
Shabestar, Iran

Ahmad Habibi Zad Navin

ali.ebrahimi1781@gmail.com

man.habibi@yahoo.com

I.A.U. of Tabriz
Tabriz, Iran

Mir Kamal Mirnia
Tabriz University
Tabriz, Iran

Hadi Bahrbegi
I.A.U. of Shabestar
Tabriz, Iran

mirnia-kam@tabrizu.ac.ir

hadi.bahrbegi@gmail.com

Abstract—In recent years, many approaches for correlating
alerts and discovering attack scenarios have been proposed.
However, most of them have difficulties such as high
dependency to predefined correlation rule definitions and
domain knowledge, huge volume of computing workload in
some cases and limited capability in discovering new attack
scenarios. Therefore, in this paper, we proposed a new alert
correlation method to automatically extract multi-step attack
scenarios. This method works based on a multi-phase process
which acts on the IDS generated alerts. In normalization
phase, alerts are turned to the form that can be easily
processed by the proposed system. In alert Winnowing phase,
for each alert is determined that it belongs to which alert
sequence or attack scenario. After determining alerts
scenarios, for each scenario its sub scenarios and Meta alerts
are extracted. Finally, from the produced Meta alerts, the
multi-step attack graph is constructed for each attack scenario.
We evaluate our approach using DARPA 2000 data sets. Our
experiments show our approach can effectively construct
multi-step attack scenarios and give high level view of intruder
intentions.
Keywords- Alert correlation; multi-step attack; attack graph

I.

INTRODUCTION

Given the large popularity of the Internet and widespread
use of automated attack tools, attacks against Internetconnected systems have become commonplace. According to
the Computer Emergency Response Team Coordination
Center (CERT/CC) of Carnegie Mellon University, the
number of incidents reported rapidly increased from 82,094
in 2002 to 137,529 in 2003. Not only has the number of
incidents increased, but the methods used by the attackers are
getting more and more sophisticated. Security issues have
become major concern for organizations that have networks
connected to the Internet.
Intrusion detection is one of the major techniques for
protecting information systems. It has been an active
research area for over recent decades since it was first
introduced in the 1980s. Generally, intrusion detection
systems can be roughly classified as anomaly detection and
signature detection systems. Anomaly detection involves
building the normal behavior profile for system. The
behaviors that deviate from the profile are considered as
intrusions. Signature detection looks for malicious activities
by searching particular patterns on the data against a
predefined signature database. Recently, a new type of
intrusion detection has emerged. It is called specification
based intrusion detection. Normally, this kind of detection
technique defines specifications for network protocols, and

978-1-4244-9493-4/11/$26.00 ©2011 IEEE

Amir Azimi Alasti Ahrabi

I.A.U. of Shabestar
Tabriz, Iran
amir.azimi.alasti@gmail.com

any activities that violate specifications are considered as
being suspicious. All intrusion detection techniques have
their own strengths and weaknesses. For example, signaturebased intrusion detection has a lower false positive rate, but
it is intended for detecting known attacks. Anomaly-based
detection has the potential to detect novel attacks, but at the
same time it suffers from a high false positive rate.
Moreover, it is very hard to define normal behavior for a
system.
Intrusion detection systems can also be classified as hostbased and network-based, depending on the data source. A
host-based intrusion detection system collects data such as
system calls, log files and resource usage from a local
machine. A network-based intrusion detection system detects
intrusions by looking at the network traffic. These two types
of intrusion detection system are complementary; neither can
be replaced by the other one.
Even though intrusion detection systems play an
important role in protecting the network, organizations are
more interested in preventing intrusion from happening or
escalating. The intrusion prevention systems largely relies on
the knowledge about the protected network and the understanding of attack behaviors. However, studying the attack
behavior is a challenging job as the adversaries tend to
change their behavior in order not to be identified. And at the
same time, as new vulnerabilities are continually being
discovered, the attacks may use new attack strategies.
One of the approaches to study the attack strategies is to
extract them from the alerts that are generated by IDSs.
Even though intrusion detection systems play an
important role in protecting the network, they still have some
weaknesses [22]. First, as network traffic increases, the
intrusion detection alerts produced by IDSs are increasing
exponentially. In spite of this increase, most IDSs neglect the
overhead of human operators, who are overwhelmed by the
large volume of alerts. Second, human operators are fully
responsible for analyzing a network’s status and the trends of
cyber attacks. Third, although cyber attacks can produce
multiple correlated alerts [23], IDSs are generally unable to
detect such attacks as a complex single attack but regard
each alert as a separate attack. Therefore, in the early stage, it
is difficult to detect large-scale attacks such as a distributed
denial of service (DDoS) or a worm.
These limitations are caused by the absence of a
mechanism that can preprocess and correlate the massive
number of alerts from IDSs. In fact, preprocessing and
correlation of alerts are essential for human operators
because the information reproduced by this means can

reduce the overhead of human operators and help them react
appropriately [24].
Alert correlation allows for automatic alert clustering,
which groups logically interconnected alerts into one group
and allows easy analysis of attacks.
The remainder of this paper is organized as follows.
Section 2 reviews the previous work on alert correlation and
attack strategy discovering. Section 3 describes the proposed
approach to extract multi step attack scenarios. Section 4
analyzes the experiment results on the DARPA 2000 [12]
dataset and In Section 5 we conclude the paper and indicate
some directions that could be followed in future work.
II.

RELATED WORKS

To the present time, there have been several proposed
techniques of analyzing attack scenarios from security alerts.
However, most of these approaches depend on complex
correlation rule definitions and hard-coded domain
knowledge that lead to their difficult implementation and
limited capabilities of detecting new attack strategies.
In [4, 5, 6], Cuppens et al. correlates alerts if the
prerequisites of some later alerts are satisfied by the
consequences of some earlier alerts in MIRADOR
correlation method. The attack base was specified in
LAMBDA and was analyzed to generate correlation rules to
be used to construct attack scenarios. Ning et al. [13, 14, 15]
use similar method with theirs. They construct attack
scenarios through alert correlation, using prerequisites and
consequences of attacks in TIAA correlation method. Both
approaches are based on the observation that in a series of
attacks, the attacks were usually not isolated, but related as
different stages, with the earlier stages preparing for the later
ones. Such methods can potentially uncover the causal
relationship between alerts, but they need to define the
specification of attacks and the attack plan recognition
results rely on the precision of the correlation rules. Such
limitations make the methods difficult and complex to
implement.
IBM researchers also have made some efforts on the
techniques of alert aggregation and alert verification. Araujo
et al. [12] presents a method of mining correlation rules from
hand-labeled training examples by using rule wizard and rule
editor. It is integrated in the IBM Tivoli Event Console
(TEC). It enables automatic creation of rules, which helps
operators by providing a simple way to create rules based on
observed events, but it relies on the expertise knowledge and
manual configuration. Julisch et al. [7, 8] introduce the
concept of root cause and propose an alarm clustering
method to support the discovery of root cause which can
help remove most of the redundant alarms that can be
attributed to a small number of root causes. This method also
need expertise knowledge and cannot solve the problem of
false negative.
Dain et al. [2] use data mining approach to combine the
alerts into scenarios in real time. Valdes et al. [17] proposed
a probabilistic-based approach to correlate and aggregate
security alerts by measuring and evaluating the similarities of
alert attributes. They use a similarity metric to fuse alerts
into meta-alerts to provide a higher-level view of the security

state of the system. Alert aggregation and scenario
construction are conducted by enhancing or relaxing the
similarity requirements in some attribute fields. But
similarity calculation is the only way for them to aggregate
the alerts. They have to compare all the alert pairs and have
to determine a lot of thresholds with expert knowledge which
lead to their huge volume of computing workload.
Sheyner and J. W. Wing et al. [16] proposed a model
checking based technique to automatically construct attack
graphs. Although it helps facilitate the task of defining attack
graphs, it has the limitation of scalability especially for larger
network and systems.
In [9, 18] Wenke lee and Xinzhou Qin proposed a GCTbased and Bayesian-based correlation approach to
identifying new alert relationship without depending on prior
knowledge of attack transition patterns. The method
originates from the idea that attack steps are directly related
because an earlier attack enables or positively affects the
later one. But the method can only detect scenario segment
by mining related alert pairs and the analysis of alert pairs
results in huge computing workload which also leads to the
limitation of the final multi-step discovering result.
All the existing methods in security alert correlation area
have their limitations. They either depend on complex
correlation rule definition or depend on hard-coded domain
knowledge. Most approaches are lack of flexibilities and
adaptability. These drawbacks lead to their difficult
implementation and limited capabilities of detecting new
attack strategies. In addition, most of them are offline
processing.
To solve these problems this paper focuses on
discovering multi-step attack scenarios via the analysis of
security alerts based on a new alert correlation method. This
method represents a high level view of attack steps and used
attack strategies by intruders.
III.

PROPOSED APPROACH

The our approach is based on the idea that attacks can be
decomposed into attack steps, which correspond to one
action in the attackers greater plan, and, further, that single
attack steps are made up of large numbers of IDS generated
alerts. For instance, one step by an attacker might be running
the security scanning tool nmap, once, against a network to
discover what services are available. This step would likely
generate many IDS alerts. With no correlation tool, a
systems operator is faced with thousands of alerts and has no
way of knowing, easily, which alerts represent the same
attack step nor which attack steps should be considered
together as parts of the same attack.
The mechanism of our system as is showed in Figure 1 is
based on a multi-phase process. In this method IDS
generated alerts are passed as input for our proposed attack
scenario discovering system. In first phase, each arrived alert
is processed by Alert Winnower Unit. This unit determine
that the alert is belongs to which attack scenario’s alert
sequence. The received alerts are inserted in a tree structure
that we have called it as alert tree. This alert tree, at first,
contains only a root node that we have called it as scenario
starting node. The alerts directly connected to start node

starts a new attack scenario. After determining the
corresponding attack scenarios for alerts, the processes
continue in scenario level. In second phase, the sub scenarios
of each scenario are determined. Each sub scenario
represents the interactions between the intruder and one of
victims. In next phase, Meta alerts for each scenario can be
determined. Each Meta Alert contains alerts that belongs to
same sub scenario and is generated consecutively. In final
phase, we use scenario’s Meta alerts to distinguish attack
steps. Result of this phase is graph representation that shows
the steps of entire attack scenario.

A. Alert Winnowing
The winnower unit as soon as received a new alert,
checks that whether the alert is a repeated or redundant alert
or not. Sometimes, it is possible that a packet matches with
multiple IDS rules and IDS generate multiple alerts for that
packet. Since an alert with same characteristic previously
have been received then this new alert known as redundant
and can be ignored. Otherwise the Winnowing process for
alert is started. This step, in fact, specifies that whether the
alert is belongs to one of existing attack scenarios or a new
attack scenario has been started.
Input: new alert A, Alert tree T
Output: previous alert PA in attack scenario for new alert

Snort
IDS Alerts
Winnowing phase
Alert tree
Sub scenario extraction phase
Sub scenarios of each
scenario
Meta Alert extraction phase
Meta alerts of each
scenario
Multi-Step attack scenario construction phase
Multi-Step attack
scenario graph
Figure 1. General scheme of our attack scenario discovering system

In following we explain this phases in more details and
represent the algorithms used in them.
Here, we use the following set of characteristic features
of alerts:
− Attack-Type or Signature Id: This feature identifies
the attack. Different sensors often refer to the same
attacks with different attack names.
− Source IP: This feature identifies where the attack is
coming from. If the source IP address is not spoofed, it
can identify the attacker.
− Target IP: This feature identifies for whom the attack
is meant.
− Source Port: This feature identifies from where port
the attack is coming.
− Target Port: This feature identifies the port for which
the attack is meant.
− Time Stamp: This feature denotes the time of the
attack.
In this way an alert is denoted as:
A= {Attack-Type, Source-IP, Destination-IP, Source-Port,
Destination-Port, Time}.
Also alerts have others fields such as scenario id, sub
scenario id and Meta alert id so that these fields is initialized
during system execution.

For every leaf alert LA in Alert tree T based on descending order of their time stamps

if IS_Correlated(A,LA) = TRUE then
Append A to current leaf alert LA in Alert tree and its set scenario field
PA=LA; return PA;
End if;
End for;
If there is no leaf alert in alert tree or new alert is not correlated to one of them,
Append new alert to alert tree’s root node and generate new scenario for it.
PA := T.root; return PA;
End;
function IS_Correlated(Alert a,Alert B)
OUTPUT: C //TRUE or FALSE
C := FALSE;

IF a.srcip = b.dstip AND a.dstip = b.srcip THEN
C := TRUE;
IF b.reply = false THEN a.reply := TRUE; END IF;
ELSE IF a.srcip = b.srcip THEN
IF b.reply=TRUE AND b.dstip <> a.dstip THEN
C := false;
ELSE
C := true;
END IF;
if a.dstip = b.dstip AND b.reply = TRUE THEN
a.reply := true;
END IF
ELSE IF a.dstip = b.srcip THEN
IF a.proto= b.proto THEN
C := true;
a.reply := true;
ELSE
if there is one alert in b hierarchy to alert tree's root node so that

IF (alert.srcip = a.srcip AND alert.dstip=a.dstip) OR
(alert.srcip=a.dstip AND alert.dstip=a.srcip) THEN
C : = true; a.reply := true;
END IF;
END IF;
ELSE IF a.dstip = b.dstip THEN
IF a. sig_id = b.sig_id THEN /*dos lunched*/ C := true;
ELSE
if there is one alert in b hierarchy to alert tree's root node so that
If alert.srcip = a.srcip OR alert.dstip = a.srcip THEN
C := true;
END IF;
END IF;
IF C = TRUE AND b.reply = TRUE THEN
a.reply := TRUE;
END IF;
ELSE IF a.srcip = b.dstip THEN
IF b.reply = TRUE THEN
C := IS_Correlated(a,b.parent);
ELSE IF a.sig_id = b.sig_id THEN
C : = TRUE;
ELSE

if there is one alert in b hierarchy to alert tree's root node so that
IF a.srcip = alert.dstip AND a.sig_id = alert.sig_id THEN
result := true;
END IF;
END IF;
END IF;
RETURN C;
END FUNCTION;

Figure 2. Alert Winnowing algorithm

By executing Winnowing algorithm the situation of new
alert in alert tree is determined. As previously mentioned, in
this step the processes continue in scenario level and
possibly algorithms can be run in parallel. After determining
corresponding scenario for alerts in next step the sub
scenarios for each attack scenario can be discovered.

B. Sub Scenario
Usually the most of attacks is lunched against a network
consists of multiple victims. Here we separate the alerts
related to each victim with intruder as isolated sub scenario.
Each sub scenario relates to one scenario and is inserted to
scenario’s sub scenarios list. Each sub scenario contains two
IP address fields that these addresses specify intruder and
one of victims.
The following algorithm determines that alert belongs to
which sub scenario in main scenario.
Input: Alert A with specified scenario
Output: sub scenarios SS corresponds to input alert
scenario := A.scenario; parentAlert := A.parent;
IF (A.srcip = parentAlert.dstip AND A.dstip = parentAlert.srcip ) OR
(A.srcip = parentAlert.srcip AND A.dstip = parentAlert.dstip ) OR
( A.dstip = parentAlert.srcip AND alert.proto = parentAlert.proto )
THEN
SS := parentAlert.subSenario;
ELSE
For each SubSenario sbs in senario.subSenariosList DO
IF ( sbs.srcip = A.srcip AND sbs.dstip = A.dstip ) OR
(sbs.srcip = A.dstip AND sbs.dstip = alert.srcip ) THEN
SS := sbs;
break;
END IF;
END FOR;
IF SS = NULL THEN
SS := generate new SubSenario
SS.srcip := A.srcip;
SS.dstip := A.dstip;
Insert SS into senario.subSenariosList
END IF;
END IF;
A.subSenario := SS;
Insert A into SS.alertsList
Insert A.sig_id into SS.attackTypesList
senario.currentSubSenario := SS;
return SS;
END;

Figure 3. Sub Scenario Determining Algorithm

C. Meta Alert
There is another grouping for the alerts belong to a
scenario that is called hyper alert or Meta alert. During
determining sub scenario for alerts, all of them that belong to
same sub scenario consecutively are inserted in one Meta
alert. Since the next alert to be belonging to another sub
scenario, a new Meta alert is constructed and this alert is
inserted to that Meta alert’s alerts list.
The Algorithm for determining alert’s corresponding
Meta alert is shown in Figure 4.
Input: alert A with specified sub scenario
Output: metaAlert corresponds to input alert
metaAlert := null;
IF A.subSenario = A.senario.CurrentSubSenario THEN
metaAlert := get last item from A.subSenario.MetaAlertsList.;
ELSE
metaAlert := create new MetaAlert;
Insert metaAlert into A.subSenario.metaAlertsList;
END IF;
Insert A into metaAlert.alertsList;
A.metaAlert := metaAlert;
Return metaAlert;
END;

Figure 4. Alert’s Meta Alert determination algorithm

After producing sub scenarios and Meta alerts for each
scenario, now we use these data to extract attack steps.
D. Extracting attack scenario steps
We use scenario’s Meta alerts to distinguish attack steps.
The chosen data structure for presenting attack scenario steps
is directed graph that the vertexes indicating attack types and
edges indicate the temporal order of alerts.
Attack scenario steps graph

Attack scenario Steps graph shows the different steps of a
multi step attack. In these graphs, the vertexes stands for
attack types and edges indicate the temporal order of alerts.
The vertexes (attack types) belongs to each step are clustered
in one group. In this graph the edge between to attack type A
and attack type B indicates that one alert by attack type B
after alert by attack type A is generated.
To constructing attack steps graph, first, attack scenario
steps must be extracted. The Algorithm for this phase is
represented in Figure 5. The generated graph represents a
high level view of intruder's activities.
The following section explains the experimental results
obtained by our correlation approach while using the 2000
DARPA intrusion detection scenario specific datasets
(LLDOS 1.0 and LLDOS 2.0.2).
IV.

EXPERIMENTS AND RESULTS

To evaluate the effectiveness of our method in
correlating alerts and its ability to construct attack scenarios,
we used DARPA 2000 intrusion detection scenario specific
data sets. We used this dataset for which ground truth is
known because it allowed us to assess the success of our
experiments and compare our experimental results to work
makes by other researchers in this area who have also used
this dataset to report their results.
The data sets contain two scenarios: LLDOS 1.0 and
LLDOS 2.0.2. In LLDOS1.0, the sequence of attacks
includes IPsweep, probes of sadmind services, breakins
through sadmind exploits, installations of DDoS programs,
and finally the DDoS attack. LLDOS 2.0.2 is similar to
LLDOS 1.0; however, the attacks in LLDOS 2.0.2 are
stealthier than those in LLDOS 1.0. We used Snort [25] as
IDS sensor for generating alerts. We also used GraphViz
[26] to visualize graphs.
Figure 6 shows the attack steps graph generated for one
of discovered scenarios from LLDOS 1.0 dataset. The
obtained result is outcome of executing algorithms on Snort
generated alerts. Therefore, final result highly depends to
Snort outcome. Since Snort missed some of alerts specially,
latest steps alerts, this affected result graph. Ning et al. report
this same problem during their experiments with the DARPA
data [13]. This highlights the fact that effectiveness of any
high level analysis of IDS sensor data is largely dependent
on the quality of the IDS sensor data itself.

Input: scenario Meta alerts list MAL
Output: Attack Scenario Steps
Begin
AttackStep currentStep := NULL, preStep := NULL;
for each MetaAlert metaAlert in MAL DO
IF currentStep = NULL THEN
currentStep := create new AttackStep;
insert currentStep into attackSteps;
AddMetaAlertInAttackStep(metaAlert, currentStep);
ELSE
BEGIN
IF ( currentStep.srcipList.size() = 1 AND currentStep.dstipList.size() > 1) AND
( currentStep.srcipList[0] = metaAlert.alertsList[0].srcip AND
match (currentStep.attackTypesList , metaAlert.attackTypesList ) > 0.4) THEN
addMetaAlertInAttackStep(metaAlert, currentStep);
ELSE IF ( currentStep.dstipList.size() = 1 && currentStep.srcipList.size() > 1) AND
( currentStep.dstipList[0] = metaAlert.alertsList[0].dstip AND
match (currentStep.attackTypesList , metaAlert.attackTypesList ) > 0.4 ) THEN
addMetaAlertInAttackStep(metaAlert, currentStep);
ELSE IF ( currentStep. dstipList.size() = 1 && currentStep. srcipList.size() = 1 AND
( currentStep.dstipList[0] = metaAlert.alertsList[0].dstip OR
currentStep.srcipList[0] = metaAlert.alertsList[0].srcip ) AND
match (currentStep.attackTypesList , metaAlert.attackTypesList ) > 0.4) THEN
addMetaAlertInAttackStep(metaAlert, currentStep);
ELSE
IF match (currentStep.attackTypesList , metaAlert.attackTypesList ) > 0.4) THEN
addMetaAlertInAttackStep(metaAlert, currentStep);
ELSE
preStep := currentStep;
currentStep := create new AttackStep;
preStep.nextStep := currentStep;
insert currentStep into attackSteps;
AddMetaAlertInAttackStep(metaAlert, currentStep);
END IF;
END IF;
END;
END IF;
return attackSteps;
END;
PROCEDURE AddMetaAlertInAttackStep(MetaAlert metaAlert, AttackStep attackStep)
Alert preAlert := NULL;
for each Alert alert in metaAlert.alertsList DO
IF preAlert = NULL THEN
Add (‘Start’, sig_id) to attack graph edges set;
Insert alert.srcip into attackStep.srcipList;
Insert alert.dstip into attackStep. dstipList;
attackStep.dstipList.add(alert. dstip);
Insert sig_id into attackStep.attackTypesList;
ELSE
IF alert.reply = FALSE THEN
Add (preAlert.sig_id, sig_id) to attack step edges set;
Insert alert.srcip into attackStep.srcipList;
Insert alert.dstip into attackStep. dstipList;
attackStep.dstipList.add(alert. dstip);
Insert sig_id into attackStep.attackTypesList;
ELSE
(preAlert.sig_id, sig_id).reply := TRUE;
Add (preAlert.sig_id, sig_id) to attack step edges set;
Insert alert.srcip into attackStep.srcipList;
Insert alert.dstip into attackStep. dstipList;
attackStep.dstipList.add(alert. dstip);
Insert sig_id into attackStep.attackTypesList;
END IF;
END IF;
IF alert.reply = FALSE THEN
preAlert := alert;
END IF;
END FOR;
IF preAlert <> NULL THEN
Add (preAlert.sig_id, ‘End’) to attack step edges set;
END IF;
END PROCEDURE;

Figure 5. Attack Scenario Steps Extraction algorithm

Figure 7. LLDOS2.0.2 insid
de dataset (Snort)

Figure 6. LLDOS1.0 inside dataset (S
Snort)

Figure 7 shows the attack steps grapph generated for
discovered scenario from LLDOS2.0.2 dattaset. The attack
scenario constructed for this attack has a sim
milar pattern with
the one extracted from LLDOS1.0, the attaccker compromises
two hosts 172.016.115.020 and 172.0016.115.050 by
exploiting the vulnerability of the Sadmiind service, and
installs DDoS daemons on these machines bby using ftp. The
first and five stages are also missed for the same reasons. In
the same way the Stream_DoS is correlated with a Port_Scan
alert as a separate attack scenario.
The correlation method to construct attacck scenarios from
intrusion alerts proposed by Ning et al. [13] is similar to
ours, the experimental results on the DAR
RPA 2000 dataset
show that both approaches provide thee similar graph
representation for attack scenarios. Howeverr, our approach is
different than theirs in that it does not need to define a large
number of rules in order to correlate alerts.
V.

CONCLUSION AND FUTUREE WORKS

In this paper, we proposed a new methodd to extract multi
step attack scenarios based on correlativiity between IDS
mpted to be a step
generated alerts. This work have been attem
to overcome the problems and difficulties arround

discovering new attack patterns an
nd to avoid the need to
define and maintain complex correllation rule definitions. In
this method, at first, the alerts div
vided to different groups
based on their similarities and corrrelativity. We called this
step winnowing phase. Each obtaained alert group in this
phase corresponds to a separate attack scenario. Then the
processes continue in scenario level to extract its sub
scenarios. After that scenarios Meta alerts is discovered.
Finally, from the produced Meta aleerts, the attack steps graph
for each attack scenario is produced.
to improve the
In future works, we would attempt
a
Winnowing algorithm and to utilizee from other alert features
by reducing the
to better correlate them. And totally
t
proposed method phases and merging computations can be
to improve total efficiency.
REFERENCE
ES
[1]
[2]

[3]
[4]

Roberto Di Pietro, Luigi V. Mancini,, "Intrusion Detection Systems
S
Jul 10, 2008.
(Advances in Information Security)", Springer,
Dain O.M. and Cunningham R. K, "Fusing a heterogeneous alert
stream into scenarios", Proceedings: the 2001 ACM Workshop on
Data Mining for Security Applications,, 2001, pp. 1-13.
Yi Ping, Xing Hongkai, Wu Yue, Cai
C Jiwen, "Alert Correlation
through Results Tracing back to Reason
ns", IEEE, 2009.
S. Benferhat, F. Autrel, F. Cuppens,, “Enhanced correlation in an
intrusion detection process", Seco
ond International Workshop
Mathematical Methods, Models and
d Architectures for Computer
Networks Se- curity, pp. 157-170, 2003
3.

[5]

[6]

[7]

[8]

[9]
[10]

[11]

[12]

[13]

[14]

[15]

[16]

[17]

[18]
[19]
[20]

[21]
[22]

[23]

[24]

[25]
[26]

F. Cuppens, "Managing alerts in multi-intrusion detection
environment", 17th ACSAC conference, New Orleans, pp. 22,
December 2001.
F. Cuppens, A. Miµege, "Alert correlation in a cooperative intrusion
detection framework," IEEE symposium on security and privacy,
Oakland, pp. 202, May 2002.
K. Julisch, "Mining alarm clusters to improve alarm handling
efficiency ", 17th Annual Computer Security Applications
Conference, New Orleans, LA, USA, pp.0012, 2001.
K. Julisch, “Clustering intrusion detection alarms to support root
cause analysis", ACM Transaction on Information and System
Security, vol. 6, pp. 443-471, 2003.
W. Lee and X. Qin, “Statistical causality analysis of INFOSEC alert
data", RAID'03, pp. 73-93, 2003.
Zhi-tang Li, Jie Lei, Li Wang, and Dong Li, "A Data Mining
Approach to Generating Network Attack Graph for Intrusion
Prediction", IEEE, 2007.
C. Araujo, A. Biazetti, A. Bussani, J. Dinger, M. Feridun, and A.
Tanner, \Simplifying correlation rule creation for e®ective systems
monitoring", 15th IFIP/IEEE International Workshop on Distributed
Systems: Operations and Management, DSOM, Davis, CA, USA, pp.
266-268, 2004.
MIT Lincoln Lab. 2000 DARPA Intrusion Detection Scenario
Specific Data Sets. (http:// www.ll.mit. edu/ IST/ideval/data/2000/
2000 data index.html).
P. Ning, Y. Cui, and D. S. Reeves, “Constructing attack scenarios
through correlation of intrusion alerts", 9th ACM Conference on
Computer and Communications Security, Washington, DC, United
States, pp. 245-254, 2002.
P. Ning, Y. Cui, D. S. Reeves, and D. Xu, “Techniques and tools for
analyzing intrusion alerts", ACM Transactions on Information and
System Security, vol. 7, pp. 274, 2004.
P. Ning and D. Xu, “Alert correlation through triggering events and
common resources", ACSAC'04, Tucson, AZ, USA, pp. 360-369,
2004.
O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing,
\Automated generation and analysis of attack graphs", Proceedings of
the 2002 IEEE Symposium on Security and Privacy, pp. 273, May
2002.
A. Valdes and K. Skinner, “Probabilistic alert correlation",
Proceedings of the 4th International Symposium on Recent Advances
in Intrusion Detection, LNCS 2212, pp. 54-68, Oct. 2001.
Q. Xinzhou and L. Wenke, “Discovering novel attack strategies from
INFOSEC alerts", ESORICS'04, pp.439-456, 2004.
Yugang Zhang, Shisong Xiao, Xin Zhuang and Xi Peng, "Using
Cluster and Correlation to Construct Attack Scenarios", IEEE, 2008.
Xi Peng, Yugang Zhang, Shisong Xiao, Zheng Wu, JianQun Cui,
Limiao Chen and Debao Xiao, "An Alert Correlation Method Based
on Improved Cluster Algorithm", IEEE, 2008.
Zhitang Li, Aifang Zhang, Jie Lei, Li Wang, "Real-Time Correlation
of Network Security Alerts", IEEE, 2008.
H. Debar and A. Wespi. Aggregation and correlation of intrusion
detection alerts. In Recent Advances in Intrusion Detection, LNCS
2212, pages 85 – 103, 2001.
K. Kendall. A database of computer attacks for the evaluation of
intrusion detection systems. Master’s thesis. Massachusetts Institute
of Technology; June 1999.
E. Bloedorn, AD. Christiansen, W. Hill, C. Skorupka, LM. Talbot, J.
Tivel. Data mining for network intrusion detection: how to get
started. MITRE Technical Report; August 2001.
Snort: The Open Source Network Intrusion Detection System,
http://www.snort.org,2005.
AT & T Research Labs. Graphviz - open source graph layout and
drawing software. http://www.research.att.com/sw/tools/graphviz/.

