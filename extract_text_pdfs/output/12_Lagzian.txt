6'th International Symposium on Telecommunications (IST'2012)

Frequent Item set mining-based Alert Correlation for Extracting multi-stage Attack Scenarios
Samira Lagzian,
Network Security Group Iran Telecommunication Research Center Tehran, Iran lagzian@comp.iust.ac.ir
Abstract-- Intrusion detection systems are one of the most useful security tools in computer networks. Although these Systems, are successful security technologies but they are faced with some problems. Correlation of alerts is one of the methods to deal with these problems. Correlation engine extract useful and high-level information and is effective in decision on time when network intrusions are happened. In this paper, we propose a new framework for real-time alert correlation which consists of two phases: Alert Preprocessing Phase and Scenario Constructing Phase. In our structure, we aggregate alerts into graph structures and then we extract unknown attack scenarios with mining frequent structure patterns. This method is based on the observation that most alerts have frequent and sequential characteristic, since we can use frequent item set mining methods for extracting attack scenarios. Our algorithm is efficient in memory and time consumption. For evaluation of our algorithm we used DARPA2000 dataset. The results show that our proposed algorithm can extract the attack scenarios exactly.

Fatemeh Amiri, AliReza Enayati, Hossien Gharaee
Network Security Group Iran Telecommunication Research Center Tehran, Iran f.amiri@itrc.ac.ir, enayati@itrc.ac.ir, Gharaee@itrc.ac.ir low-level alerts for each step of attacks separately and they cannot detect multi-stage attack scenarios and cannot correlate alerts of attack together. Therefore we need a higher level vision of system security status. Alert correlation produce such images from the system. Amiri and et al.[1] are presented a general architecture of alert correlation system. The proposed architecture includes the four components: log management, alert correlation ,incident response and knowledge base system, In log management, the alerts received from network sensors are normalized and stored in database. The normalized alerts are clustered and merged in alert correlation component. The appropriate action are chosen in incident response component as output of alert correlation It is often desirable, and sometimes necessary, to understand attack strategies in security applications such as computer forensics and intrusion responses. For example, it is easier to predict an attacker's next move, and decrease the damage caused by intrusions, if the attack strategy is known during intrusion response [2]. Since data mining refers to extracting useful information from massive amounts of data, therefore, they can be used as a method for correlation of alerts. In data mining methods, data is stored firstly and then processed using sophisticated algorithms. Since the volume of received alerts from intrusion detection systems is very high, storing all of these alerts in memory is not possible, and furthermore, alerts are received from intrusion detection systems as continuous flow and their length is infinite. In correlation systems we need real time response, but data mining methods need several tracing on data. Since the nature of received alerts is similar to stream data, using stream mining methods is appropriate for generating real time response. Unfortunately, little research in the field of mining attack scenarios using stream data is available. In this paper, an immediate method based on stream mining for correlation of alerts is presented. Our proposed framework consists of two phases: preprocessing and scenario construction phases. In preprocessing, after normalization, we aggregate alerts into graph structures and generate stream of alert transactions based on connectivity information. In scenario construction phase, we extract attack scenarios with mining frequent structure patterns. In this phase, the stream of transactions is broken to windows, and frequent structures are

Keywords: alert correlation; frequent pattern;multi-stage attack scenario, stream mining;

I.

INTRODUCTION

Intrusion detection systems are used variedly in computer networks for increasing security. Since they produce the high volume of alerts, the management of theses alerts is difficult. Therefore attack correlation methods for acquiring appropriate information from alerts are used. In addition to the high volume of alerts, there are other reasons for the importance of alert correlations: 1-The high rate of false positive alerts. 2-Enabling collaboration between intrusion detection systems 3- Creating a higher level view of malicious events in networks and help to correct and timely decision making against attacks. 4-Failure of multi-stage attack scenario detection by simple intrusion detection systems Usually the attackers to achieve their goals use multi-stage attacks. Intrusion detection systems are able to produce only

978-1-4673-2073-3/12/$31.00 Å 2012 IEEE

1010

extracted from these windows. The windows slide by entering new transactions. Our approach is easier to implement and does not need a large amount of expert knowledge. The rest of paper is organized as follows; related work is reviewed in Section II. In section III, our proposed framework for alert correlation is described. This section includes preprocessing and scenario construction phases. In next section, our experimental results are shown. Finally, conclusion and future work are described in section V. II. RELATED WORK

B. Alert Correlation based on rules This class of methods correlates alerts based on prerequisites and consequences of alerts. The performance of this class depends on probability of MLP and SVM the prior knowledge and expert experience. In addition, enumerating all possible matching conditions between alerts is difficult. Alerts are correlated by matching the consequences of some alerts and the prerequisites of others. Many researchers use rule based methods. Erhard and et al [8] proposed an alert correlation systems based on matching the pre/post conditions of alerts. Ning and et al. [9] proposed a rule based method to correlate alerts. When the prerequisite of attack is detected, the system can predict the consequence of the attack. In another similar work, Park and et al [10] build a correlation engine based on rules. Ning and et al [11] proposed an approach to correlate alerts when the IDSs miss critical attacks. They integrate two correlation methods: the similarity between alert attributes, and prerequisites and consequences of attacks to hypothesize missed IDS alerts. This class of methods gives good performance in facing with known attacks but their performance depends heavily on expert knowledge. C. Alert Correlation based on statistic: This class of methods correlated alerts to each other, if they are statistically dependent on each other. These methods require a training dataset for extract attack scenarios. Therefore the performance of this class depends on the validity of training dataset. Preparing the test dataset for this class is a hard task [12]. In the case of using a statistical approach, it is difficult to keep such a system up to date, because adding new attack patterns requires the system to be trained again. After training the statistical-based alert correlation, results have to verify to make sure that the alert correlation operates correctly. In [13], authors used Bayesian networks for modeling of causal relationship between alerts. In this model, alerts are represented by nodes and casual relationship between them is represented with vertex. Ren and et al [14], first employ a Bayesian network to automatically extract information about the constraints and causal relationships among alerts. Based on the extracted information, they reconstruct attack scenarios. Authors in [15], implement an alert correlation system based on naive Bayesian networks. They can predict the next step of a multi-stage attacks based on previous alert history. In this paper, we propose a framework for correlating alerts based on incremental mining frequent structures. It doesn't need to knowledge experts. Since we use an incremental method we can able to discover new attack patterns. III. PROPOSED FRAMEWORK

Alert correlation methods based on communication of alerts can be grouped as fellows: Alert Correlation Based on known scenario, alert correlation based on rules and alert correlation based on statistic [3]. A. Alert Correlation Based on Known Scenario This class of methods correlate alerts based on the known attack scenarios. An attack scenario can be specified by an attack language or using learning methods. In methods which multi-stage attacks is described by a language, if the scenario has changed little, scenarios would not be detectable for systems. . In this group identify of all possible attack scenarios require extensive prior knowledge and a lot of time. The biggest problem of this group is that these methods cannot able to detect unknown scenarios [4]. ADELE [5], STATL [6] and LAMBDA [7] are examples of attack languages that are used for correlation. Most researches which have been done in this area used learning methods to detecting attack scenarios. In [3] Ghorbani and Zhu use Multi-layer perceptron (MLP) and support vector machine (SVM) to construct attack scenarios. In this paper, New alerts correlated with most similar meta alert. The similarity computed by MLP and SVM. If the computed probability is less than user predefine threshold, the new alert is correlated with new meta alerts. The authors claimed that their proposed method gave good performance on DARPA. But it seems that it is not applicable to dynamic network environments where high volume streams of alerts are received continuously. So, computing of similarity between new alert and previous met alert is time-consuming operation. The most methods using machine learning, give low performance and cannot response real time. In [16] Sadoddin and Ghorbani propose a framework to correlate alerts immediately. They reduced the problem of mining attack behaviors to the problem of mining the frequent attack sequences in a database. They used FP-Growth algorithm to mining frequent patterns of alerts. In the proposed framework, time-sensitive statistical relationships between alerts are maintained in a data structure and data structure is updated incrementally to reflect latest trends of patterns. In another similar work [17] ,authors used incremental method to construct attack scenarios. They used modified AprioriAll (the sequential pattern mining algorithm), to discover multi-stage attacks.

In this section we introduce our method for extracting attack scenarios. The architecture of our system consists of two

1011

phases: Alert preprocessing phase and scenario constructing phase. Preprocessing phase is used to transform stream of alerts into alert transactions. Scenario constructing phase is used to correlate alerts in order to making attack scenarios. Fig. 1 shows main components of our system. In the following, we describe two phases in detail.

A.desIP=B.des.IP & A.attacktype=B.attacktype Alert aggregation component correlates alerts into virtual graph structures G (V, E) based on their connectivity information. Vertex denotes several hosts and label of each edge is the attack type of IDS alert between them. These graph structures are candidate frequent patterns which are input for the scenario constructing Phase. It is possible some unrelated alerts to correlate with each other in a single pattern accidentally. Since the frequencies of these patterns are low, they are not seen in results. In aggregation component, it is possible some unrelated alerts to correlate with each other in a single pattern accidentally. Since the frequencies of these patterns are low, they are not seen in results.

Figure 1.

Proposed framwork

A. Preprocessing Phase Warnings may be issued from a variety of sensors and security systems and they have different format. Therefore all warnings must change to a standard format that is understandable by correlation engine. In alert normalization, these inconsistencies are converted into a single common unified format. The conversion can be implemented either in a centralized form or in a decentralized form. In the centralized implementation, sensors send alerts in their vendor defined format and then all alerts are translated into the appropriate format in the correlation engine side. In contrast, in decentralized implementation the load is distributed among normalization modules on sensors. The former has simpler implementation while the latter has better performance. IDMEF (Intrusion Detection Message Exchange Format) [18] is one of the standard methods for illustrating intrusion detection system alerts. IDMEF is an object oriented model that is implemented using XML. In this work, all IDSgenerated alerts are be transformed to IDMEF format. On the other hand, intrusion detection systems generate a lot of alerts per second. It is difficult to perform any kind of processing on data in real time. Therefore, we need to reduce redundancies via clustering and aggregation of alerts. Normalized alerts are received continuously at the aggregation component. In this component, similar warnings are grouped together. The main goal of aggregation is reducing size of alerts and keeping important and effective alerts. In this work, we use the features source IP address of attacker, destination IP address of victim machine, attack type and time of occurrence for correlation alerts. Attack type is the name assigned to the malicious activity according to the IDS signature database. Alert aggregation component transforms alerts to two groups of hyper alerts: many to one and one to many. If A and B is two alerts which coming in time interval t they are transformed to one to many hyper alerts if: A.srcIP=B.srcIP & A.attacktype=B.attacktype And they are grouped to many to one hyper alert if:

B. Scenario Constructing Phase: The algorithms for mining frequent patterns in stream data are divided two main groups: algorithms based on landmark windows and algorithms based on sliding windows. Our approach to mining frequent structures is based on the Bit-AssocRule method [19]. Traditional Apriori algorithm is time-consuming method because of multiple scan the whole dataset. But Bit-AssocRule relies on the fast bit operations which improves the performance of the traditional Apriori. The bit representation of itemsets consume low storage and bit operations (logical And, logical SHIFT) improve the computational cost in finding frequent structures. Bit-AssocRule like traditional Apriori scans the full dataset several times. In this work, for generating frequent structures incrementally we apply some changes in Bit-AssocRule algorithm. We divide the stream of alerts to windows and extract frequent structures in these windows. With entering new transactions we use the left bit-shift operation to slide the window. We extract frequent structures in requested window. Our approach is easier to implement and does not need a large amount of expert knowledge. This is an important advantage of our algorithm. In following, the proposed algorithm for mining structure pattern is explained in detail. 1) Algorithm Outline In following we explain our proposed algorithm step by step. 1. Step 1: In this step, sets the current window variable (i) to

Until the number of generated transactions is less than of window size, each item of the incoming transactions is changed into bit representation called Bit(x). If the item X is in the ith transaction of current window, the ith bit of Bit(x) is set to be 1; otherwise, set to be 0. Step 2: when the current sliding window becomes full, A new transaction is appended to the current sliding window, and the oldest transaction is removed from the window. Left SHIFT operation is applied to remove oldest transaction from current window.

1012

Step 3: After sliding current window, the algorithm computes bit representation for each transaction. Then an effective pruning method is applied to improve the memory usage. An item x in the current window is dropped if sup(x) =0; sup () is the number of transactions in the data set which contain item. Step 4: the process of generating frequent itemsets is performed at a specific time which determined by administrator. The algorithm uses the AND operation to compute the support (the number of bit 1) of these candidates.

After setting parameters we can run the algorithm on dataset. The following sequences are detected as attack scenarios: as seen in Fig.3, the frequent structures extracted by proposed algorithm are the attack graphs for LLDOS1.0. Our extracted attack graphs are similar to Zhu and Ghorbani [3] and Sadoddin and Ghorbani [16].

IV.

EXPERIMENTS:

In this section we discuss our experimental results. We used the famous DARPA 2000 dataset to evaluate our algorithm [20]. DARPA 2000 is a well-known dataset which is created by the MIT Lincoln Laboratory. It consists of two multi-stage attack scenarios, namely LLDDOS1.0 and LLDOS2.0. Both attack scenarios include a Distributed Denial of Service (DDoS) attacks. We evaluate the performance of two phases: Preprocessing phase and scenario constructing phase. As mentioned before, In preprocessing phase, the aggregation is performed after normalization. In aggregation component, alerts are transformed to virtual graphs which the nodes denote several real hosts and vertex denotes the set of generalized alerts. In Fig. 2, we illustrate a graph which is generated after aggregation.

Figure 3.

Extracted attack scenarios

V.

CONCLUSIONS AND FUTURE WORK

In this paper, we proposed a framework for real-time correlation of alerts. The framework consists of two phase: preprocessing phase and scenario constructing phase. Stream of alerts is inserted continuously in the preprocessor phase. In this phase, alerts are converting to a unique format and then they are aggregated to reduce the number of alerts. In aggregation component, the graph structures are created from alerts based on source and destination IP address. With tracing these graphs, the transactions are generated. The stream of transactions is continuously received to the scenario constructing phase. In this phase, the frequent patterns are mined periodically by a frequent pattern mining technique. It should be noticed that proposed algorithm is incapable of discovering infrequent attacks. Since most of attacks have high frequency, the inability to detect the infrequent attacks is not a significant drawback. The results show that the system can efficiently extract the attack scenarios. The proposed system is able to operate realtime. Also it consumes low memory and its speed is high. For the future work, we are going to examine our proposed method with practical network data and to investigate graphmining methods to correlating alerts.

Figure 2.

virtual graph generated in aggregation component

For evaluating scenario constructing phase, we must first set input parameters: We set these parameters as follow: Window size = 20. There is a trade off in determining the window size. If a large window size is selected, the algorithm trend to have high computational complexity. A small window size causes algorithm to extract inaccurate result. Mining interval =10 min Minimum support=3

REFERENCES
[1] F.Amiri, H. Gharaee, A.R Enayati,"A Complete Operational Architecture of Alert Correlation', International Conference on Computational Aspects of Social Networks, CASoN 2011, Spain, IEEE 2011, pp. 243-248

1013

[2] P. Ning and D. Xu, "Learning attack strategies from intrusion alerts," ACM Conference on Computer and Communications Security, pp. 200-209, 2003. [3] B. Zhu and A.A. Ghorbani, "Alert Correlation for Extracting Attack Strategies," I. J. Network Security 3(3), pp. 244-258 , 2006. [4] O.M. Dain and R. K Cunningham, "Fusing a heterogeneous alert stream into scenarios," Proceedings of the 2001 ACM Workshop on Data Mining for Security Applications, pp. 1-13, 2001. [5] C. Michel and L. MÃ©, "Adele: an attack description language for knowledge-based intrusion detection," In Proceedings of the 16th international conference on Information security: Trusted information (IFIP/Sec'01), pp. 353-368, 2001. [6] S.T. Eckmann, G. Vigna, and R.A. Kemmerer, "Statl: An attack language for state-based intrusion detection," Proceedings of the 1st ACM Workshop on Intrusion Detection Systems (Athens, Greece), November 2000. [7] F. Cuppens and R. Ortalo. Lambda: "A language to model a database for detection of attacks," In Proceedings of the third international workshop on Recent Advances in Intrusion Detection (RAID) London, UK, SpringerVerlag, pp. 197Â­216, 2000. [8] W. Erhard, M. M. Gutzmann and H.M Libati, "Network traffic analysis and security monitoring UniMon," In Proceedings of the IEEE conference on high performance switching and routing, pp. 439-46, 2000 [9] P. Ning, Y. Cui and D.S Rever "techniques and tools for analyzing intrusion features" ACM transaction on Information and system security,vol.7,no 2,pp.274-318, 2004. [10] K. Park and H. Lee, "On the effectiveness of route-based packet filtering for distributed DoS attack prevention in power-law Internets," In Proceedings of the 2001 conference on applications, technologies, architectures, and protocols for computer communications, pp. 15Â­26, 2001. [11] P. Ning, D. X. Christopher, G. Healey, and R. S. Amant, "Building attack scenarios through integration of complementary alert correlation method," in Proceedings of the 11th Annual Network and Distributed System Security Symposium (NDSS), pp. 97Â­111, 2004.

[12] M. Panda and M. R. Patra, "Network intrusion detection using naive bayes," International Journal on Computer Science and Network Security, vol. 7, no. 12, pp. 258Â­263, 2007. [13] J. Chen, D. J. DeWitt, F. Tian and Y. Wang, "A scalable continuous query system for internet databases". In Proceedings of ACM SIGMOD, pp.379Â­390, 2000. [14] H. Ren, N. Stakhanova, and A. Ghorbani,"An online adaptive approach to alert correlation," In Proceedings of the 7th international conference on Detection of intrusions and malware, and vulnerability assessment, DIMVA'10, pp. 153Â­172, 2010. [15] A. Valdes and K. Skinner, "Adaptive, model-based monitoring for cyber attack detection," in Proc. of Third International Workshop on the Recent Advances in Intrusion Detection RAID , Toulouse, France, 2000. [16] R. Sadoddin and A. A. Ghorbani,"An incremental frequent structure mining framework for real-time alert correlation", Master's thesis, University of New Brunswick,2007. [17] D. Li, A. Zhang, Z. Li and L. Wang, "Discovering novel multistage strategies", 3rd international conference on Advanced Data Mining and Applications, pp. 45-56,2007 [18] H. Farhady, M. Amirhaeri and M. Khansari, "Alert Correlation and Prediction Using Data Mining and HMM", The ISC International Journal of Information Security,Vol. 3, No. 2, 2011. [19] T.Y. Lin, X. Hu and E. Louie," A Fast Association Rule Algorithm Based On Bitmap and Granular Computing", Journal of Applied Intelligence, Oct., 2003. [20] MIT Lincoln Laboratory. 2000 DARPA Intrusion Detection Scenario Specific Data Sets, 2000.

1014

