This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

1

Real-time multistep attack prediction based on
Hidden Markov Models
Pilar Holgado, Vı́ctor A. Villagrá, and Luis Vázquez
Abstract—A novel method based on the Hidden Markov Model is proposed to predict multistep attacks using IDS alerts. We consider
the hidden states as similar phases of a particular type of attack. As a result, it can be easily adapted to multistep attacks and foresee
the next steps of an attacker. To achieve this goal, a preliminary off-line training phase based on observations will be required. These
observations are obtained by matching the IDS alert information with a database previously built for this purpose using a clusterization
method from the CVE global database to avoid overfitting. The training model is performed using both unsupervised and supervised
algorithms. Once the training is completed and probability matrices are computed, the prediction module compute the best state
sequence based on the state probability for each step of the multistep attack in progress using the Viterbi and forward-backward
algorithms. The training model includes the mean number of alerts and the number of alerts in progress to assist in obtaining the final
attack probability. The model is analyzed for DDoS phases because it is a great problem in all Internet services. The proposed method
is validated into a virtual DDoS scenario using current vulnerabilities. The results proving the system’s ability to perform real-time
prediction.
Index Terms—Multistep attack prediction, hidden Markov model, distributed denial of service, proactive response, machine learning.

F

1

I NTRODUCTION

O

RGANIZATIONS are very concerned about potential cyberattacks on their systems. Increasingly, Distributed
Denial of Service (DDoS) is one of the most worrying
attacks. Either online platforms such as ’Pokemon Go’,
worldwide hosting companies such as OVH or Internet DNS
(Domain Name System) services providers such as Dyn
have suffered DDoS attacks at present [1] [2]. So, companies are requesting systems that facilitate the detection and
analysis of these types of threats based on several steps.
A combined attack scenario or multistep attack [3] is a set
of related malicious activities executed by the same attacker
to reach a specific goal. Six kinds of typical attack scenarios are defined in [4]: remote privilege escalating, worm,
botnet, phishing, web attack scenario, DDoS. For example,
on May 2017 a new ransomware known as WannaCry [5]
was detected. This threat spreads like a worm by leveraging
vulnerabilities that have been previously fixed. Microsoft
antimalware telemetry immediately detected it by using of
predictive modeling. This threats usually leverage social
engineering as primary attack vector. However, WannaCry's
spreading mechanism is borrowed from well-known public
SMB exploits, which armed this regular ransomware with
worm-like functionalities, through publicly available exploit
code for the patched SMB EternalBlue vulnerability, CVE2017-0145. Specifically, the threat arrives as a dropper Trojan
that has least three phases: search vulnerable computer,
exploit the SMB vulnerability and install WannaCry. In
general, a typical attack scenario consists of several re-

•

•

Pilar Holgado is with the Departamento de Ingenierı́a y Sistemas
Telemáticos, Universidad Politécnica de Madrid Avenida Complutense,
30, 28040, Madrid.
E-mail: pilarholgado@dit.upm.es
Vı́ctor Villagrá and Luis Vázquez are with Departamento de Ingenierı́a y
Sistemas Telemáticos, Universidad Politécnica de Madrid.

lated attack steps and the identification of these steps can
be used for an early attack prediction process based on
mathematical methods. Multistep attack prediction is an
important technique that enables to react before the network
is compromised by executing proactive responses.
This paper proposes the use a Hidden Markov Model
(HMM) [6] for each multistep attack scenario to predict
intrusions. HMMs have two stochastic processes: an underlying stochastic process that is not observable (it is hidden),
but which can be observed through another set of stochastic
processes that produce the sequence of observations.
In our model, the hidden stochastic process represents
a chain composed of the different attack steps, while the
alerts produced by attackers are the observations. Intrusion
detection systems (IDSs) [7] send the detected alerts to the
system. These alerts are formatted as an IDMEF structure
(Intrusion Detection Message Exchange Format) [8], a format that provides a common language to represent alerts
that may identify suspicious events. However, these IDS
alerts must be turned into observations that would match an
HMM-observable stochastic process. To transform these IDS
alerts into observations, we propose and define a specific
clusterization process, in which the observations contain a
tag and a severity. The tag will be inferred by matching the
significant words in the alert description with the words
occurrence frequency in the Common Vulnerabilities and
Exposures (CVE) reports [9]. The observation severity corresponds to the severity parameter of IDS alerts.
Moreover, we propose an extended HMM definition to
store the mean number of alerts for each state. This vector is
needed to calculate the final attack probability.
Once the parameters of this model are defined, HMM
needs a training process to learn the steps of the attack. After
that, HMM is ready to predict the state probability of the
multistep attack. Thus, we calculate the attack probability,

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

taking into account the phase of attack. In addition, it can
be used to detect or improve the false negatives or positives
ratio, discover new attack scenarios, or even aid in forensic
analysis after intrusion.
The early prediction of attacks can be used in different
security systems, such as a Dynamic Risk Management
System [10] or an Intrusion Response System (IRS) [11]. In
particular, the proposed prediction method can be included
in an autonomous IRS (AIRS) to trigger proactive responses
before the attack reaches the most dangerous final steps.
In the other case, a dynamic risk management system could
modify the risk level based on our prediction value and reinforce risk level according to current situation of a company.
To validate the proposed model, we have modeled
Markov chain for different similar attack steps of DDoS.
Despite other related works based only on DARPA datasets,
we have generated a virtual scenario to simulate a more
recent DDoS attack based on a NTP amplification attack.
The scenario is composed by an attacker, mail servers, NTP
(Network Time Protocol) servers and a victim machine. The
validation scenario is the following: The attacker gets access
to mail servers by using Buffer Overflow attack in order
to create a botnet. These servers make requests to multiple
NTP servers flooding the victim with network traffic.
The remainder of this paper is organized as follows.
Section 2 outlines the current state of the art in intrusion
prediction, correlation techniques and mathematical models
applied to prediction. The proposed architecture and their
modules are explained in section 3. Section 4 explains the
Hidden Markov Model and its parameters. Section 5 describes the training algorithms needed by the probability
matrices. Section 6 discusses the mathematical method that
determines each state probability of HMM chain about the
attack in progress and the equation for calculating final
attack probability. The generic implementation of different
Markov models for each multistep attack is described in
Section 7. Section 8 explains the proposed Markov model
for a DDoS scenario. Section 9 explains the proposed virtual
scenario using current vulnerabilities. Finally, Section 10 and
Section 11 conclude with the validation of this implementation and the final remarks obtained during this study.

2

R ELATED WORKS

Intrusion prediction and correlation techniques are key concepts in the intrusion prevention, detection and response
systems. At the present, some research has been carried out
on these topics.
On the one hand, multistep attack prediction based on
HMM is used in some related works. In most cases, these
studies define the HMM parameters in a similar way and
there are many differences respect to our proposal. The next
paragraphs explain these models in comparison with our
proposal.
The definition of the model in [12], [13], [14] and [15]
consider the hidden states as different risk states of the
system. Then, these models use only one HMM model for
any attack type and focusing only on the global risk level
of the organization associated with all arrived alerts. In
contrast, we consider the hidden states as similar phases of
a particular type of attack as in [4]. Therefore, our proposed

2

model is trained for each attack type; and thus, it can be
easily adapted to any multistep attack and foresee its next
steps.
In all cases, HMM observations are collected from IDSs.
According to referenced works based on risk states, HMM
observations correspond to the severity parameter or a
severity function of an IDS alert. However, our proposal
included vulnerability definitions to increase accuracy in the
prediction model. Specifically, we cluster alerts with similar
CVE name parameter included in CVE reports. Thus, we
avoid overfitting to a specific alert and decrease the number
of observations used by training the HMMs. Therefore, the
states prediction are not affected by unknowns CVE and the
HMM is improved in run-time performance.
Probability matrices are proposed in [14] but it is not
indicated how they obtained the different values of the
matrices. In [12] and [13], K. Haslum et al. train matrices
with simulated datasets. Kholidy et al. [15] also proposes the
use of a model based on HMM; however, it does not specify
how to train the model, because it uses random values for
the transition matrix. Lastly, X. Zan et. al. [4] do not include
any probability value in their work. In contrast, we indicate
a specific subset of algorithms and alerts sequences used
to train the HMM in study with the purpose of getting the
probability matrices needed for prediction.
Finally, the theoretical proposal in [4] did not provide
any results. Other works only focus their results on representing the predictive capacity against alert sequences used
in the training phase. In addition, in all these cases the chain
represents the overall risk and can not predict the attack
type in progress. In particular, we provide some run-time
performance results of the proposed prediction system and
demonstrate the applicability of our proposal in unknown
scenarios to the training phase.
In conclusion, our methodology can provide greater
accuracy than methods in previous works, because we are
able to predict the steps of a specific attack by training
the HMM with similar states. Also, our model provides
versatility against unknown alerts during the training phase
due to the observation clustering process from generic CVE
tags.
From another point of view, S. Zonouz et. al. [16] propose
a security-oriented cyber-physical state estimation (SCPSE)
system, which identifies the compromised hosts and the
maliciously modified set of measurements obtained from
sensors. The focus of their work is on maliciously altered
data and SCPSE is agnostic to the specific attack, contrary
to our proposal. SCPSE begins automatically generates an
attack graph (AGT) in offline mode. The state transitions in
an AGT encode all possible attack paths that an attacker can
traverse by vulnerability exploitations of the hosts in a specific network topology unlike our model. SCPSE analyzes
attacks based on the attack graph, and then probabilistically determines the hosts and sensor measurements have
been compromised. In their proposal, each state transition
represents a privilege escalation that is achieved through
a vulnerability exploitation, otherwise any type of attack
phase can be represented as a state of a specific HMM in
our model. The AGT is converted to a HMM, which is used
to determine the host path traversed by the attacker. Thus,
execution time increases as the network grow, hence it not

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

is useful for real-time prediction.
On the other hand, intrusion prediction and correlation
methods based on other mathematical algorithms are analyzed in the nexts paragraphs.
Hidden Colored Petri-Net (HCPN) is proposed in [17] to
predict intruder’s next goal. It uses mathematical modeling
for attack predictions, similar to our proposal. However,
their solution have performance problems due to the fact
that preconditions and postconditions significantly grow as
actions are added into HCPN. The action set is based on
different IDS alert names from a concrete attack scenario
and is specific to each IDS. Our proposal categorises the
actions of any attacker and uses standard formats for the
representation of alerts and vulnerabilities.
Zonouz et al. [18] proposes the use of Markov processes
to create an Automated Intrusion Response System. Specifically, they apply Partially Observable Competitive Markov
Decision Process (POMDP) with a two-player Stackelberg
stochastic game to decide the best response. Unlike us, their
approach does not attempt to predict attack before they
occur, i.e. they do not perform proactive responses to the
attack.
Detection of DDoS attack using mathematical modeling
is proposed in [19]. In particular, Katkar et al. implements
signature-based IDS using Naive Bayesian classifiers but
their work lack of prediction of the attack progress in a
DDoS multistep attack.
Seraj et al. [20] defines a prediction model as an objectoriented model derived from an attack graph built after
network recognition. This work uses a dataset based on
different resources such as IDS database, National Vulnerabilities Database (NVD) and an attack graph datasource.
The prediction process forecasts the next step of the attacker
and his attack scenario, in a similar way to our proposed
prediction model but, the weight of every state are assigned
manually and is based on the exploited vulnerability. Unlike
that, we use a training algorithm for HMM models which
calculates the Markov chain weights and so we predict
the attacker steps and attack scenarios. Their proposal is
theoretical and there are no results in their work, just a proof
of concept without multistep attack scenarios.
Finite States Machine (FSM) is used in [21] for multistep
attacks in a response system. Specifically, they use FSM as
a part of the detection component and it only sends an
alert after each state change in the FSM without predict
the evolution of the attack in each phase. Also, the authors
propose to assign a weight to each state, but they do not
define states or weights for any multistep attack scenario. In
contrast, we propose a probabilistic predictive model, train
its parameters and show test results.Thank to that, we are
able to demonstrate the feasibility of our multistep attack
prediction model with evidences.
H. Du et. al. [22] propose to project the likely future
targets of ongoing multistage attacks from the last attacked
machine. First of all, this work evaluates the capabilities of
the attacker based on the services that have already been
attacked and on the exposed vulnerabilities of the objective.
Then generates Fuzzy inference rules from VLMM (variablelength Markov model) estimates proposed in [23]. These
estimates are calculated based on a suffix tree with symbols
obtained from a set of XML alert tags reported from IDSs.

3

Note that the richness of the fields of an alert depends
on IDS types and differs from our proposal that our CVE
cluster is independent of the IDS. Futhermore, D.S. Fava et.
al. [23] propose off-line and real-time suffix tree training.
One implementation issue is that the real-time system will
eventually run out of resources (memory) if it is indefinitely
fed with new attack tracks. The offline development allows
to analyze the results using a limited suffix tree to different
symbols based on the same model trained. However we
proposed clustered alerts based on CVE name parameter in
order to adapt us to unknown alerts in the training phase.
Also, we could implement at real-time training phase for
include news scenarios to the model.
There are several works that implement functions to
cluster and correlate alerts as a cooperative module for IDS
and thus, to reduce the number of alerts transmitted. The
Aggregation and Correlation Component (ACC) propose in
[25] creates relationships between related events according
to explicit Prolog rules. When an event occurs, ACC verifies
that the current alert is a consequence of some previously
received. A similar proposal [26] reveal attack strategies
based on correlation graphs. Their method identifies the
prerequisites as the existence of a vulnerable service and the
consequences as the discovery of vulnerable services. The
main problem is manually specifying the correlation rules.
F. Cuppens et. al. [27] automatically generate correlation
rules after an offline process.The result of the correlation
is a set of candidate plans that correspond to the intrusion
under execution. These previous works not able to predict
the attacker's next step probability and model a specific
network, in contrast with our proposal. C. Liu et. al. [24]
implement a Prolog reasoning based model to automate
multi-host, multi-stage vulnerability analysis. Specifically,
they built evidence graphs extending a reasoning system
MulVAL. Unlike us, their aim is automating the forensics
analysis of a specific network, not to predict multi-step
attack scenarios.

3

A RCHITECTURE

Fig. 1 represents the basic architecture proposed for intrusion prediction. The following paragraphs explain each
module in more detail.
The Multistep Attack files are pcap (packet capture) traces
corresponding to the attack phases of known intrusions.
These files are needed for training different HMMs.
The Off-line Training Module represents the training phase
of the parameters of the proposed HMM based on observations of different attacks. This module will be explained in
more detail in following sections.
The HMM configuration files represent the parameters of
the Hidden Markov Model after training with the different
patterns of each intrusion. These files include probability
matrices and the number of states of the Markov chain. This
information is needed in the Prediction Module to assess
each intrusion type.
The Prediction Module applies an HMM algorithms to the
sequence of alerts arriving in the system, using an HMM
configuration file. As a result, we will learn the sequence
of states the attack goes through and calculate the attack
probability. It will be described in the following sections.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

4

Fig. 1: Architecture
Attack probability can be applied in multiple contexts,
such as Proactive Response Systems or Dynamic Risk Management systems. The Proactive Processing Module can include any of these systems.
The Security Database stores all CVE names and their
relationship with the tags selected from vulnerability descriptions. This is explained in more detail in subsection 8.1.
The Alerts Coordination Module performs both aggregation and filtering of alerts from different IDSs. It also determines whether the alert belongs to an attack in progress
or indicates a new attack. Furthermore, this module could
reduce the false positive alerts as minimum as possible
based on the IDS confidence level. This module will be
designed in future work.

4

2)

S = {s1 , s2 , . . . , sN }
3)

An HMM [6] can be described as two stochastic processes:
1)

2)

A hidden process, which is represented by random
variable x(t) and corresponds to the states of the
Markov chain.
An observation process, which is represented by
random variable y(t) and corresponds to alerts sent
from the IDSs.

In our case, t represents discrete time, corresponding to
the arrival of alerts from the IDSs.
Formally, a discrete first-order HMM is defined by λ =
(Σ, S, A, Q, π). These parameters, which describe HMMs
and their correspondence to our purposes, are explained
below:
1)

Σ represents possible observations based on the IDS
alerts and CVE report.
Σ = {v1 , v2 , . . . , vM }

(1)

(3)

Q is an observation probability matrix, which is
composed of probability vectors (denoted by qi )
for each state. This vector indicates the observation
probability of different alerts if the attack is in a
particular state. In equation (4), i represents a state
of the set S and j corresponds to an observation of
the set Σ.

Q = {{qij }N xM |qi = {q1 , q2 , . . . , qM }}
5)

(2)

A is the transition probability matrix describing the
transitions between states of set S, according to
alerts from IDSs. Due to the fact that we need to
know the transition probability from each state to
the rest, we provide an NxN transition probability
matrix. As equation (3) shows, i and j represent a
state of the set S.

A = {{aij }N xN |aij = P (xt = j|xt−1 = i)}
4)

H IDDEN M ARKOV MODEL DEFINITION

S is the set of HMM states corresponding to similar
attack steps.

(4)

π is the initial distribution vector witch indicates the
probability of the initial state of the intrusion, i.e.,
the probability that the intrusion can start in each
state.
π = {π1 , π2 , . . . , πN }

(5)

The proposed prediction system trains an HMM for a
given intrusion type. Thus, we need to adjust the parameters
of HMM for each intrusion type. As a result, we will create
a model λk for each multistep attack and obtain greater

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

5

accuracy in the calculated probability. These models are
stored in an HMM configuration file (see Fig. 1).
Also, we propose to include a vector of mean number of
alerts in the HMM expressed by H = {h1 , h2 , . . . , hN }. hi
representing the mean number of alerts for state i for each
multistep attack. As a result, we have an extended formal
HMM definition denoted by λk = (Σ, S, A, Q, π, H). This
vector is needed to calculate the final attack probability (see
section 6.3).
The observations from IDSs of a particular multistep
attack are represented by the observation sequence O =
{o1 , o2 , . . . , oT }, where each component ot of the sequence
is a symbol of Σ.
There are three basic problems related to HMMs [6]:
Problem 1 Efficiently calculating the observation sequence
probability, P (O|λ), using the Forward-Backward algorithm
[28]. Problem 2 Finding the most likely path of states given
the model and observation sequence, using the Viterbi algorithm. Problem 3 Setting parameters A, Q, and π to maximise
P (O|λ).
For our purposes, it is necessary to perform a preliminary offline training process corresponding to Problem 3,
to find the best states sequence related to Problem 2, and
to calculate probabilities based on Viterbi and ForwardBackward algorithms (Problem 1 and 2).

5

T RAINING A LGORITHMS

The most important issue involving HMMs is adjusting
parameters A and Q to maximise the probability of the
observation sequence, given the model.
There is no analytical form for setting values in a transition probability matrix. As a result, there are different unsupervised training algorithms: Baum-Welch, EM (Expectation
Maximisation), GEM (Generalised EM), and the gradient
descent method.
Baum-Welch training is the most widely used algorithm,
and is a particular case of the expectation maximisation
method applied to HMM training.
Furthermore, if there are samples available of a specific
attack, it is possible to perform supervised training using
statistical methods.
In our case, we apply supervised and unsupervised
algorithms to train the HMM, and we perform comparisons
of the results in order to select the best method to train the
Markov Model for multistep attack prediction.
Unsupervised training

Formally, Baum-Welch algorithm defines the Baum’s auxiliary function:

S(λk , λk ) =

X

P (S|O, λk ) · log[P (O, S|λk )]

(6)

Q

This function depends on the previous parameters of the
model (λk ) and the new parameters (λk ) obtained from the
algorithm.
In order to describe the procedure for reestimation, i.e.
the iterative update and improvement of HMM parameters,
we define:

(7)

ξt (i, j) = P (xt = si , x(t+1) = sj |O, λk )

(8)

γt (i) and ξt (i, j) are calculated from definitions of the
forward and backward variables [6]. From γt (i) we can
obtain the expected number of transitions made from si and
the expected number of times in state i. Moreover, we can
calculate the expected number of transitions from si to sj in
the same manner.
Using the previous formulas, we can create a method
to reestimate the HMM parameters. A set of reasonable
reestimation formulas for A and Q are:
PT −1
ξt (i, j)
aij = Pt=1
(9)
T −1
t=1 γt (i)
PT
t=1,ot =vh γt (j)
(10)
qj (h) =
PT
t=1 γt (j)
Based on the above procedure, if we iteratively use λk
instead of λk and we repeat the reestimation calculation,
we can improve the probability that the model will match
observation O.
The final result of this reassess ment procedure is called
a maximum likelihood estimate of the HMM. Expectation
Maximisation theory indicates that maximizing function (6)
leads to increased likelihood, i.e.:

max[S(λk , λk )] ⇒ P (O|λk ) ≥ P (O|λk )

(11)

λ

The likelihood function converges to a critical point. It
should be noted that the forward-backward algorithm leads
to a local maximum only.
The reestimation formulas, (9) and (10), can be derived
directly by maximizing Baum’s auxiliary function using
standard constrained optimisation techniques (Lagrange
multipliers). Moreover, it can be interpreted as an implementation of the EM algorithm of statistics [29], in which the
expectation step is the calculation of the Baum’s auxiliary
function, and the modification step is the maximisation.
Thus, the Baum-Welch reestimation equations are essentially identical to the EM steps for this particular problem.
One of the most efficient versions of the Baum-Welch
algorithm is called the checkpointing algorithm, which runs
in O(N logT ) memory and O(N 2 T logT ) time.
5.2

5.1

γt (i) = P (xt = si |O, λk )

Supervised training

Supervised training estimates both transition and observation probabilities from samples of multistep attacks.
Specifically, the method is based on counting frequencies; that is, we count the transitions and emissions of each
observation in each HMM state.

a(i, j)
aij = PN
k=0 a(i, k)

(12)

e(j, vh )
qj (h) = PM
(13)
k=0 e(j, vk )
Equation (12) represents transition probability after
counting the frequencies of transition between states i and j.
In (13), the observation of vh at state j is calculated.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

6

6

P REDICTION VALUES

We use the Viterbi algorithm to compute the best state path
for a particular alert observation from IDS. This algorithm
is applied to each configuration file calculated in offline
training. Thus, we can select the intrusion type and attack
phase represented by state chain S.
Viterbi algorithm selects the best state path based on the
state probability for each step in the Markov chain. This
state probability can be used to calculate the final attack
probability. In the next subsection, we explain the proposed
method in more detail.
6.1

State sequence

Our objective is to calculate the attack probability given a
model λi . For this, we should first know what state the
system is in after the last observation. One possibility is
calculating the probability of being in a state near the end
of the chain, to react before the system is compromised. For
this, we calculate the most likely state for each observation
based on the conditional probability (7):

xt = max [γt (i)], 1 ≤ t ≤ T
1≤i≤N

(14)

However, if the HMM model has state transitions that
have zero probability, this states sequence could not be
correct because (14) simply determines the most likely state
at any time, without considering the probability that the
state sequence will occur.
As a solution, we use the Viterbi algorithm to find the
single best state sequence, X = {x1 , x2 , . . . , xT }, for the
given observation sequence O = {o1 , o2 , . . . , oT } from an
IDS. The best score along a single path at time t is defined
by δt (i), which considers the first t observations and ends in
state si :

δt (i) =

max

x1 ,...,xt−1

P (x1 . . . xt = si , o1 . . . ot |λi )

(15)

The key of the Viterbi algorithm is that if we know δt (i),
by induction:

δt+1 (i) = [max δt (i) · aij ] · qj (ot+1 )
i

State probability

The probability of being in each state of an intrusion is
calculated based on Viterbi algorithm. Specifically, we apply
the probability of being in si at time t, given the observation
sequence O, and the model λk (7). This probability can
be expressed simply in terms of the fordward-backward
variables [28]:

γt (i) =

αt (i) · βt (i)
αt (i) · βt (i)
= PN
P (O|λk )
i=0 αt (i) · βt (i)

αt (i) = P ({O1 , O2 , . . . , Ot }, xt = si |λk )

(17)

αt (i) accounts for the partial observation sequence
{O1 , O2 , . . . , Ot } and state si at t, while βt (i) accounts for the remainder of the observation sequence
{O(t+1) , O(t+2) , . . . , OT }.

(18)

The computation of the forward variable is showed in
[6] and it requires the order of N 2 · T calculations.
In a similar manner, we can consider a backward variable βt (i) defined as

βt (i) = P ({Ot+1 , Ot+2 , . . . , OT }, xt = si |λk )

(19)

Again, the computation of backward variable requires
the order of N 2 · T calculations. See [6] for more details.
6.3

Attack probability

Once we calculate the state probability based on the observation sequence of the attack in progress, we can predict the
probability that the attacker achieves his goal, i.e., reach the
final state of the Markov chain.
In this paper, we calculate the attack probability based on
the number of alerts triggered by the IDSs and our predicted
attack states X = {x1 , x2 , . . . , xT } of the attack in progress.
Before, we need to store the mean number of alerts for each
state in the training phase.
Specifically, we train the model λk for each multi-step attack and calculate the mean number of alerts using training
multistep attack datasets. These values are stored in the H
vector of the HMM.
After the training, the HMM is prepared to calculate the
attack probability Pintrusion :
PE
maxi [P (xt = si |O, λk )]
Pintrusion = t=0
(20)
E
Where E is calculated using the function f (ej ):
(
hj
if j ≥ T and hj > cj
f (ej ) =
(21)
cj
else

(16)

Finally, the Viterbi algorithm calculates the best state
sequence. It has a complexity of O(T · N 2 ). In [30], it is
explained in more detail.
6.2

Considering one fixed state sequence X
=
{x1 , x2 , . . . , xT }. The Fordward-Backward procedure
consider the forward variable αt (i) defined as

E=

N
X

f (ej )

(22)

j=0

hj is the mean number of alerts for state j and cj is
the counter of number of alerts for the attack in progress
detected in each state (C = {c1 , c2 , . . . , cT }). The values of
the counter are dynamic for adjusting the number of alerts
to the current intrusion. The hj > cj condition is used as
a correction factor to a previous state returns, for example
due to proactive responses.

7

I MPLEMENTATION

This section details the application and implementation of
the architecture (Fig. 1) for different multistep attacks. Each
HMM model have a HMM configuration file associated to
store his parameters (λk )
In the next subsections, we describe the development
process to build an HMM for each type of multistep attack
taking into account the extended formal definition λk =
(Σ, S, A, Q, π, H).

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

7.1

Observations

A set of observations, Σ = {v1 , v2 , . . . , vM }, represents possible observations that an IDS can report. We have clustered
all possible alerts in a set of tags based on the frequency of
occurrence of different words in the CVE reports [9]. We use
these tags to avoid overfitting in our HMM models and to
ensure that the training phase covers any alert associated to
specific multistep attack even though may have few sample
attack scenarios to training the model.

7

8.1

Observations

We have clustered all possible alerts perform a previous
analysis based on the description of all vulnerabilities reported by a CVE name. The process contains the following
steps:
1)
2)

3)
7.2

States of the Markov chains

different multistep attacks need a Markov chain to represent
the states of each type of attack. These chains are built
selecting the number of HMM states correspond with the
similar phases of each intrusion. The S parameter in the
HMMs is composed with these states.
The Fig. 2 shows a example of three multistep attacks
(intrusion A, intrusion B and intrusion N) with four, three
and five states respectively. Each intrusion have a different
HMM model (λA , λB and λC respectively). On the right
side of this figure, we represent all Markov chains as an
attack graph for display from administrator interface. In this
example Step−A1 and Step−B1 , Step−B3 and Step−N4 ,
and Step − A4 and Step − N5 are the same state.

7.3

Probability matrices and vectors

Once the Multistep attack files and database have been obtained, we can complete the offline training process. We
train different Markov models while considering the Multistep attack files of the same intrusion. This training phase
is based on algorithms that obtains probability matrices,
and vectors. The inputs of the training algorithms are the
observations from IDS alerts. These observations (O) have
been generated from the datasets of multistep attacks. As
a result, we obtain several HMM configuration files, one for
each intrusion type.
Both matrices (A and Q) and the initial distribution
vector (π ) must be obtained by training the model for each
multistep attack being studied. To achieve this, we have
proposed supervised and unsupervised algorithms in which
our HMM learns from multistep attacks, as explained in
Section 5.
The mean number of alerts in each state is trained in
supervised mode based on the average number of alerts
with CVE name in each state.

8

4)

DD O S MULTISTEP ATTACK MODEL

This section details the HMM model for a given scenario:
a multistep DDoS attack.The Off-line training module and
Prediction Module have been developed in the Java language.
The HMMs are built using the jahmm library [31].
In the next subsections, we describe the configuration
of the developed HMM, taking into account the extended
formal definition λddos = (Σ, S, A, Q, π, H).

The CVE data is downloaded in XML (eXtensible
Markup Language) format from official website [9].
This XML file is parsed using the Java SAX API,
which extracts and stores the CVE names and their
descriptions.
All words in these descriptions are counted using
our C# custom application. As a result, we obtain a
list of words and their number of occurrences in the
description parameter. We select the words with the
number of necessary occurrences by iterating from
the largest one counted in the previous process. So,
all CVE descriptions contain at least one of these
words.
Finally, we cluster terms by considering labels composed of several of these words with cybersecurity
expressions. The results are the tags: ’Denial of Service’, ’Buffer Overflow’, ’Cross-site Scripting’, ’Remote Attackers’, ’Remote Users’, and ’Information’.
The tags ’Remote Attackers’ and ’Remote Users’
actually represent a very similar concept; however,
in the CVE description, they are different because
the second term refers to valid users accessing a
system remotely. Moreover, we have assigned a
number value to each of the tags indicating the degree of specificity for cases in which a description is
clustered in several tags. In this case, ’Information’,
’Remote Attacker’, and ’Remote User’ are considered less specific than ’Cross-site Scripting’. ’Buffer
Overflow’ is considered the most specific of all, after
’Denial of Service’. This information is stored in the
Security database.

The Security DB store these tags associated with IDS
alerts in persistent form. This database consists of two
tables and they must be updated when a new vulnerability
appears. The first table contains the tags obtained after the
clusterization of terms from the CVE report, and the second
table associates each CVE name with its corresponding tag.
Finally, we create the observations of the set Σ based on
these tags and the severity of alerts (’info’, ’low’, ’medium’,
and ’high’; the ’info’ severity is discarded because these
alerts only provide advisories).
8.2

DDoS attack states

The selection of the HMM states for DDoS is based on the
phases of the LLDDOS1.0 attack scenario in the DARPA
(Defense Advanced Research Projects Agency) 2000 dataset
[32]. The five phases of the attack scenario are:
1)
2)
3)
4)

IPsweep of the network from a remote site.
Probe of live IP’s to look for the sadmind daemon
running on Solaris hosts.
Breakins via the sadmind vulnerability, both successful and unsuccessful, on those hosts.
Installation of the trojan mstream DDoS software on
three hosts.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

Step-­‐A1	  

HMM
configuration
file (intrusion
B)

Step-­‐B1	  

HMM
configuration
file (intrusion
N)

Step-­‐N1	  

Step-­‐A2	  

Step-­‐B2	  

Step-­‐N2	  

Step-­‐A3	  

StepA4	  

Step-­‐B3	  

Step-­‐N3	  

Step-­‐N4	  

Step-­‐A2	  

Merging similar states

HMM
configuration
file (intrusion
A)

8

Step-­‐A3	  

Step-­‐
A4N5	  

Step-­‐
A1B1	  

Step-­‐N5	  

Step-­‐N1	  

Step-­‐B2	  

Step-­‐
B3N4	  

Step-­‐N2	  

Step-­‐N3	  

Fig. 2: Multistep attacks example
Step

Name

Time

Goal

1

IPsweep

15:51:36.142272 - 15:52:00.818096

The attacker sends ICMP echo-requests in this sweep and listens for ICMP
echo-replies to determine which hosts are up.

2

Sadmind ping 16:08:07.354091 - 16:18:05.548183 The hosts discovered in the previous step are probed to determine which hosts
are running the sadmind remote administration tool. This tells the attacker
which hosts might be vulnerable to the exploit that he/she has.

3

Break into

16:33:10.611612 - 16:35:01.720586 The attacker then tries to break into the hosts found to be running the sadmind
service in the previous step. Breakins via the sadmind vulnerability.

4

Installation

16:50:01.749301- 16:50:54.049012

Installation of the trojan mstream DDoS software on three hosts.

5

Launch

17:26:15.437497

Launching the DDoS.

TABLE 1: Five steps of LLDOS1.0 DARPA Attack Scenario
Step

Name

Snort alerts

CVE

Severity

1

IPsweep

Protocol-icmp ping

No CVE name

-

2

Sadmind ping

Protocol-RCP Solaris UDP portamap sadmin port query request attempt
Protocol-RPC portmap sadmind request UDP attempt
Protocol-RPC sadmind UDP ping

CVE 2003-0722
CVE 1999-0977
No CVE name

Medium
Low
-

3

Break into

Protocol-RPC sadmind UDP netmgt proc service client-domain overflow attempt

CVE 1999-0977

High

4

Installation

Protocol-services rsh root

No CVE name

-

5

Launch

Protocol-SNMP request UDP

CVE 2002-0013
CVE 2002-0012

Medium
Medium

TABLE 2: Snort alert and CVE name reported in each step of LLDOS1.0 DARPA Attack Scenario
5)

Launching the DDoS.

The phases of the attack are described in more detail
in TABLE 1. The time of each step is obtained using the
Wireshark application with the pcap file of each phase. [14]
provides the goal of each phase of the attack.
We use Snort [33] as the Network IDS in our test case.
In addition, our solution is based on the CVE vulnerabilities
report; that is, we can only consider alerts tagged with a
CVE name.
TABLE 2 shows a sample of some alerts reported by
the Snort IDS in each phase and their CVE names for
LLDDOS1.0 pcap traces.
In our approach, the CVE name is a mandatory field.
For this reason, we can only consider three LLDDOS1.0
attack phases (step 2: Sadmind ping, step 3: Break into, and
step 5: Launch). In a general DDoS attack, these phases
can be considered an intrusion attempt, a compromised
system, and a denial of service, which respectively represent

Intrusion	  
a+empt	  

Buﬀer	  
Overﬂow	  

Denial	  of	  
Service	  

Fig. 3: States of Markov chain for DDoS attack

steps 2, 3, and 5 of this DARPA dataset. But, we will only
train the model with Buffer Overflow attacks to gain access
to remote systems. So, the Markov model can exclusively
predict this type of vulnerabilities corresponding to phase
2. As a result, the states and transitions of the Markov chain
are represented in Fig. 3.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

8.3

9

Probability matrices and vectors

In particular, we have analysed two multistep attack scenarios included in the DARPA 2000 dataset because it is
the unique reference dataset with traces separated in attack
steps needed for the supervised training.
On the one hand, the implementation of Baum-Welch
algorithm with scaling has been applied for unsupervised
training. This algorithm has been implemented in Java using
the jahmm library. On the other hand, supervised learning
was not included in this library, so we have implemented it
in Java.
In the following subsections, we indicate the values of
the Markov model definition after training the proposed
chain with unsupervised and supervised training methods.
We will adjust A, Q, and π to maximise the probability of the
test sequences using both training methods, and the vector
H trained only in supervised mode.
8.3.1 Unsupervised training
The Baum-Welch algorithm with scaling has been applied
in an initial Markov model created randomly. This learning can be applied in long observation sequences without
generating underflows.
The algorithm is executed multiple times and returns the
initial distribution vector, the transition probability matrix,
and the observation probability matrix. After that, we apply
a method to measure the distance between two HMMs,
using the Kullback-Leibler distance [34]. This distance is
used to stop the learning process when teaching is not
producing any appreciable improvement in the HMM, i.e.,
the model converges.
We run several iterations and distances until the algorithm obtains similar results and therefore the model
converges.
The values obtained after training the HMM are the
following: the initial distribution vector, (23), indicates the
initial state of the attack. In this case, the first state (intrusion
attempt) has a 100% probability of being the initial state.

π=( 1 0 0 )

(23)

The transition probability matrix, (24), describes the
transitions between states of set S, according to the state
chain in Fig. 3. For example, the probability of staying in the
intrusion attempt state is 0,985.


0, 985 0, 007 0, 007
0, 5
0, 5 
A= 0
(24)
0
0, 5
0, 5
The observation probability matrix is structured by a
probability vector for each state. In TABLE 3 we represent
each vector, taking into account the observations with relevant values.
8.3.2 Supervised training
We applied supervised training to estimate transition and
emission probabilities from statistical methods.
The result obtained for the initial distribution vector is
shown in (25). The first state of the DDoS attack will be an
intrusion attempt with a probability of 0,348.

π = ( 0, 348 0, 238 0, 414 )

(25)

The transitions between states of the chain represented
in Fig. 3 are ordered according to the matrix shown in (26).
For example, the probability of remaining in the denial of
service state is 0,979. This value is normal because the model
learns using only the steps of the attack, without considering
possible responses.


0, 974 0, 013 0, 013
A =  0, 010 0, 962 0, 028 
(26)
0, 011 0, 011 0, 978
TABLE 3 shows the vectors of observation probability
for each proposed state in the Fig. 3, taking into account
observations with relevant values.
The values of mean number of alerts with CVE number
in the DDoS attack scenarios are indicated below.

H = ( 79 27 47 )

9

(27)

E VALUATION : DD O S ATTACK SCENARIO

To evaluate the proposed model with additional and more
current attacks, a virtual scenario, showed in Fig. 4 , has
been created and deployed.
The first step involves the creation of a botnet. By means
of a Buffer Overflow attack, access is granted to several
email servers. This attack could be replaced by any other
remote access attack, i.e. exploiting Shellshock vulnerability.
But, the model has been customized only with any Buffer
Overflow attack in the training phase.
Once the email servers have been compromised, a malicious script is executed. The Markov model could detect any
DoS (Denial of Service) vulnerability registered in the CVE
report. In this test, the script triggers specific requests to several NTP servers. These servers reply with a large response
and their traffic cause DDoS on the victim machine.
The virtual scenario is deployed with VNX (Virtual Networks over linuX) [35]. The simulated DDoS attack includes
the phase 2 and the phase 3 of the model (Fig. 3):
9.1

Buffer overflow

The aim of the attacker is running remote code. In this
case, the attacker uses GHOST vulnerability (CVE 20150235) for this purpose. GHOST is considered to be critical
because attackers could exploit it to silently gain complete
control of a targeted Linux system without having any prior
knowledge of system credentials.
The GHOST vulnerability can be triggered both locally
and remotely via all the gethostbyname*() functions in the
glibc library that is a core part of the Linux operating
system. This problem originates from a heap-based buffer
overflow found in the nss hostname digits dots() function
in glibc library. This function is especially invoked by
the gethostbyname and gethostbyname2() function calls. A remote attacker able to make an application call to either of
these functions could use this flaw to execute arbitrary code
with the permissions of the user running the application.
The first vulnerable version of the GNU C Library affected by this is glibc-2.2, released on November 10, 2000.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

10

States

Observations

Intrusion attempt

Buffer overflow

Denial of service

Severity Supervised Unsupervised Supervised Unsupervised Supervised Unsupervised

Tag
Information

Medium

0

0

0

0,011

0,011

0,011

Remote users

Medium

0

0

0

0,065

0,064

0,065

Medium

0,962

0,832

0,667

0

0

0

High

0

0

0

0,379

0,372

0,379

Low

0,038

0,022

0

0

0

0

High

0

0,139

0,333

0,013

0,021

0,013

Low

0

0

0

0,022

0,021

0,022

Medium

0

0

0

0,498

0,489

0,498

High

0

0,006

0

0,012

0,021

0,012

Remote attackers
Buffer overflow

Denial of service

TABLE 3: Observations vector with supervised and unsupervised learning
Exim&servers&

A5acker&

GHOST&

Compromise&systems&to&be&
slaves&of&the&botnet&

NTP&servers&

Monlist&
Reply&

Monlist&
Request&

Run&C&C&and&NTP&a5ack&

Victim

Distributed&Denial&of&Service&
via&NTP&ampliﬁcaHon&

Fig. 4: Virtual scenario schema
The bug was fixed on May 21, 2013 (between the releases
of glibc-2.17 and glibc-2.18). Unfortunately, it was not recognized as a security threat, and as a result, most stable and
long-term-support distributions remain exposed, including
Debian 7 (wheezy), Red Hat Enterprise Linux 6 & 7, CentOS
6 & 7, and Ubuntu 12.04.
There are software initiating network connections, log
processing or mail/spam filtering using gethostbyname().The
scenario presented in this paper, includes the usage of vulnerable Ubuntu 12.04 machines with EGLIBC (Embedded
GLIBC) 2.15-0ubuntu10.3 version and Exim 4.77 mail server.
The attacker is a Kali 1.1.0 machine with an additional ghost
exploit added to the Metasploit Framework. GHOST exploit
was implemented by Qualys, Inc. [36].
9.2

Denial of service

NTP amplification attack is used for DDoS in the victim
machine. The usage of monitoring function of NTP servers
(monlist) with versions before 4.2.7p26 or misconfigured,
provides the amplification effect of the reply. The monlist
query obtains the list of the latest machines that have
interacted with the server. Obviously, this reply can be
quite large in relation to the query. This functionality has
been considered as a vulnerability of the protocol and is
associated with the CVE-2013-5211 [1]. Two steps compose
this attack:
9.2.1 IP spoofing
Communication between a client and a NTP server is based
on UDP (User Datagram Protocol). The UDP features allow

the modification of the IP addresses in a traffic flow and to
keep its validity.
The attacker builds NTP query and replaces the source
IP address in the datagrams with the target IP. So all replies
go to the victim machine (reflection).
9.2.2 Monlist query
Taking advantage of vulnerable NTP servers, it is possible
to get a reply much larger than the query (Amplify). Also,
several monlist queries are triggered at all NTP servers of
the virtual scenario to reflect a high volume of traffic to the
victim.

10

E VALUATION : P REDICTION SYSTEM

In the first case, we analyze both training method using
the state sequence obtained from LLDDOS1.0 dataset after
apply our prediction model. Furthermore, we validate the
proposed design with the alerts included in Multistep attack
files. Also, we verify the effectiveness of the trained model
with more current DDoS attacks by using of the virtual
network explained in section VIII. In this way, we assess
the applicability of the proposed model with unknown
attacks. Finally, we calculate performance measurements to
demonstrate that our model is feasible in real-time.
IDMEF alerts are obtained from the Snort IDS by applying the Barnyard2 tool to the alerts. These tools have been
installed in Ubuntu 14.04.
All the results have been obtained locally in a computer
equipped with an Intel Quad Core i5-3470 processor at 3,20
GHz with 16 GB RAM and 500 GB of disk memory.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

10.1

Training algorithms validation

The Viterbi algorithm is applied to the transition matrices
when an alert arrives in the system for getting the state
sequence. Fig. 5 and Fig. 6 show the results obtained from
the current research. In the former, the HMM has been
trained with a supervised method and in the latter with
the Baum-Welch algorithm. The OY axis represents the state
of a generic Distributed Denial of Service attack: (Normal, 0;
Intrusion attempt, 1; Buffer Overflow, 2; and Denial of Service,
3).
The ’LLDDoS1.0 DARPA’ result shows, in Fig. 5 and
Fig. 6, the three phases in the LLDOS1.0 attack scenario
represented by CVE name (see TABLE 2). The states prediction is represented by vertical lines, where each line
shows a received alert (’HMM prediction’). Times in the
TABLE 1 and times represented on the x-axis of the graphs
(Fig. 5 and Fig. 6) differ because the Prelude parser is too
slow; as a result, we had to send the pcap packets through
the tcpreplay tool at a slower rate. Consequently, the detect
time corresponds to the time of the test, which started at
approximately 12:00.
On the one hand, as Fig. 5 depicts, the proposed system
is able to detect and predict the three phases of the DDoS in
the supervised learning case. Fig. 5 shows how the system
is predicting the correct state for all the alerts received.
On the other hand, the unsupervised training case is not
able to detect these phases because the HMM has not been
trained with enough test datasets.
In conclusion, the unsupervised training problem with
prediction may be due to the use of too few patterns for
HMM training. However, the system is prepared to detect
DDoS phases and to avoid overfitting in supervised mode.

11

attacker achieve his goal. The attack probability is calculated
based on equation (20). The Fig. 8 shows the states and the
attack probability of the LLDDOS1.0 dataset. For example,
when the IDS send an alert at 12:30:42, the prediction
system indicates that 75% of the attack in progress has been
realized.
These probabilities and attack phases can be used to
determine a set of proactive response policies depending
on different factors such as the type of attack or the importance of each asset. Another point of view included in [14]
specifies different prediction instants obtaining a probability
of 95%. In a similar way, the Fig. 8 shows two vertical
lines in the prediction instants of our HMM model to 95%
probability of being in each state based on equation (20).
Note that the denominator of this equation corresponds to
the average number of alerts stored in H for each state.
Specifically, the first line at 12:19:19 hours predict near 9
minutes before next state (Buffer Overflow) and 20 seconds
before Intrusion attempt step finished. The second line at
12:30:42 hours predict near 11 minutes before the attacker
begins DDoS attack (next state) and near 1 minute before
finish this step.
Fig. 9 shows the computed attack probability for the
test attack represented in Section VIII. It takes into account
traffic from one NTP server. Furthermore, the graph proves
that the proposed Markov model is able to detect the state
of the attack and predict the probability that the attacker
achieve his goal.
In conclusion, the proposed system is able to detect and
predict with a high probability the three phases of the denial
of service using supervised learning.
10.4

10.2

State probability

Once we have the probability matrices trained based on
supervised method, the prediction system will be ready to
react to real intrusions. We calculate state probability when
an alarm arrives to the system. Thus, we will be able to
calculate the attack probability based on the most likely
states chain. In this case, we perform the prediction of the
state probability using the LLDDOS1.0 dataset.
The results of γt (i) are shown in Fig. 7. The y-axis
represents the probability of being in a state of the Markov
chain based on observations arriving to the prediction system. The x-axis indicates the arrival time of each alert to
the prediction system. If we compare the results with the
supervised result (see Fig. 5 ), we can see that the proposed
prediction system correctly predicts the state with a high
probability.
If we use only the forward variable, αt (i) to calculate
the conditional probability is possible to improve the computational cost with similar results, but the accuracy of the
calculated probability is lower. In conclusion, these results
indicate that our HMM model is able to obtain the state
of the attack and its probability for each observation with
correct results.
10.3

Attack probability

Finally, the state probabilities based on γt (i) are used to
calculate attack probability, i.e., the probability that the

Performance measurement

Real time calculations is a condition for any intrusion prediction system, so we can anticipate attacker steps in real
environments. We assess the performance of the proposed
prediction system in the Fig. 10 . The graph shows the time
of processing the probability and the time of parsing the
IDMEF alert in milliseconds. The mean time is 0,14 and
1,6 milliseconds respectively. Furthermore, the time does
not increase with number of observations providing realtime intrusion prediction regardless of the number of alerts
reported by the IDS.
The performance measurement of the proposed prediction system meets the requirements of a real-time system.
Thus, we demonstrate the feasibility of the proposed HMM
for intrusion prediction.

11

C ONCLUSION AND FUTURE WORK

This paper demonstrates the feasibility of using the proposed HMM to predict intrusions. This system can provide
early detection of attacks by foreseeing the steps of the
attackers. We propose using a HMM to model unobservable
stochastic processes of alerts from IDSs for each type of
multistep attack.
First, a mathematical models used to predict multistep
attacks is proposed. Specifically, we propose an extended
formal HMM definition including a vector of mean number
of alerts, λk = (Σ, S, A, Q, π, H). In this paper, the states

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

12

Fig. 5: State sequence with supervised learning

Fig. 6: State sequence with unsupervised learning

11:59:42.987832	  
11:59:53.280911	  
12:00:23.341260	  
12:00:53.401645	  
12:01:23.462474	  
12:07:47.597021	  
12:08:17.627300	  
12:08:47.687699	  
12:09:17.748097	  
12:09:47.834989	  
12:10:17.868760	  
12:10:47.929296	  
12:11:17.989682	  
12:13:48.325885	  
12:13:48.332823	  
12:14:08.711486	  
12:14:38.771846	  
12:15:08.832187	  
12:15:38.892561	  
12:16:08.952907	  
12:16:39.13436	  
12:17:09.74161	  
12:17:39.134038	  
12:18:09.194371	  
12:18:39.254874	  
12:19:09.315224	  
12:19:39.375474	  
12:27:46.819486	  
12:27:50.882000	  
12:28:03.347929	  
12:28:07.422706	  
12:28:19.908073	  
12:28:24.22810	  
12:30:38.470314	  
12:30:42.544684	  
12:30:54.929283	  
12:30:59.5153	  
12:31:03.568545	  
12:31:07.644976	  
12:31:20.130814	  
12:31:24.205134	  
12:40:25.606107	  
12:50:01.807244	  
12:50:15.390368	  
12:57:07.974347	  
13:00:01.355485	  
13:21:03.589092	  
13:23:30.625066	  
13:23:48.917760	  
13:24:05.696345	  
13:45:08.165044	  
13:45:13.324372	  
13:45:13.409372	  
13:46:24.692854	  
13:46:32.542158	  
14:09:08.261383	  
14:09:21.913318	  
14:33:08.358695	  
14:47:04.434034	  
14:47:04.503248	  
14:53:05.260434	  
14:53:05.413464	  

State	  probability	  
1	  
0,9	  
0,8	  
0,7	  
0,6	  
0,5	  
0,4	  
0,3	  
0,2	  
0,1	  
0	  

Intrusion	  a8empt	  

Compromised	  System	  

Denial	  of	  Service	  

Fig. 7: State probability results
of each HMM will be constituted by similar stages of a
multistep attack, and each step should be trained with most
of the alerts that would lead to their specific objetive, so an
attacker that tries to use a modified attack would lead to
the same path, even if the attcker gets to know our model.
Specifically, we design a HMM configuration file using DDoS
datasets to validate our proposal.
The observations (Σ) are based on different tags in the
CVE repository and the severity of the alerts. Thus, we avoid
overfitting and the HMM is able to predict unknown DDoS
attacks.
The Markov chain states (S) were selected after analysis
of the LLDDOS1.0 scenario in the DARPA dataset and the
alerts provided by the Snort IDS.
With those data, the matrices and the initial vector are
trained with supervised and unsupervised algorithms. Also,
we train the H vector in supervised mode taking into account the DDoS datasets. The observation probability matrix

results are shown in TABLE 3.
Afterwards, we apply the Viterbi algorithm to obtain the
most likely path of different DDoS scenarios. Fig. 5 and
Fig. 6 show the results for LLDDOS1.0. The graph proves
that the system is able to detect the steps of a DDoS attack
in supervised training method, although it is necessary to
train the HMM with more DDoS scenarios in unsupervised
training.
Finally, the prediction system is ready to calculate the
attack probability when an alert is triggered from the IDSs
using supervised training method. Thus, we can anticipate
the final intrusion. Specifically, the highest state probability
and the sum of the number of alerts are used to calculate
the final attack probability. Furthermore, each trained model
can be used to forensic analysis after an attack to detect
phases in the attack traces, or even the proposed system can
discover new attack scenarios if the steps followed by the
attacker do not match with any of the trained HMM.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING
Intrusion	  a7empt	  

13
Compromised	  System	  

Denial	  of	  Service	  

PredicEon	  

1	  
0,9	  
0,8	  
0,7	  
0,6	  
0,5	  
0,4	  
0,3	  
0,2	  

0	  

11:59:42	  
12:00:01	  
12:00:20	  
12:00:39	  
12:00:58	  
12:01:17	  
12:01:36	  
12:01:55	  
12:02:14	  
12:02:33	  
12:02:52	  
12:03:11	  
12:03:30	  
12:03:49	  
12:04:08	  
12:04:27	  
12:04:46	  
12:05:05	  
12:05:24	  
12:07:51	  
12:08:10	  
12:08:29	  
12:08:48	  
12:09:07	  
12:09:26	  
12:09:45	  
12:10:04	  
12:10:23	  
12:10:42	  
12:11:01	  
12:11:20	  
12:11:39	  
12:11:58	  
12:12:17	  
12:12:36	  
12:12:55	  
12:13:14	  
12:13:33	  
12:13:52	  
12:14:11	  
12:14:30	  
12:14:49	  
12:15:08	  
12:15:27	  
12:15:46	  
12:16:05	  
12:16:24	  
12:16:43	  
12:17:02	  
12:17:21	  
12:17:39	  
12:17:58	  
12:18:16	  
12:18:34	  
12:18:53	  
12:19:11	  
12:19:29	  
12:19:48	  
12:20:06	  
12:20:24	  
12:20:43	  
12:21:01	  
12:27:52	  
12:28:11	  
12:28:30	  
12:28:49	  
12:29:08	  
12:29:27	  
12:29:46	  
12:30:05	  
12:30:50	  
12:31:09	  
12:31:28	  
12:31:47	  
12:32:06	  
12:32:25	  
12:32:44	  
12:40:40	  
12:40:59	  
12:50:11	  
12:57:17	  
13:00:06	  
13:00:25	  
13:21:08	  
13:21:27	  
13:21:46	  
13:23:47	  
13:24:06	  
13:45:04	  
13:46:22	  
13:46:41	  
13:47:00	  
14:09:16	  
14:09:35	  
14:33:05	  
14:33:24	  
14:53:01	  

0,1	  

Fig. 8: Attack probability for DDoS DARPA dataset

15:00:00.434058	  

14:47:50.434048	  

14:47:08.434038	  

13:46:29.190355	  

14:33:03.869302	  

13:21:08.69949	  

13:45:08.165044	  

12:57:03.497503	  

12:31:03.568545	  

Denial	  of	  Service	  

12:31:24.205134	  

12:30:42.525808	  

12:28:07.422706	  

12:27:46.819486	  

12:16:39.13436	  

12:18:19.214568	  

12:14:58.812673	  

12:13:48.476643	  

12:10:17.868760	  

12:08:37.667586	  

12:01:03.422226	  

1	  
0,9	  
0,8	  
0,7	  
0,6	  
0,5	  
0,4	  
0,3	  
0,2	  
0,1	  
0	  

11:59:42.987832	  

Compromised	  System	  

Fig. 9: Attack probability for NTP attack scenario
Processing	  data	  
	  ms	  

IDMEF	  parser	  

8	  
7	  
6	  
5	  
4	  
3	  
2	  

0	  

11:59:42.987832	  
12:00:03.301226	  
12:00:43.381487	  
12:01:23.462474	  
12:07:57.587111	  
12:08:37.667586	  
12:09:17.748097	  
12:09:57.828607	  
12:10:37.909421	  
12:11:17.989682	  
12:13:48.476643	  
12:13:58.697056	  
12:14:38.771846	  
12:15:18.852269	  
12:15:58.932908	  
12:16:39.13436	  
12:17:19.93745	  
12:17:59.186506	  
12:18:39.254874	  
12:19:19.335284	  
12:27:46.819486	  
12:27:50.882000	  
12:28:07.403344	  
12:28:19.908073	  
12:28:24.22810	  
12:30:42.525808	  
12:30:54.929283	  
12:30:59.5153	  
12:31:07.625416	  
12:31:20.110659	  
12:31:24.205134	  
12:40:27.854419	  
12:50:11.60825	  
12:57:07.974347	  
13:00:01.791616	  
13:21:08.69949	  
13:23:48.917760	  
13:45:03.682581	  
13:45:13.324372	  
13:45:13.409372	  
13:46:29.190355	  
14:09:03.775858	  
14:09:21.913318	  
14:33:08.358695	  

1	  

Fig. 10: Performance measurement

The implementation of the proposed model is considered that the IDS will not always report all the alerts that
happened. Therefore, our assumption is that if the IDS does
not detect some of the phases due to zero-days attacks or
misconfigured IDSs, it will be considered a false negative
in a specific stage of the Markov chain. One of the benefits
of our proposal is that every step attack is isolated so, a
false negative does not affect others, i.e it does not affect
the calculated intrusion probability or the next prediction of
attack steps in the chain and the HMM will match with the
multi-step attack in progress.
The Fig. 7 and Fig. 5 show the states and the probabilities
for LLDDOS1.0. The graph proves that the system is able
to detect steps of DDoS attack with higher probability. The
attack probability showed in the Fig. 8 demonstrates the
prediction of the intrusion goal.
If we compare our results with those obtained in [14]
for the LLDDOS1.0 scenario, our proposal provides more

detailed information on the state of the attack in progress
and thus, the decision of proactive response becomes easier. Furthermore, its prediction model depends directly on
parameter K, which is assigned manually for alert optimization. Our attack probability increases as the attacker
advances in his final goal. Otherwise, in [15] calculates the
risk probability of the system without indicating the state
of the attack and the progress of the attacker to achieve his
goal.
Our model accepts any type of intrusion detected by
the system; that is, the system obtains good results even
for unknown intrusions because it is based on an adaptive
model. This claim is demonstrated by the results obtained
in Fig. 9 using the virtual scenario of the Section VIII.
Once the network is trained, it can be deployed in any
organisation. Intrusion prediction can be useful in many
areas, including risk assessment and early response.
As a first future work, we will collect traces of each DDoS
step to train the model with more scenarios. Furthermore,
we will implement the parallel prediction of the attack
probability for several multistep attacks.
We will study various possibilities for proactive responses as future work. To achieve this, we will consider
organizational policy and asset importance. In addition, we
will calculate response effectiveness to obtain more realistic state transitions, in order to represent the interactions
between the attacker and the response system. As a result,
the system will be able to modify proactive responses in a
dynamic manner.
Moreover, an intrusion may produce a different number
of alerts depending on the experience of the attacker. As a
future work, we will have several vectors to store the mean
number of alerts according to the attacker experience.
Finally, we will determine whether the alert belongs to
an attack in progress or indicates a new attack, taking in
account the aggregation and filtering of the alerts.

ACKNOWLEDGMENTS
This work has been partially funded with support from
the Spanish MINECO (project DHARMA, Dynamic Heterogeneous Threats Risk Management and Assessment), with
code TIN2014-59023-C2-2-R and the European Commission
(FEDER/ERDF).

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TDSC.2017.2751478, IEEE
Transactions on Dependable and Secure Computing
IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING

R EFERENCES
[1]
[2]
[3]
[4]

[5]

[6]
[7]
[8]
[9]
[10]
[11]

[12]

[13]
[14]
[15]

[16]

[17]
[18]

[19]

[20]
[21]
[22]
[23]
[24]
[25]

“Certsi,” [Online] https://www.certsi.es/blog/ataques-dos-ntp,
2014.
“Dyn analysis summary,” [Online] http://dyn.com/blog/
dyn-analysis-summary-of-friday-october-21-attack/, Oct. 2016.
K. Kendall, “A database of computer attacks for the evaluation of
intrusion detection systems,” Ph.D. dissertation, 1999.
X. Zan, F. Gao, J. Han, and Y. Sun, “A hidden markov model
based framework for tracking and predicting of attack intention,”
in Multimedia Information Networking and Security, 2009. MINES’09.
International Conference on, vol. 2. IEEE, 2009, pp. 498–501.
“Wannacrypt,”
[Online]
https://blogs.
technet.microsoft.com/mmpc/2017/05/12/
wannacrypt-ransomware-worm-targets-out-of-date-systems/,
2017.
L. R. Rabiner, “A tutorial of hidden markov models and selected
applications in speech recognition,” in Procedings of the IEEE, 1989.
S. Axelsson, “Intrusion detection systems: A survey and taxonomy,” Technical report Chalmers University of Technology, Goteborg, Sweden, Tech. Rep., 2000.
H. Debar, D. Curry, and B. Feinstein, “The intrusion detection
message exchange format (IDMEF). ietf rfc 4765,” march 2007.
“Mitre inc.” [Online] http://www.cve.mitre.org/.
N. Poolsappasit, R. Dewri, and I. Ray, “Dynamic security risk
management using bayesian attack graphs,” IEEE Transactions on
Dependable and Secure Computing, vol. 9, no. 1, pp. 61–74, 2012.
A. Shameli-Sendi, N. Ezzati-jivan, M. Jabbarifar, and M. Dagenais,
“Intrusion response systems: Survey and taxonomy,” International
Journal of Computer Science and Network Security, vol. 12, January
2012.
K. Haslum, A. Abraham, and S. Knapskog, “Dips: A framework
for distributed intrusion prediction and prevention using hidden
markov models and online fuzzy risk,” in Information Assurance
and Security (IAS) Third International Symposium on. IEEE, 2007.
K. Haslum, M. Moe, and S. Knapskog, “Real-time intrusion prevention and security analysis of networks using hmms,” in Local
Computer Networks (LCN). 33rd IEEE Conference on. IEEE, 2008.
A. S. Sendi, M. Dagenais, M. Jabbarifar, and M. Couture, “Real
time intrusion prediction based on optimized alerts with hidden
markov model,” JNW, 2012.
H. A. Kholidy, A. Erradi, S. Abdelwahed, and A. Azab, “A finite
state hidden markov model for predicting multistage attacks in
cloud systems,” in IEEE 12th International Conference on Dependable,
Autonomic and Secure Computing (DASC), 2014, pp. 14–19.
S. Zonouz, K. M. Rogers, R. Berthier, R. B. Bobba, W. H. Sanders,
and T. J. Overbye, “Scpse: Security-oriented cyber-physical state
estimation for power grid critical infrastructures,” IEEE Transactions on Smart Grid, vol. 3, no. 4, pp. 1790–1799, 2012.
D. Yu and D. Frincke, “Improving the quality of alerts and predicting intruder’s next goal with hidden colored preti-net,” Computer
Networks, 2007.
S. Zonouz, H. Khurana, W. Sanders, and Yardley, “Rre: A gametheoretic intrusion response and recovery engine,” in IEEE Transactions on Parallel and Distributed Systems, vol. 25, no. 2, 2014, pp.
395–406.
V. Katkar, A. Zinjade, S. Dalvi, T. Bafna, and R. Mahajan, “Detection of dos/ddos attacks against http servers using naive
bayesian,” in International Conference on Computing Communication
Control and Automation (ICCUBEA), 2015, pp. 280–285.
F. Seraj and C. Meinel, “Attack scenario prediction methodology,”
in Tenth International Conference on Information Technology: New
Generations (ITNG), 2013.
A. Shameli-Sendi, J. Desfossez, M. Dagenais, and M. Jabbarifar,
“A retroactive-burst framework for automated intrusion response
system,” Journal of Computer Networks and communications, 2013.
H. Du, D. F. Liu, J. Holsopple, and S. J. Yang, “Toward ensemble
characterization and projection of multistage cyber attacks.” in
ICCCN, 2010, pp. 1–8.
D. S. Fava, S. R. Byers, and S. J. Yang, “Projecting cyberattacks
through variable-length markov models,” IEEE Transactions on
Information Forensics and Security, vol. 3, no. 3, pp. 359–369, 2008.
C. Liu, A. Singhal, and D. Wijesekera, “A model towards using
evidence from security events for network attack analysis.” in
WOSIS, 2014, pp. 83–95.
H. Debar and A. Wespi, “Aggregation and correlation of intrusiondetection alerts,” in International Workshop on Recent Advances in
Intrusion Detection. Springer, 2001, pp. 85–103.

14

[26] P. Ning, Y. Cui, and D. S. Reeves, “Analyzing intensive intrusion
alerts via correlation,” in International Workshop on Recent Advances
in Intrusion Detection. Springer, 2002, pp. 74–94.
[27] F. Cuppens and A. Miege, “Alert correlation in a cooperative
intrusion detection framework,” in Security and privacy, 2002.
proceedings. 2002 ieee symposium on. IEEE, 2002, pp. 202–215.
[28] S.-Z. Yu and H. Kobayashi, “An efficient forward-backward algorithm for an explicit-duration hidden markov model,” Signal
Processing Letters, IEEE, vol. 10, no. 1, pp. 11–14, 2003.
[29] A. Dempster, N. M. Laird, and D. Rubin, “Maximum likelihood
from incomplete data via the em algorithm,” Journal of the royal
statistical society. Series B (methodological), pp. 1–38, 1977.
[30] G. D. Forney, “The viterbi algorithm,” in Proceeding IEEE, 1973.
[31] “Jahmm - java library for hmm model and algorithms,” [Online]
https://code.google.com/p/jahmm/.
[32] “Darpa - intrusion detection evaluation dataset,” [Online] https:
//www.ll.mit.edu/ideval/data/2000data.html.
[33] “Snort - network intrusion detection system,” [Online] https://
www.snort.org/.
[34] J. Rabiner, “A probabilistic distance measure for hmms,” AT&T
Technical Journal, vol. 64, pp. 391–408, Feb. 1985.
[35] “Vnx,” [Online] http://dit.upm.es/vnxwiki/index.php.
[36] “Qualys,
inc.”
[Online]
https://blog.qualys.
com/laws-of-vulnerabilities/2015/03/17/
ghost-remote-code-execution-exploit.

Pilar Holgado has been a Ph.D. student in the
Department of Telematics Systems Engineering at Universidad Politécnica de Madrid (UPM)
since 2012. She received her degree in Computer Engineering in 2009 and her M.Sc. degree in Computer Science and Telecommunications, specializing in communication networks
and embedded systems, in 2011 from Universidad Autónoma de Madrid (UAM). She has also
participated in several national projects based
on telecommunication network research.

Vı́ctor A. Villagrá has been an associate professor in telematics engineering at the Technical
University of Madrid (UPM) since 1992. He has
been involved in several international research
projects related to Network Management, Advanced Services Design, and Network Security,
as well as different national projects. He is an
author or co-author of more than 60 scientific papers, and is author of a textbook about security
in telecommunication networks

Luis Vázquez has been a M.Sc. degree student
in Telecommunications Engineering since 2015
at Universidad Politécnica de Madrid (UPM).
He received his Bachelor of Engineering in
Telecommunication Technologies and Services
(specialization in Telematics) in 2015, also at
UPM. Parallel to his studies, he has been working on some network security national projects.

1545-5971 (c) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

