2014 Second International Conference on Artificial Intelligence, Modelling and Simulation

Attack Prediction Models for Cloud Intrusion Detection Systems
Hisham A. Kholidy 1,3
hkholidy@qu.edu.qa
1

Abdelkarim Erradi 1
erradi@qu.edu.qa

Sherif Abdelwahed 2
sherif@ece.msstate.edu

Department of Computer Science and Engineering, College of Engineering, Qatar University, Qatar 2 Electrical and Computer Engineering, Mississippi State University, Starkville, MS, USA 3 Faculty of Computers and Information, Fayoum University, Fayoum, Egypt

Abstract -- In spite of the functional and economic benefits of the cloud-computing systems, they also expose entirely several attacks. Most of the current cloud security technologies do not provide early warnings about such attacks. The early warnings give the cloud administrator or the auto response controller ample time to take preventive measures. This paper discusses our three prediction models that are integrated to our Autonomic Cloud Intrusion Detection Framework (ACIDF) namely, The Finite State Hidden Markov prediction model (FSHMPM), The Finite Context Prediction Model (FCPM) that uses a Variable Order Markov Model (VMM) with a Probabilistic Suffix Tree (PST), and HoltWinter Prediction Model (HWPM). We compare these models and highlight the pros and cons of each one. The prediction models were evaluated against DARPA 2000 dataset. The FSHMPM has successfully fired the early warnings 39.6 minutes before the launching of the LLDDoS1.0 attack. The FCPM has successfully fired the early warnings 58.98 minutes before the launching of the same attack. The HWPM has an error rate of 42.07% for HTTP flow forecast and 44.02% for FTP one. Keywords -- Cloud computing; intrusion prediction; multi-staged attacks; HMM; VMM; Probability Suffix Tree; HoltWinter

Order Markov Model (VMM) with a Probabilistic Suffix Tree (PST), and (3) HoltWinter Prediction Model (HWPM). FSHMPM [3] is based on a finite state Hidden Markov Model [4] that represents sequence of events matching attacks signature as series of state transitions with a certain probability. The model uses a Forward-Back Propagation (FBP) training algorithm [5] to deduce the transition, output probabilities, and other prediction parameters for the attacks of interest. Based on the received alerts, the prediction model predicts any possible multi-step attacks before they compromise the system. It is also able to predict the noncompleted multistage attacks that repeat their attempts. FCPM [6] is based on learning VMM [6] over a finite context. The model uses a training algorithm that is based on a PST algorithm [7]. FCPM assigns a probability to a symbol based on the context in which it appears. It is more robust against over-fitting. FCPM model is very flexible and is able to model complex sources of sequential alerts. Unlike the FSHMPM, FCPM does not require any knowledge of the network topology, system vulnerabilities, or system configurations. Furthermore, it requires fewer training sample than the FSHMPM. FCPM can predict the multistep attacks and the non-completed multistage attacks that repeat their attempts. Both FSHMPM and FCPM are evaluated and compared using the LLDOS 1.0 attack scenarios of DARPA 2000 intrusion data-set [8] as an example for the multistep DDoS attack signatures and they proved promising results. The FCPM achieved better performance and more accurate results than FSHMPM. HWPM Forecasts the aberrant behaviors of the network traffic when the amount of collected network traffic is either too high or too low in comparison to normal network traffic. It does not require attack signature dataset because it defines the aberrant behaviors based on the normal behavior of specific network protocols. The error rate of this approach is very high and cannot be used solely in the cloud systems. This paper is organized as follows. Sect. 2 highlights the literature review about the prediction approaches. Sect. 3 presents the main security processes of ACIDF. Sect. 4, 5, and 6 introduce, respectively, the FSHMPM, FCPM, and HWPM and their evaluations and experiment results. Sect. 7 compares our three prediction models. Finally, Sect. 8 draws some conclusion remarks and outlines future work.

I. INTRODUCTION Cloud computing is a paradigm that builds on several technologies such as parallel and distributed computing, high speed networks and virtualization to enable faster and cost-effective provisioning of IT resources and services. There is a consensus that one of the factors which hinder the wider adoption of this model is security. In fact, securing data and services in a cloud system is more challenging than in a traditional platform due to the loss of control on data location and the shared resources with unknown and potentially malicious users. Conventional Intrusion Detection System, IDS, are not able to meet all these challenges and need to be extended with further capabilities such as risk assessment and prediction models [1]. This paper outlines the three prediction approaches we advocate to extend current IDS with prediction capabilities. We implemented these capabilities in an IDS framework named ACIDF [16], Autonomous Cloud Intrusion Detection Framework that has experimentally proved its ability of detecting Distributed Denial of service attacks (DDoS), host based, network based, and masquerade attacks [2]. The three prediction approaches are: (1) The Finite State Hidden Markov prediction model (FSHMPM), (2) The Finite Context Prediction Model (FCPM) that uses a Variable
978-1-4799-7600-3/14 $31.00 Å  2014 IEEE DOI 10.1109/AIMS.2014.64 270

II. BACKGROUND AND LITERATURE REVIEW A number of different schemes that predict multi-step attacks have been proposed. There are two main models can be used for the prediction target [9] namely, (1) Finitecontext models, that are applied using Markov Models, MM, and VMM [6]. These models assign a probability to a symbol based on the context in which it appears and, (2) Finite-state models. These models are applied using HMM which are composed of an observable part called "events," and a hidden part called "states." A state stores information about the past since it reflects changes in the system from the start to the present moment. A transition indicates a state change and is described by a condition that needs to be fulfilled in order to enable the transition. Events are observed with different probability distribution depending on the state of the system. These models provide flexible structure that can model complex sources of sequential data. There are some proposals for the intrusion prediction issue such as the Hidden Colored Petri-Net proposed by Yu and Frincke [6]. They proposed a method to improve the quality of alerts for prediction. Their approach is not accurate enough to be applied in real applications. Haslum et al [10] proposed a model based on HMM to predict the next step of an anomaly. They simulated the distributed system attacks in four steps. The state of the system changes according to the observations from the IDSs in the network. However, this model needs to be tested in a real network. Recently, Fava et al [11] proposed a new approach based on VMM for the characterization and prediction of cyber-attack behavior. It captures the sequential properties of attack tracks to predict the likely future actions on ongoing attacks. However, this model needs to be tested in a real network. The framework in [13] uses the Holt-Winters algorithm [17] to detect aberrant behaviour. The framework collects real IP network traffic and calculates forecasts for collected traffic. However, the error rate of this model is very high. III. ACIDF SECURITY PROCESSES This section briefly describes the six processes of ACIDF [16] as described below, see Fig. 1: (a) Collection process collects events and logs from several sensors and sends them to the integration process. (b) Integration process integrates the events collected from distinct sensors and normalizes them into the IDMEF protocol [14] to simplify their correlation in the next layer. (c) Correlation process correlates a large number of normalized events from different detectors to highlight the few critical ones to reduce false positives alerts. (d) Risk Assessment process assesses the risk in the cloud system based as detailed in [16]. (e) Prediction process works in parallel with the rule matching process run by the correlation engine. Sections 4, 5, and 6 describe how the prediction process runs. (f) Auto response process is carried out by the controller [12] which uses a fuzzy logic approach to select the most appropriate response and protection method.
271

Fig.1. ACIDF detection processes

IV. FINITE STATE PREDICTION MODEL USING HMM The output of the IDS usually includes a large number of alerts as stream data which usually unordered and changes frequently. Using traditional techniques with such data is a big challenge. The HMM algorithm is one of the best ways to tackle this weakness. HMM works well dealing with streaming inputs. It is fast and can be adapted to predict future attacks in IDSs. We adapt the HMM to provide the predictability and early-warning feature to ACIDF. In this model, the sequence of events that match attacks signature rules in the correlation tree represents a series of state transitions with a certain probability where each event is not directly visible but output dependent on the event is visible, the output in this case is the attack state. The basic idea underlying our FSHMPM model is to employee a HMM to track the evolution of the attack in the system. That way, while an attack is in progress, the state changes and we can trigger appropriate responses based on a confidence level threshold, which would result in a lower false positive rate. The prediction component has all the detailed information about the malicious activity such as severity, confidence level, and the cost of asset targeted.

A. The Elements of The Prediction Model
The elements of the prediction model are described below: 1) States: the system is assumed to be in one of the 4 states: Hale (H), Investigate (I), Attack (A), and Penetrate (P). Fig. 2 defines the relationship among these states.

Fig. 2. The relation between the FSHMPM states

The graph is fully connected, which indicates that it is possible to have a transition from any security state to any other security state. That helps in detecting single stage attacks and predicting the non-completed multistage attacks that repeat their attempts. 2) Observations: O = o1, . . . , oK , are alerts from the detection sensors. Observations cause the system model to move among states. We consider the severity of these alerts

as observation and each alert has four priorities reflects the state of the system: Low, Medium, High, and Very high or (L, M, H, V). 3) State Transition Probability Matrix (P): describes the probability of moving among states see [3]. 4) Observation Transition Probability Matrix (Q): describes the probability of moving among observations. 5) Initial State Distribution Vector (): describes the probability of states when our framework starts. 6) Alert Observation Probability Matrix ( Ä¹): describes the probability of having a specific alert in a specific state. This matrix helps in computing the alert severity function. Ä¹ is built based on the training data in the attack dataset. 7) Assets Cost Matrix (C): Each of the states of the system is associated with a cost vector indicating the potential consequences of the state in question. 8) The Output or emission probability Matrix ( Y): represents how likely the output result is for each sequence of attack states. 9) Alert Severity Function: describes the severity of each alert at specific state s. For more details, see [3]. 10) HMM Prediction Algorithm The Pseudo Code of the HMM prediction and alert risk modulation is given in [3].

seconds. It happened 177 seconds before the fourth step with P equals to 80.04% and it happened 39.61 minutes before the fifth step. Thus, the controller component can automatically build the suitable response to mitigate the attack. The green dash line in Fig. 3 (last line from the right side) refers to the 8160 seconds, the time when the IDSs installed in the Network start their detection.

B. Evaluation and Experimental Results
We have used the DARPA 2000 dataset [8] to test the FSHMPM. The dataset consists of two multistep DDoS scenarios. We have used the first scenario, LLDDOS1.0, that tries to install DDoS software in three computers in the target network. Then, it uses these hosts to launch a DDoS attack against an external host using spoofed IP addresses. LLDDOS1.0 has 5 steps and takes about three hours. These steps are: 1- IPsweep from a remote site (1500-1920 sec), 2Probe of live IP's (2880-3480 sec), 3- Break in to Mill, Pascal, and Locke (4380-4420 sec), 4-Install the DDoS tools on the three hosts (5400 sec), 5-launch the DDoS with spoofed source IP addresses (7620 sec). The total assessed risk for the LLDDOS 1.0 scenario is shown in Fig. 3 where we can notice the sum of the risk corresponding to each step of LLDDOS 1.0 scenario for all hosts in the four subnets. Fig. 3 describes the accuracy of the FSHMPM. The FSHMPM fires some alerts when the probability of being in the penetration state becomes higher than a threshold of 80%. In the beginning of the experiments, the system is in the healthy state (H) with 100% probability and other states are zero. As we mentioned before, the LLDDOS1.0 has 5 steps and takes about three hours. The first prediction is calculated at 1252 seconds, 248 seconds before the first IPsweep step, and the probability of P is 65.74%, higher than the normal case, but P is still under the threshold 80%. This means that there are not any fired alerts. Similarly, the same case happens with the second prediction. The third prediction is calculated at 4278 seconds, 102 seconds before the attacker breaks into the three machines with P is 81.96%. The fourth prediction was calculated at 5223

Fig. 3. The top chart: Actual total assessed risk for LLDDOS 1.0. The bottom chart: The predicted risk using the FSHMPM.

V.FINITE CONTEXT PREDICTION MODEL We have introduced this model in [6]. This model is based on learning VMM [6] over a finite context. The model uses a training algorithm that is based on a PST algorithm [7]. According to the received alerts, the prediction model predicts any possible multi step attacks before they compromise the system. It is also able to predict the noncompleted multistage attacks that repeat their attempts. The model is very flexible and is able to model complex sources of sequential alerts. It was evaluated using the two attack scenarios of DARPA 2000 intrusion data-set, LLDOS 1.0 and LLDOS 2.0.2 as multi-step DDoS attacks signatures [8]. To make our results comparable with the research community, we compare our proposed model to the FSHMPM using LLDOS 1.0 scenario. The FSHMPM usually requires very large training sample which is very difficult in case of attack prediction because of the few attack tracks available in the currently available datasets. Our experiments proved that the FCPM achieves highly accurate results and requires few training samples comparing to the FSHMPM. ACIDF produces an ordered collection of alerts whenever it detects a sequence of multistage attack signatures. These alerts have an IDMEF XML format. Each collection of alerts is composed of several alert tags and other sub-tags or fields. An attack behavior model is built based on the information contained in these fields. Let  to be the time-stamped order set of intrusion alerts {a1, a2, a3, ......, aj} where aj is an intrusion alert composed of j fields (v1, v2, v3, ....,vi) as shown in Eq. 1.
272

(1)

= (0.2) (0.5) (0.2) (0.6) (0.35) (0.2) (0.4) (0.2) (0.5) (0.2) (0.6) = 4.32-10

=

(2)

To build the behavior model, we only consider, among all alert fields, the alert "name" to be used in the proposed prediction model. Let vi denotes the alert name field, then a sequence of j alert names i={vi,1, vi,2, vi,3, vi,4,......... vi,j}. Let  be a finite alphabet. Each alphabetic symbol represents an alert captured by an IDS alert according to alert "name" field. A sequence of these alerts S = {x1 x2 x3...xL}, where xL  . To extract these sequences, an attack dataset is used to learn the prediction model by mapping the attack data-set intrusion alerts by the alphabetic sequence. A learner is given a training sequence q = {q 1 q2 Ë Ë Ë qn} where qi  . The goal is to learn a model that provides a probability assignment for any future outcome given some past, for any "context" s  . Using a PST, the learner generates a conditional probability distribution . By using a PST to model the VMMs, a string depth will not be fixed for every node. The transition probability of a symbol on a given path is computed through the frequency of this symbol in the observed data, given the preceding substring on the path. In this way, we can compute the probability of occurrences of a subsequence using Eq. 3. We can also predict the following symbol to a subsequence using a vector of conditional probability distribution for each node in PST. (3) E.g., a DDoS dataset consists of alerts a={a1, a2, a3,..}. A sequence of alert names name = {Email_Ehlo, FTP_User,.., TelnetXdisplay, Mstream_Zombie, Stream_DoS}. According to Table 1, q={ABRACADABRA}. name can be mapped as

Fig. 4: An example of a PST over alphabet  = {A, B, C, D, R}

To predict the following symbol to a subsequence "RA", we compute the probability distribution associated with the subsequence "RA" to be: {0.05, 0.25, 0.4, 0.25, and 0.1} for symbols {A, B, C, D, and R} respectively. Thus, the following symbol to subsequence "RA" is "C" because it has the largest probability, 0.4. For LLDoS1.0, the alerts are processed and mapped into alphabetic characters, see Table 1. For more details about the model implementation, see [6].

Fig. 5. The top chart: Actual Risk for LLDDoS 1.0. The bottom chart: the Predicted Risk of 4 prediction executions by the FCPM.

A prediction performance rate R can be defined as given in E.q 4: (4) Fig. 5 shows that the finite context model can efficiently predict the attacker's next action and fires early warning alerts before the launching of the LLDDoS1.0 attack by 58.983 minutes. VI. HOLTWINTER PREDICTION MODEL (HWPM). The Holt-Winters, HW, algorithm [17] provides a forecasting approach that takes time series seasonality into account and it is based upon two methods: exponential smoothing and Holt. The exponential smoothing ignores the trend and seasonality. Instead, the Holt method takes into
273

TABLE I: AN EXAMPLE OF MAPPING SYMBOLS TO THE DDOS ALERTS Alert Name (name) Symbols Email_Ehlo A FTP_User B TelnetXdisplay C Mstream_Zombie D Stream_DoS R

Fig. 4 shows an example for building a PST and generating a conditional probability distribution for each node in PST. According to Fig. 4, the probability of occurrences of a subsequence s={ ABRACADABRA} is: P(s) = P(A) . P(B|A) . P(R|AB) . P(A|ABR) . P(C|ABRA) ...........P(A|ABRACADABR) = root(A) . A(B) . root(R) . r(A) . BRA(C)............root(A)

account the trend but not the seasonality. The seasonal effect is calculated by an equation defined by the HW algorithm. There are two know HW models namely, additive and multiplicative. [17] The characteristic of the time series specifies the model to be used. ACIDF uses a multiplicative model [21] because the seasonal effects in case of ACIDF are related to network traffic and therefore they are not constant. HW uses three components: mean level, trend, and seasonality. Every time new value is observed, the algorithm updates estimates of all components using smoothing constants (,  and ). The Seasonal HW Multiplicative model is described in details in [21]. ACIDF investigates the HW to generate a forecast through the previous values of the time series [21]. HW applies forecasting to detect aberrant behaviour in network traffic. Aberrant behaviour detection inspects how many times in a given time window an observed value crosses a confidence band. To implement the test platform, we integrate the following open source tools with ACIDF components: Nfdump [18], RRDtool [19] and NfSen [20], see Fig. 6. Nfdump collects and stores Incoming Netflow data into files by nfcapd, a tool in Nfdumpl. RRDtool is used to generate round robin databases from the stored data and generate a one-step-ahead forecast. NfSen uses the data stored in round robin databases for graphing time series data. RRDtool implements the HW forecasting algorithm using the forecasting parameter values, i.e. the smoothing constants (,  and ) and a seasonal period (s), defined in NfSen source code. These parameters can be modified through RRDtool. The forecasting architecture and the processing steps is shown in Fig. 6 and described in [21].

Fig. 7. Observed and forecasted HTTP flow produced by ACIDF forecasting architecture

Fig. 8. Observed and forecasted FTP flow produced by ACIDF forecasting architecture

To evaluate the accuracy of the model and how well it suits for a time series, we use a forecast measure called MAPE, Mean Absolute Percentage Error [17]. According to MAPE, our model has percentage errors of 42.07% for the HTTP flow forecast and 44.02% for the FTP one. VII. COMPARING THE THREE PREDICTION MODELS In this section we conclude the pros and cons of the three prediction models as given in Table 2:
TABLE II: A COMPARISON BETWEEN OUR THREE PREDICTION MODELS
Approach Data Source Accuracy  It fires the early warning alerts 39.6 minutes before the launching of the LLDDoS1.0 attack.  Can only define the attack phase (cannot specify attack name). Description  It uses the fired alerts as series of state transitions with a certain probability.  It uses a training algorithm to deduce the prediction parameters.  It requires very large training sample.  It predicts multistep attacks and the non-completed ones. Finite State  Attack HMM Signature Dataset (FCPM) (a predefined attack plan library).  A risk model that fires sequence of alerts matching attacks signature.  a large number of alerts(stream, unordered, frequently changes data) Context  Attack State VMM Signature Dataset with PST (Unlike the (FCPM) HMM, it does not rely on a predefined attack plan library).

Fig. 6. ACIDF Forecasting Architecture

Based on the DDoS attack scenario described in [16], Fig. 7 and 8 show, respectively, a graph produced by ACIDF forecasting architecture for both HTTP and FTP flows. Since the amount of confident band failures crosses a defined threshold value within a specified time window, this behaviour can be labeled as aberrant. The threshold is manually initialized and updated by the algorithm every time a new value is observed.
274

 It fires the early warning alerts 58.98 minutes before the launching of the LLDDoS1.0 and 43.93

 Assigns a probability to a symbol based on the context in which it appears.  Is able to flexibly model complex

 Sequence of alerts matching attacks signature.  Ordered collection of alerts.

Holt Winter (HWPM)

 Network traffic  No need for Attack Signature Dataset

minutes before sources of sequential the launching of alerts. the LLDDoS2.0.  Is evaluated using LLDOS1.0 and  Can specify LLDOS2.0.2 as multiattack name step DDoS attacks signatures.  It requires few training sample.  Is more robust against over-fitting.  Unlike HMMM, it does not require any knowledge of the network topology, system vulnerabilities, or system configurations. the  Error Rate: Forecasts 42.07% for aberrant behaviors the network HTTP flow of forecast and traffic when the 44.02% for amount of collected network traffic is FTP one.  Can define either too high or too low in aberrant comparison to behaviors network within specific normal traffic. protocols

REFERENCES
[1] [2] Rebecca Bace and Peter Mell, "NIST Special Publication on Intrusion Detection Systems", NIST, 16 August 2001. Hisham A. Kholidy, Fabrizio Baiardi, Salim Hariri, "DDSGA: A Data-Driven Semi-Global Alignment Approach for Detecting Masquerade Attacks", in IEEE Transactions on Dependable and Secure Computing, accepted and in printing in May 2014. Hisham A. Kholidy, Abdelkarim Erradi, Sherif Abdelwahed, Abdulrahman Azab, "A Finite State Hidden Markov Model for Predicting Multistage Attacks in Cloud Systems", in the 12th IEEE International Conference on Dependable, Autonomic and Secure Computing (DASC), Dalian, China, August 2014. Lawrence R. Rabiner (February 1989). "A tutorial on Hidden Markov Models and selected applications in speech recognition". Proceedings of the IEEE 77 (2): 257-286. doi:10.1109/5.18626. Fei Gao; Jizhou Sun; Zunce Wei, "The prediction role of hidden Markov model in intrusion detection", in IEEE Canadian Conference on Electrical and Computer Engineering,pp.893,896 vol.2, May 2003. Hisham A. Kholidy, Ahmed M. Yousouf, Abdelkarim Erradi, Hisham A. Ali, Sherif Abdelwahed, "A Finite Context Intrusion Prediction Model for Cloud Systems with a Probabilistic Suffix Tree", in the 8th European Modelling Symposium on Mathematical Modelling and Computer Simulation, Pisa, Italy, October 2014. D. Ron, Y. Singer, and N. Tishby, "Learning probabilistic automata with variable memory length," Proc. seventh Annu. Conf. Comput. Learn. theory - COLT '94, pp. 35Â­46, 1994. DARPA 2000 Intrusion Detection Scenario Specific Dataset. http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ide val/data/2000data.html. Alireza Shameli-Sendi, Naser Ezzati-jivan, Masoume Jabbarifar, and Michel Dagenais, "Intrusion Response Systems: Survey and Taxonomy", IJCSNS International Journal of Computer Science and Network Security, VOL.12 No.1, January 2012. K. Haslum, M. E. G. Moe, and S. J. Kn apskog, "Real time intrusion prevention and security analysis of networks using HMMs," 33rd IEEE Conf. on Local Computer Networks, Montreal, Canada, 2008. Fava, D.S., Byers, S.R., Yang, S.J.: Projecting Cyber Attacks Through Variable Length Markov Models. 1Â­10. Chen, Q., Abdelwahed, S. and Erradi A., `An Autonomic Detection and Protection System for Denial of Service Attack', in Parallel and Distributed Computing and Systems 2012, Las Vegas, USA. Jarkko Ekberg, Jorma Ylinen, Pekka Loula, "Network Behaviour Anomaly Detection Using Holt-Winters Algorithm", In Proc. Of 6th International Conference on Internet Technology and Secured Transactions, 11-14 December 2011. H. Debar, D. Curry, "The Intrusion Detection Message Exchange Format (IDMEF)", rfc4765, March 2007. D. Yu, and D. A. Frincke, "Improving the quality of alerts and predicting intruder's next goal with Hidden Colored Petri -Net," Computer Networks, vol. 51, 2007, pp. 632-654. Hisham A. Kholidy, Fabrizio Baiardi, Salim Hariri, et al., "A Hierarchical Cloud Intrusion Detection System: Design and Evaluation", in International Journal on Cloud Computing: Services and Architecture (IJCCSA), Vol.2, No.6, December 2012. Kephart, J. O. and Walsh, W. E. 2004, 'An artificial. C. Chatfield (1978). The Holt-Winters Forecasting Procedure. Journal of the Royal Statistical Society. Series C, Vol. 27, No. 3, pp. 264-279. Nfdump homepage. http://nfdump.sourceforge.net/. 2011-07-11. RRDtool homepage. http://www.mrtg.org/rrdtool/. 2011-07-11. NfSen homepage. http://nfsen.sourceforge.net/. 2011-07-11. Hisham A. Kholidy, Abdelkarim Erradi, Sherif Abdelwahed, Fabrizio Baiardi, "A Hierarchical, Autonomous, and Forecasting Cloud IDS" , the 5th International Conference on Modeling, Identification and Control (ICMIC2013), Cairo, Aug31-Sept 1-2, 2013..

[3]

[4]

[5]

[6]

[7]

[8]

VIII.CONCLUSION AND FUTURE WORK In this paper, we presented ACIDF security processes as well as our three prediction models: FSHMPM, FCPM, and HWPM. The FSHMPM is based on a finite state HMM that represents sequence of events matching attacks signature. It has successfully fired the early warning alerts before the launching of the LLDDoS1.0 attack by 39.61 minutes and 64.7 minutes before the detection phase starts. FCPM is based on learning VMM over a finite context. The model uses a training algorithm that is based on a PST algorithm. FCPM assigns a probability to a symbol based on the context in which it appears. FCPM model is very flexible and is able to model complex sources of sequential alerts. FCPM requires fewer training sample than the FSHMPM. Both FSHMPM and FCPM can predict the multistep attacks and the non-completed multistage attacks that repeat their attempts. The FCPM achieved better performance and more accurate results than FSHMPM. HWPM Forecasts the aberrant behaviors of the network traffic when the amount of collected network traffic is either too high or too low in comparison to normal network traffic. The error rate of this approach is very high and cannot be used solely in the cloud systems. For future work, we plan to evaluate the three prediction models using a large scale real-time cloud system. ACKNOWLEDGMENT This work was made possible by NPRP grant # 09-7782-299 from the Qatar National Research Fund (a member of Qatar Foundation). The statements made herein are solely the responsibility of the authors.

[9]

[10]

[11] [12]

[13]

[14] [15]

[16]

[17]

[18] [19] [20] [21]

275

