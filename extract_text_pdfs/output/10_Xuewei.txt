2010 10th IEEE International Conference on Computer and Information Technology (CIT 2010)

Analyzing and Correlating Security Events Using State Machine
Feng Xuewei[1], Wang Dongxia[1], Zeng Jiemei[2],Ma Guoqing[1], Li Jin[1]
1

(Beijing Institute of System Engineer, National Key Laboratory of Science and Technology on Information System Security,
Beijing 100101, China)
2
(Beijing Aerospace Control Center, Beijing 100296, China)
e-mail: ainimei5@yeah.net, dongxiawang@126.com

Abstract—It is unfeasible to analyze the security events by the
manual way for the security manager, because the number of
the events is huge and the information contained in the events
is meaningless. After analyzing the existing algorithms of
security events correlation, we propose an attack scenario
reconstruction technology based on state machine. The
processes of attackers intruding into the cyberspace can be
restored and the more comprehensive attack scenario
description information will be generated using this technology.
This working lets the security manager more comfy. The state
machine based attack scenario reconstruction technology
processes security events using clustering analysis and causal
analysis concurrently, it builds a correlation state machine in
memory for every attack scenario tree which is predefined by
the security manager, when security events are coming, the
certain state machines will process them, if the condition is
satisfied, an attack scenario description information will be
generated and then sent to the security manager. The
correlating technology based on state machine is more timely
and accurately, and at last, we use the DARPA2000 Intrusion
Scenario Specific Data Sets to validate the technology, the
experiment results show that it is feasible to analyze security
events using the technology we proposed.

raw security events, and it will presents the generated attack
scenario description information to the security manager
timely and accurately.
The remainder of this paper is organized as follows:
section 2 analyzes the exiting researches on security events
correlation, section 3 describes some important concepts and
the correlating algorithms appearing in the state-based attack
scenario reconstruction technology, we use an experiment to
validate the technology in section 4, at last we summarize
this paper and suggest the future work in section 5.
II.

Keywords-attack scenario reconstruction; clustering analysis;
causal analysis; attack scenario tree; correlating state machine

I.

INTRODUCTION

Along with the popularity of computer networks and the
continuous deepening of various network applications, the
issues of cyberspace security becomes more prominent, it
has become a major constraining factor for the development
of Internet[1]. A simple attack instruction will cause the
security devices such as IDS (Intrusion Detection System)
etc. generating hundreds of security events in a complex
large-scale network. It is a tragedy to analyze these events by
the manual way for the security manager, so it is significant
to reconstruct the attack scenario from the huge number of
security events. Attack scenario reconstruction means to
restore the process that attackers penetrate the cyberspace by
correlating and fusing the events generated by security
devices, and then present this comprehensive scenario
description information to the manager. Acquiring the
network’s security situation in this way, security manager
will get rid of the burdensome analysis task. In this paper we
propose a state-based correlating technology to reconstruct
attack scenario. This correlating technology combine the
clustering analysis and causal analysis together to process the
978-0-7695-4108-2/10 $26.00 © 2010 IEEE
DOI 10.1109/CIT.2010.476

RELATED WORK

The relationship between security events caused by attack
activities is either parallel redundance or causal sequence.
The purpose of security events correlation is to find out the
two relationships between the events. Corresponding to the
two relationship of security events, researches on redundant
events correlation mainly focus on probability-based
clustering analysis, while researches on sequencable events
correlation mainly focus on rule-based causal analysis.
Clustering analysis is employed to correlate security
events by Alfonso Valdes firstly[2], then Debar H.[3], Dain
O.[4][5] etc. also contribute to the development of security
events’ clustering analysis. The correlation algorithm based
on clustering analysis processes security events as follows:
when a new event is generated, computing its attribute
similarity to the existing events with (1), if the “distance”
between the new event and cluster A is minimum among all
the clusters, then assigned the event to cluster A. Usually, the
events belonging to the same cluster have the similar
attributes, and one “seed alert” will represent this cluster.

¦ E SIM ( X
j

j

, Yj )

j

Sim ( X , Y )

¦E

(1)
j

j

In (1), X represents one of the exiting events, and Y
represent the new event, j is the attribute’s sequence number
of security events, E means the similarity expectation of
j

attribute j, X and Y represent the value of attribute j of
j

j

event X and event Y, SIM ( X , Y ) is the similarity
j

j

measurement function of X and Y . Sim ( X , Y ) presents the
similarity between X and Y.
While processing sequence events, rule-based causal
analysis is overwhelming. Steven Cheung etc.[6] proposed a
j

2849

j

correlated attack modeling language (CAML) which can be
use to model attack scenarios. Various attack scenarios are
predefined as a series of modules, namely every module
represents an attack scenario and modules can be linked
together to detect multi-step scenarios, when security events
are generated, they are used to match with the rule modules.
Benjamin and Herve Debar proposed another attack scenario
recognition technology based on chronicle formalism pattern
recognition, it correlates the security events according to the
predefined chronicle models. The TIAA project leading by
Peng Ning[8] and the ONERA project leading by Frederic
Cuppens[9] are landmarks in the filed of security events
causal analysis. The basic idea of security events causal
analysis can be described as follows: assumed that every
class of security events has a triples related to itself, the
triples can be represented as <Pre_i, eventType, Post_i>,
Pre_i means the prerequisites that the successful security
events need, such as the network resources and the attackers’
ability, eventType indicates attack type of the events, and
Post_i represents the consequence set when the events
succeed, for example, when attackers succeed a buffer
overflow attack, they will acquire some limited privileges on
the target host, and own some resources, such as the files.
Security event B can be correlated with security event A (A
occurred before B) if and only if Pre_B is partly or
completely included in Post_A. The causal relationships
between security events will be figured out with the help of
the predefine cause and effect knowledge.
After analyzing the existing researches on security events
correlation, we find that there are two flaws in the existing
researches: firstly, the correlating algorithm is either
clustering analysis based or causal rule based. There are few
researches that combine the clustering analysis and causal
analysis together to process the raw security events
concurrently, even if these researches exist, the two
correlation strategies are dissevered factitiously, usually
causal analysis is after clustering analysis, the rationality of
this working is doubtful. Secondly, time delay of the
correlation analysis is inacceptable, this problem is more
prominent when security events are causal analyzed.
III.

each AttackScenario_i is defined as a tree by XML
represents an attack scenario.
Intrusion scenario base comprises various attack
scenarios, as Fig.1 shows. It is a static data structure, and can
be enriched and modified by the security manager. All the
elements in intrusion scenario base is defined as a tree by
XML.

Figure 1. Intrusion scenario base

Definition 2 attack scenario tree: attack scenario tree
AttackScenario_i is a formalization representation of the
attack scenario, it is a static tree data structure defined by
XML. It describes the process of multi-step cyberspace
attack, each node of the tree is a matchable rule, the rule
presents the characteristic of the certain attack step. The
relationship between parent node and children node is “and”,
it represents the time-series advance of attack steps. The
relationship between brother nodes is “or”, it represents the
different choices of next attack step. The growing process of
the tree is the development of the multi-step cyberspace
attack.
In order to explain the multi-step attack scenario clearly,
we introduce an example, that is the Dos attack scenario in
Fig.2.
1) Firstly, attacker scans the destination nodes to find
alive services and exploit vulnerabilities existing in the
services.
2) After finding out alive services, there are two attack
choices: the simpler one is to attack the destination services
using SYN flooding. In this way , the legal users will be not
able to access the services; the other way is more
experienced and more harmful, if the attacker finds that there
are Sadmind vulnerabilities in destination nodes, then he or
she can carry out Sadmind buffer overflow attacks, and gains
some access privileges of the destination nodes.
3) The attacker installs Mstream tools in the destination
nodes using acquired privileges.
4) The controller node interact with the controlled nodes,
in which the Mstream tools are installed, they are preparing
for DDos attack.
5) All the zombie hosts send ACK packets to the target,
and consume the resources of the target.
In attack scenario tree, each node represents a matchable
rule, and the tree is defined by XML. Now we present the
DTD of the attack scenario tree:

ATTACK SCENARIO RECONSTRUCTION TECHNOLOGY
BASED ON STATE MACHINE

Attack scenario reconstruction technology based on state
machine combines cluster analysis and causal analysis
together to process security events concurrently, and restore
the process of attacker intruding into the cyberspace. State
machine based correlation analysis is an online real-time
process, and this working can reduce the correlation time
delay obviously. Next, we will describe the correlating
algorithm and some important concepts related to the attack
scenario reconstruction technology detailedly.
A. Definition of the Intrusion Scenario Base and the Attack
Scenario Tree
Definition 1 intrusion scenario base: intrusion scenario
base is a set, IntrusionScenarioBase = {AttackScenario_1,
AttackScenario_2,..., AttackScenario_i,..., AttackScenario_n},

<?xml version=“1.0”encoding=“UTF-8”?>

2850

that after the first rule matched successfully, if the router
cisco-router presents a “Netflow aggregation Emergency”
event in 30 seconds, and this event’s source and destination
are the same as the first rule’s, then large flow of data
transfer happens. If the two successive rules are all matched
successfully, then a To consume the FTP server's disk
volume attack scenario happens in the cyberspace. We will
explain the correlation algorithm detailedly in 3.3.

<!ELEMENT attack_scenario(rule)>
<!ATTLIST attack_scenario
id
ID
#IMPLIED
name
NMTOKEN
#REQUIRED
priority
NMTOKEN
#REQUIRED
>
<!ELEMENT rule(rules)>
<!ATTLIST rule
name
ID
#IMPLIED
plugin_id
NMTOKEN
#REQUIRED
plugin_sid
NMTOKEN
#REQUIRED
src_ip
NMTOKEN
#REQUIRED
dst_ip
NMTOKEN
#REQUIRED
src_port
NMTOKEN
#REQUIRED
dst_port
NMTOKEN
#REQUIRED
protocol
NMTOKEN
#REQUIRED
timeout
NMTOKEN
#REQUIRED
occurrence
NMTOKEN
#REQUIRED
>
<!ELEMENT rules(rule+)>

B. The Correlation State Machine
After defining various attack scenario trees and acquiring
the intrusion scenario base, the correlation engines will
match security events with the attack scenario trees timely
and restore the attacker’s intruding process into the
cyberspace. While processing the security events, the
correlation engine must maintain a correlation state machine
for every half-matched attack scenario.
Definition 3 correlation state machine: correlation state
machine is a dynamic mapping of the attack scenario tree,
and it is maintained by the correlation engine in memory.
Each state is derived from the corresponding rule node of the
attack scenario tree and is a fifteen tuple, that is state_i
=( plugin_id, plugin_sid, src_ip, dst_ip, src_port, dst_port,
protocal, timeout, occurrence, srcIP_record, dstIP_record,
srcPort_record, dstPort_record, eventCounter, startTime).
The first nine attributes of the state indicate the
characteristics of the security events which can be processed
by this state, and their meanings are the same as the rule
presenting. srcIP_record, dstIP_record, srcPort_record and
dstPort_record are used to record the characteristics of the
events processed by this state, eventCounter is used to record
the number of the events processed successfully and
startTime indicates the start time that this state takes effect.
The correlation state machine is an intermediate process,
it is used to track and record the process of matching
between security events and attack scenario timely. timeout
and occurrence are the two core concepts of the state
machine. timeout indicates that how long the engine
monitors one state, it corresponds to the certain attack step’s
lasting time in multi-step attack. occurrence presents the
number of the security events that the state can process,
essentially, this attribute means to classify the similar
security events, it reflects the idea of clustering analysis.
timeout and occurrence work cooperatively, if the correlation
engine processed “occurrence” security events successfully
in the time limit of “timeout”, the current states of the state
machine will transfer, this reflects the development of the
multi-step attack. The cooperative working of occurrence
and timeout realizes the unification of clustering analysis and
causal analysis.
Definition 4 state machine queue: the state machine
queue list is a queue data structure. Each element of the
queue is a state machine, and it represents the occurent attack
scenario. The state machine queue presents all the occurent
attack scenarios in the cyberspace.
We illustrate an example of how to construct a state
machine through the Dos attack scenario. If the first
“PortScan” security event is generated and the state
machinie queue list is null, then the correlation engine will

The XML files describing attack scenario trees present
the ID of the attack scenario tree in the intrusion scenario
base, the name of the tree and the priority of this attack
scenario. Each node of the tree is a rule, and the rule is used
to match the security events. The attributes of the rule are
described as follows: name is the unique identification of the
rule, plugin_id and plugin_sid present the characteristic of
the matchable events together, plugin_id indicates the
security device generating the events, and plugin_sid
indicates the events’ type. src_ip indicates the matchable
events’ source address, and dst_ip indicates the destination
address, src_port and dst_port indicate the events’ source
port address and destination port address. protocol indicates
the protocol type of the events, such as TCP, UDP, etc.. The
most important attributes of the rules is timeout and
occurrence, timeout means how long this rule can be used in
a detection activity, and occurrence means how many events
can be matched successfully with this rule. These two
attributes are the basis of the correlation state machine
working.

Figure 2. Definition of To consume the FTP server's disk
volume attack scenario tree



The attack scenario tree of the “To consume the FTP
server's disk volume” attack scenario in Fig. 1 is defined as
Fig. 2. Two successive rules “FTP Authentication failure”
and “Netflow Stream abnormal” are defined. The first rule
indicates that if the process of ossec-msftp presents five
“ssec: FTP client request ”events in 20 seconds, a force
login to the FTP server happens. The second rule indicates

2851

find the attack scenario tree whose root rule can be matched
with the “PortScan” event in intrusion scenario base, it finds
that the scenario of “Dos attack scenario” is appropriate, so
the engine will construct a “Dos” state machine for this
attack scenario in memory and sets the root node being the
only element of the current state set of this state machine, as
Fig. 3 shows.

information to the security manager, so the whole process of
the attackers intruding into the cyberspace will be restored.
Now we present the correlating algorithm of the system.
Algorithm 1: security events correlation
Intput: the state machine queue list.
Output: attack scenario description information
ScenarioInfo; updated state machine queue list.
ķ j =readEvent(); /*read the security events preprocessed, if
not, waited*/
ĸIF (list == null){
i=0;
while (i<intrusionScenarioBase.size){
/*find the appropriate attack scenario tree in intrusion
scenario base */
IF(match(j, AttackScenario_i.firstRule))
break;
i++;
}
IF(i = intrusionScenarioBase.size){
/* lack of the predefined knowledge*/
notifySecurityManager(j. characteristics);
goto ĺ;
}
StateMachine =createStateMachine(AttackScenario_i);
StateMachine.CurrentStateSet().add(root);
StateMachine.CurrentStateSet().process(j);
list.addStateMachine(StateMachine);
}
ĹELSE {
k=0;
while(k<list.size) {
/* if the current state set of state machine k can
process event j*/
IF(list.getStateMachine(k).CurrentStateSet().proces
s(j)==true){
IF(the states processing j are leaf nodes of StateM
achine_k) {
/*generate ScenarioInfo, and sent it to the
manager*/
ScenarioInfo=generateAttackScenarioInfo(list.g
etStateMachine(k));
sendInfor(ScenarioInfo);
delete the leaf states from StateMachine_k.Cur
rentStateSet()
}
/*put machine k to the head of the queue according
to LRU*/
toTheHeadofTheQueue(list.getStateMachine(k));
break;
}
k++;
}
IF(k== list.size) {
/*there are not matchable machines in list*/
go to intrusionScenarioBase and do the same thing
as list ==null besides that add the new StateMathine
to the head of the list;

Figure 3. The Dos state machine in the state machine queue list

In Fig. 3, the current state set includes one element, it is
State_1. The correlation engine will monitor in this state for
5 seconds, if the number of the “PortScan” events processed
by this state achieves 30 (that is eventCounter equals
occurrence) in 5 seconds, the state will transfer. After
transferring, the current state set of this state machine
includes two elements, that is State_2 and State_3. As Fig. 4
shows.

Figure 4. The Dos state machine after state transferring

When the current states process the matchable events,
there is a question need to be paid more attention to. The
states will record the events’ characteristics which have been
processed. For example, in Fig.3 State_1 will record 30
events’ characteristics, the attack type of these events is the
same, but the addresses of these events may be different,
how to record them in one state. Here we integrate the IP
addresses and congregate the port addresses. Integrating of
IP addresses can present the source area and the destination
area of the attack activity, it is very useful in large-scale
network intrusion detection, as dstIP_record of State_1in
Fig.3 and Fig.4.
C. Correlation Algorithm
The attack scenario reconstruction system based on state
machine can correlate the security events timely and then
present the comprehensive attack scenario description

2852

/*eventCounter achieves occurrence in the time
limit of timeout*/
StateSet.delete(state);
state.children.startTime=System.current
Time();
StateSet.add(state.children);
/* states transferred*/
}
}
ELSE {/* the state is disabled */
StateSet.delete(state);
}

}
}
ĺ goto ķ ; /* to process the next event*/

In algorithm 1, we must bear in mind that the number of
the current state of each state machine may be more than one,
we use the current state set to maintain them, as State_2 and
State_3 in Fig.4. When the security event is coming, every
element in the current state set will participate the correlation,
if one state’s attributes Plugin_id and Plugin_sid include the
event’s, the eventCounter will increase 1 and some
characteristics of this event will be recorded, if not, do
nothing. If the states processing the event successfully are
leaf nodes of the state machine, then the function of
generateAttackScenarioInfo() will be called and the attack
scenario description information will be generated, one leaf
state causes one attack scenario description information.
Attack scenario description information records the full path
from the root node to the leaf node, and some other
important datas are recorded too. After the attack scenario
description information is presented to the security manager,
the leaf node will be deleted from the state machine’s current
state set. The state machines in list are managed according to
LRU, namely if the current state set of a state machine
process the security event successfully, this state machine
will be transposed to the head of the queue. The time delay
of correlating will be reduced considerably in this way,
because the probability that the next event will be processed
by this machine is maximum according to “principle of
proximity”[10].
The correlation engine works depending on the state
machines, in order to maintain these state machines in list ,
we assign a thread to monitor and manager them. The thread
checks the current states of every state machine in the queue
list, if the counter eventCounter equals occurrence in the
time limit of timeout, then the thread deletes this state from
the current state set of the state machine, and add this state’s
children nodes to the current state set, then the state
machine’s current states is updated, that is the states
transferred. If eventCounter is still less than occurrence
when the time limit timeout is consumed, this state is
disabled, then the thread deletes it from the state machine’s
current state set. If the current state set of a state machine is
null, namely the current state set includes nothing, then
deletes this state machine from the queue list. Algorithm 2
describes the body of the thread.
Algorithm 2: body of the thread.
Intput: state machine queue list.
Output: updated list.

}
k++;

}

}
}
ELSE ;

IV.

EXPERIMENT ANALYSIS

We implement a prototype to analyze and validate the
key technology of constructing attack scenario based on state
machine. We replay the DARPA 2000 intrusion scenario
specific data sets[11] in the experiment network to test the
prototype system. DARPA 2000 intrusion scenario specific
data sets is constructed by the Lincoln Laboratory of MIT
sustained by DARPA, and it is used to validate various
correlation algorithms widely[8][12].
The granularities of the attack scenarios presented by the
attack scenario trees may vary, it depends on the security
manager, that means when predefines an attack scenario tree,
the security manager can make it include the whole process
of the attack activity, or make it include only partial steps of
the whole process and the whole process will be presented
by the uniting of some attack scenario trees. To define the
attack scenario trees with different granularity is out of the
consideration of real time and accuracy. For example, we
can define a Dos Attack Scenario attack scenario tree to Dos
attack, it includes the whole 5 steps of a classic DDos attack
activity, as Fig.2 shows, also we can define 5 attack scenario
trees and each one corresponds to a certain step, because
every step is a penetration process to and it will generates
many security events.
While experimenting, we predefine two attack scenario
trees, one is Dos Attack Scenario attack as Fig.2 shows, the
other one only presents the second step of the DDos attack,
that is to gain some access privileges of the destination nodes
through buffer overflow attack. We will validate the
correlation technology presented by us using these two
examples.

while(true){
IF(list!=null){
k=0;
while(k<list.size) {
StateSet =list.getStateMachine(k).CurrentStateSet();
IF(StateSet ==null)
list.deleteMachine(k);
Foreach state : StateSet {
IF(System.currentTime()-state.startTime<=stat
e.timeout){
IF(state.eventCounter!<state. occurrence){

A. Single Step Test
The dataset of DARPA 2000 includes 649787 packets,
we divide it into five subdatasets according to the timetable
that every attack step happens, namely each subdataset
corresponds to one certain attack step. The subdataset
corresponding to the second attack step of DDos attack
activity includes 12515 packets. We use the tool of TCP-

2853

replay to replay these packets in the experiment network,
and the security devices such as Snort, Snare and Ossec will
generate many security events. The experiment started at
‘2010-1-4 14:08:45’, and the replay process stopped at
‘14:13:50’. The correlation engine analyzes and processes
the security events timely, and presents 10 attack scenario
description information at last, as Fig. 5 shows.

as stepping-stones by the attacker, and the risk of the DDos
attack is 9 (10 is the maximum). Fig.7 presents the scenario
graph of DDos attack.
V.

A state machine based attack scenario reconstruction
technology is proposed in this paper, it combines the
clustering analysis and causal analysis together to process the
security events. The state machine corresponding to attack
scenario achieves the online process of the security events,
and the transfer of the states reflects the development of the
multi-step attack. The attack scenario description
information instead of the raw security events is more
comprehensive, and the security manager will never need to
analyze the raw events, which is an impossible work. The
experiment results show that it is feasible to process the
security events using this technology.
One of the most important works in the future is to enrich
and improve the intrusion scenario base, the effect of the
correlation depends on the knowledge in the intrusion
scenario base. Another direction of our future research is to
assess the network’s security situation based on the
correlation results.

Figure 5. The attack scenario description information corresponding
to the second attack step of DDos attack

After analyzing the results of the experiment, we find
that the security devices generate 89 security events, and the
correlation engine generates 10 attack scenario description
information after processing these events, the rate of
eliminating redundancy achieves

89  10
89

=88.76%, it is

efficient. The experiment starts at ‘2010-1-4 14:08:45’, and
the first description information is generated at ‘14:10:13’,
the time delay is less than 2 minutes, it is timely. The
scenario description information includes the attack
activity’s name, lasting time, source, destination, puppet
hosts used as stepping-stones and some other important
security attributes, the information is abundant. The attribute
risk presents the harm that this attack activity will do the
cyberspace, it is based on the priority of the attack scenario
tree.
B. Full Step Test
It costs 3 hours and 15 minutes to replay the complete
dataset, we started at ‘2010-1-4 15:10:00’, and the replay
process stopped at ‘2010-1-4 18:24:13’. At last the
correlation engine presents 3 attack scenario description
information, as Fig.6 shows.

Figure 6. The attack scenario description information of DDos attack

Figure 7. The attack scenario graph of DDos attack

We find that attacker 202.77.162.213 started attacking
the target 131.84.1.31 at ‘2010-1-4 16:03:07’, and the
attacking process lasts about 1 hour and 20 minutes, hosts
172.16.112.10, 172.16.115.20 and 172.16.112.50 are used

CONCLUSION

REFERENCES
[1]

Jung-ho Eom, Young-Ju Han, Seon-Ho Park. Active Cyber Attack
Model for Network System’s Vulnerability Assessment. 2008
International Conference on Information Science and Security.
[2] Alfonso V,Keith S. Probabilistic Alert Correlation[C].Proc.of the 4th
International Symposium on Recent Advances in Intrusion Detection.
Springer-Verlag,2001.
[3] Debar H., Wespi A.. Aggregation and correlation of intrusion
detection alerts. In: Proceeding of the 4th International Symposium on
Recent Advances in Intrusion Detection(RAID). Lecture Notes in
Computer Science 2212. Springer-Verlag,2001.
[4] Daim O.,Cunningham R.K.. Building Scenarios from a
heterogeneous alert stream. In: Proceeding of the IEEE SMC
Information Assurance Workshop. West Point,NY,2001
[5] Dain O,Cunningham R K. Fusing a Heteorgeneous Alert Stream into
Scenarios [A].Proceedings of the 2001 ACM Workshop on Data
Mining for Security Applications[C],2001;1-13
[6] Steven C,Ulf L,Martin F.Modeling Multistep Cyber Attacks for
Scenario Recognition[C].Proc of Third DARPA Information
Survivability Conference and Exposition.Washington,2003.
[7] Benjamin M,Herve D.Correlation of Intrusion Symptoms:An
Application of Chronicles[C].Proc.of the 6th International
Symposium
on
Recent
Advances
in
Intrusion
Detection,Pittsburgh,PA.USA: Springer-Verleg,2003.
[8] Ning P., Cui Y. Techniques and tools for analyzing intrusion alerts.
ACM Transactions on Information and System Security,
2004,7(2):274-318
[9] Frederic C,Alexandre M.Alert Correlation in a Cooperative Intrusion
Detection Framework[C].Proc.of IEEE Symposium on Security and
Privacy, Oakland, California,USA,2002.
[10] Tang Xiaodan. Computer operating system (third edition )[M]. XI
DIAN UNIVERSITY PRESS 2007.05 (in Chinese)
[11] 2000 DARPA Intrusion Scenario Specific Data Sets[OL].[2008-0124]. http://www.ll.mit.edu/IST/ideval/data/2000/2000_data_index.ht
ml
[12] Wei Yong, Lian Yifeng, Feng Dengguo. Network security situation
assessment model based on information fusion[J]. Journal of
Computer Research and Development, 2009ˈ46˄3˅˖353ˉ362
(in Chinese)

2854

