2010 24th IEEE International Conference on Advanced Information Networking and Applications

MARS: Multi-stage Attack Recognition System
1

Faeiz Alserhani

2

Monis Akhlaq

3

Irfan U Awan

4

Andrea J Cullen

Informatics Research Institute University of Bradford BD7 1DP, United Kingdom 1 2 3 4 { f.m.f.alserhani , m.akhlaq2 , i.u.awan, a.j.cullen}@bradford.ac.uk 5 Pravin Mirchandani Syphan Technologies, www.syphan.com 5 pmirchandani@syphan.com
Abstract-- Network Intrusion Detection Systems (NIDS) are considered as essential mechanisms to ensure reliable security. Intrusive model is used in signature-based NIDS by defining attack patterns and applying signature-matching on incoming traffic packets. Thousands of signatures and rules are created to specify different attacks and variations of a single attack. As a result, enormous data with less efficiency is produced that overwhelms the network administrator. Most of the generated alerts are false-positives; this is due to the redundancy caused by the detection techniques, and due to low-level processing capacity. Moreover, detection of novel and multi-stage attacks are not efficiently achieved by the current systems. Hence, highlevel view of the attacker's behaviour has become a stressing demand. Alerts correlation techniques have been widely used to provide intelligent and stateful detection methodologies. This is to understand attack steps and predict the expected sequence of events. However, most of the proposed systems are based on rules libraries specified by security experts, which is a cumbersome and error prone task. Other methods are based on statistical models; these are unable to identify causal relationships between the events. In this paper, we identify the limitations of the current techniques and propose a framework for alert correlation that overcomes these shortcomings. An improved "cause and effect" model will be presented cooperating with statistical model to achieve higher detection rate with minimum false positives. Knowledge-based model with vulnerability and extensional consequences parameters has been developed to provide manageable and meaningful graph. The proposed system is evaluated using DARPA 2000 and collected real life data sets. The results have shown an improvement in respect to detection rate and reduction of false positives. Keywords-Network intrusion correlation; multi-stage attack;. detection systems; Alerts

different variations of cyber attacks. The current implementation of intrusion detection systems (commercial and open-source) is employing signature-based detection in addition to few simple techniques for statistical analysis. The main task of signature-based systems is to inspect the network traffic and perform pattern matching to detect attacks and generate alerts. A huge number of alerts are generated every day stressing the administrator; this may oversight an actual threat. Quality of these alerts is debatable particularly if the majority is false positives. For this reason, high-level and realtime analysis techniques are needed. This can be achieved by discovering the logical connections between the isolated alerts. It has been practically identified that most of attacker activities consists of multiple steps (attack scenario) and occur in a certain time (attack window). Identification of such strategy can lead to the recognition of attack intensions and also prediction of unknown attacks. Some simple analysis tools have been developed to generalize these alerts based on attack classes [19]. In recent years, alerts clustering and correlation techniques have been employed to provide a global view of attacker's behavior by analyzing low-level alerts produced by the IDS sensors. The main objective of alerts correlation is to build an abstract modeling of alerts by generalizing the detected events instead of the current specific modeling. The constructed inference will progress even in case of unforeseen attacks. Different approaches have been utilized to build the correlation models, and can be categorized into three main disciplines: probabilistic approaches, scenario-based approaches and pre/post conditions approaches. The probabilistic approaches are inspired from anomaly-based intrusion detection systems where prior knowledge is not required. In this category, relations between incurred events are computed statistically providing automatic knowledge acquisition. Data mining, clustering, association rules techniques are examples of these approaches. [4] presented a probabilistic approach to provide unified mathematical framework that perform a partial matching of features. Features are extracted and minimum similarities are computed and weighted. [5] proposed alarm clustering to discover the root causes of different alarms. The aim was to reduce the volume of alarms to manageable size. Even though, these methods are useful for alert fusion and statistical purposes but they fail to discover the causal connection between alerts.
753

I.

INTRODUCTION

Malicious attacks by intruders and hackers exploit flaws and weaknesses in the deployed systems. This is done by several sophisticated techniques cannot be prevented by traditional measures. Hackers are shifting their focus from looking for fame and advertised attacks to profit-oriented activities. The current trends in cyber attacks are hidden, slowand-low, and coordinated. NIDS are considered to be important security tools to defend against such threats. The effectiveness of any NIDS depends on its ability to recognize

1550-445X/10 $26.00 Å  2010 IEEE DOI 10.1109/AINA.2010.57

Recently, [16],[17]and[18] employed different data mining algorithms for real-time correlation to discover multi-stage attacks. Off-line attack graph is constructed using manual or automatic knowledge acquisition and then attack scenarios are recognized by correlating the collected alerts in real-time. The incoming step of an attack can be predicted after detection of few steps of attack in progress. In [16] association rule mining algorithm is used to generate the attack graph from different attack classes based on historical data. "Candidate attack sequences" are determined using a sliding window. In [6] AprioriAll algorithm which is a sequential pattern matching technique is used to generate correlation rules based on temporal and content constraints. [6] adopted a classical sequential mining method GSP[7] to find the maximal alerts sequence and then to discover the attack strategy. The limitation of their work is the use of only attack class and temporal as features. On the other hand, scenario-based modeling is based on manual knowledge acquisition that specifies intrusion steps by experts. Scenario libraries are used to build the model and to discover the logical connections between alerts. LAMBDA [8] is an intrusion specification language to describe the conditions and effects of an intrusion in connection to the variable state of the victim system. Similarly, in STATL [11] language, sequence of events conducted by the attacker can described to express multi-stage attack. However, these approaches need a manual description of possible attacker's behavior and if a single step is missed the whole behavior go undetected. The third category is the pre/post conditions techniques which are based on the notion that the older alerts prepare for the later ones. These approaches require specifying the criterion used to discover the relations between alerts and the weights of such relations. Early, [12] proposed a require/ provide capabilities model using attack specification language "JIGSAW". However, the exact matching between require and provide conditions is employed causing different variation of the same behavior is not detected. [10] proposed MIRADOR correlation approach for alert clustering, merging and then correlation. Explicit correlation of events based on security experts is used to express the logical or topologic links between events. Attack is specified using five fields and based on the language of LAMBDA [8]. Partial matching techniques are adopted to build the model. In addition to explicit correlation, implicit correlation is used to overcome possibly missing events. Authors in [2,3] proposed alert correlation model based on prerequisites and consequences of individual detected alerts. A knowledge database "Hyper-alert Type Dictionary" contains rules that describe the conditions where prior behaviors prepare for later ones. Attack strategy is represented as a Directed Attack Graph(DAG) with constraints on the attack attributes considering the temporal order of the occurring alerts. The nodes of the DAG represent attacks and the edges represent causal and temporal relations. Similarities between these strategies are measured to reduce the redundancy. A

technique of hypothesizing and reasoning about missing attacks by IDS is presented to predict attribute values of such attacks. The significance of their work is the reduction of the huge number of security incidents and to report a high-level view for the administrator. However, the proposed system is useful as a forensic tool where it perform offline analysis. In addition, building the knowledge database containing rules of the applied conditions is a burdensome. However, authors have not provided a mechanism to build the Hyper Alert dictionary. Also, the generated graph is huge even with medium size datasets. In other respect, [13,14] proposes a combination of statistical and knowledgebase correlation techniques. Three algorithms are integrated based on assumption that some attack stages have statistical and temporal relations even though direct reasoning link is not existent. Bayesian-based correlation engine is used to identify the direct relations among alerts based on prior knowledge. In contrast to pervious approaches, knowledge of attack steps incorporates as a constraint to probabilistic inference to avoid the exact matching of pre and post conditions. Causal Discovery Theory-based engine is developed to discover the statistical of one-way dependence among alerts. In addition, GrangerCausality-based algorithm is used by applying statistical and temporal correlation, to identify mutual dependency. However, the problem of selection time window for temporal correlation is still an open problem. Attackers can exploit the slow-andlow attack to avoid detection. Attack prediction also relies on prior knowledge where zero-day attack is not detected. Although the past techniques dealt with reducing the massive number of collected data by NIDS, however there are many limitations. First, the analysis of attack strategy recognition is too complex especially if the task broadens to predict the unknown steps. Knowledge-based approaches are more accurate due to rules matching mechanism which are built based on experts' knowledge, but it needs more efforts to provide precise rules. Statistical and temporal analysis techniques are unable to detect causal relations among events, but they don't require prior defined rules. Adoption of such systems in real-time is still an open question, where most proposed systems have been tested in offline fashion or in a low volume traffic environment. The huge number of detected events leads to graph explosion as in [2,3]. Moreover, missing attacks by the IDS can result in separate scenarios related to the same attack. Attackers also exploit the attack sliding window used in most approaches by performing slow-and-low attack. Alerts correlation modeling has to provide a type of intelligence for attack strategy recognition. A framework consists of several components needed to enjoy capabilities of different approaches. A combination of knowledge-based, statistical and temporal based, data mining and machine learning can incorporate to provide more intelligent system. In this paper we propose a novel approach to overcome the limitations of the past techniques. Attack strategy recognition cannot be implemented in a single stage or using a single

754

component. In this paper, our work aims to build a correlation model based on pre/post conditions techniques [2,3,8,9,10]. We have selected this approach for several reasons. First, instead of specification of the whole steps of the attack scenario, only the specification of prerequisites and consequences of an event is required. This provides a flexible approach particularly if a partial satisfaction of correlation is employed. Second, even if the attacker starts the attack from advanced steps, the behavior is still detected. Similarly, if an alert is missed and the scenario is divided into different graphs, these sub-scenarios can be correlated. Third, the model is expandable to incorporate other mechanisms such as probabilistic approaches. In addition, we have adopted [13, 14] approach to incorporate a statistical model by employing data mining techniques to perform alert clustering. A framework is proposed to combine two engines: online and offline, and two mechanisms: high quality knowledgebased and statistical-based correlation. In addition, the proposed framework employs various tools that help the administrator to recognize multi-stage attacks and attackers behaviors. Also, one of the major limitations of other approaches is the reliance on a simple analysis due to lack of evaluation methodologies and well-documented data sets. The system in this paper is tested using real and comprehensive traffic traces contains current attacks in order to validate the system performance. The focus in this paper will be on the design of the knowledge-based engine. We have improved the correlation performance by adding two parameters: vulnerability and extensional consequences, this has been done to reduce the graph size and give more accurate correlation. The rest of this paper is organized as follows: section 2 explains the problem scope. Section 3 states the framework architecture and Section 4 presents the knowledge-based model. In section 5 we present the implementation and the experimental results, and then we conclude in section 6. II. PROBLEM SCOPE It has been identified from cyber-security field that wellplanned attack consists of number of stages conducted in a temporal order. True alerts belong to intrusion generated by the IDS systems are not isolated; they also reflect the sequential pattern of the attacker. However, IDS systems consider these alerts as individual events and report that to the administrator with huge amount of alerts most of them are false positives or not critical for the protected system. A high level view of these incidents can assist to recognize attacker's plan and take a rapid action to protect the network. Moreover, IDS systems due to their limitations can not detect all variation of unseen attacks. However, the alert correlation systems can predict the upcoming attack based on the pervious behaviors of attackers. Also, False alarms can be excluded because they are often isolated and non-critical events. In order to achieve this task it is required that the correlation approach considers:

Ë Real-time or at least near real-time correlation that inspect the incoming alerts and correlate them to the older ones. However, it is a challenging task particularly if we consider the scalability, the huge amount of alerts and the speed of the current implementation of communication networks. [2,3] developed TIAA system that perform the correlation in memory using nestedÂ­loop mechanism and [16] proposed queue graph mechanism. However, they have not provided any evaluation in high-speed networks to assess the system scalability. Ë Recognition of missed attack by the IDS which will cause a division of scenario or graphs into separate ones. The correlation system has to be able to correlate isolated scenario using implicit correlation. This mechanism also, can be used to predict unknown attacks by hypnotizing the expected step which can be variations of known attacks. Ë Slow-and-low attacks conducted by skillful attackers to avoid detection. Most of the implemented system uses a sliding window to avoid graph explosion and hence very old events are ignored. However, determination of the value of sliding window is also critical to provide higher detection rate. Ignoring old events can result in the success of a dangerous intrusion attempt. Ë Alert verification where not all alerts are critical and they have different effects on the system. This mechanism will reduce the huge number of correlated alerts by focusing on the significant ones. Ë The configuration of the protected system can incorporate to reduce false positives and provide higher meaningful and accurate results. Host response can also be involved to shift the focus to the critical events. The main contribution of this work is the development of a framework for alert correlation system that meets these requirements. III. ALERT CORRELATION FRAMEWORK In this section, we introduce the proposed alert correlation framework which consists of two components as shown in Figure.1. We assume that IDS alerts are saved in a database. A. Online Component The main purpose of the online component is to receive the incoming alerts generated by the IDS and apply multi-stage attack recognition in real time. Rules produced by the offline model are used to identify the connection (explicitly or implicitly) between new alerts and the older ones. The results will be displayed as DAG to the administrator providing a big picture of ongoing attacks. Two engines are involved in this component: Ë Alert online aggregation to receive alerts and generate Hyper alerts.

755

Ë Multi-stage attack recognition to correlate hyper alerts based on rules provided by the offline model. B. Offline Component The task of the offline component is to build the attack strategy model and it consists of: Ë Hyper Alert Database that save a copy of the Hyper Alerts generated by the previous component. Ë Alert Correlation Engine which incorporates two engines: Knowledge-based engine and Statistical-based engine. Ë Attack Strategy Model that provide rules to correlate the Hyper Alerts in the main memory in real-time. In this paper we will present the Knowledge-based engine that uses an improved pre/post condition mechanism as discussed in the next section.
Online Component

Extensional Consequences: is an extended description of possible consequences in a form of predicates with free variables of facts. Vulnerability: is a description of state of target host or network with free variables of facts. The main difference between our work and the model presented in [2,3] is the additional tuples : Extensional Consequences and Vulnerability. The extensional tuple has been proposed to list all potential consequences to broaden the correlation mechanism. An attack may be unsuccessful and ignored, however, this may give the attacker new capabilities for another attack and must be considered. For example, when the attacker tries to read or write files of a web application and on the same time the application is not accessed (not vulnerable). However, from the server replay the attacker identifies the version of the application and tries another attack, this should be taken into account. The extensional consequences describe a list of all likely attacks that can be conducted; this is quite useful to predict attacks which may be missed by IDS. In addition, the information provided by elementary alerts does not reflect the actual state of the target system. For this reason, we proposed additional information about the vulnerability and the state of the victim to produce more realistic correlation. The vulnerability knowledge will ignore insignificant alerts from correlation process to reduce the resulting graph. A resulting huge graph with false positive correlation in [2,3]will be avoided. Definition. 2 A hyper-alert instance h is defined as a set of instances of hyper-alert type T by substituting the attributes in Fact tuple with associated values considering the time constraints (start-time and end-time). Definition. 3 Given a hyper-alert type T and a hyper-alert instance h, the Prereq(T), Conseq(T), ExConseq(T) and Vul(T) sets are the sets of all predicates. Given a hyper-alert instance, the Prereq(h), Conseq(h), ExConseq(h) and Vul(h) sets are the predicates by mapping the arguments to the corresponding attribute values in h considering the time constraints. Defintion 4. Given a pair of hyper-alert h1, h2 ordered temporally, h1 prepare to h2 if:
1- There exists at least one common predicate in Prereq(h2), Conseq(h1) and ExConseq(h1). 2- Satisfaction of Vul(h) constraints. 3- Conseq(h1).End_time >=Prereq(h2).start_time , ExConseq(h1).End_time

Alert online aggregation
Hyper-Alert

Multi-stage attack recognition

Hyper-Alert Database

Alert Correlation Engine
Knowledge base Engine Statistical Eengine

Attack Strategy Model

Offline Component

Figure 1.

Alert Correlation Framework

IV.

KNOWLEDGE-BASED MODEL

This section describes our Knowledge-based model that generates rules to correlate hyper alerts. Some of the following definitions are based on the model presented by [2,3]. The proposed model for the knowledge base consists of three sets: - Predicates: which specify the prerequisites, the consequences and the extensional consequences of a given alert. - Hyper-alert types: which specify the related predicates of a given alert. - Implications: which specify the relations between different predicates. Definition 1. A hyper-alert type T is an abstraction of elementary alerts generated by IDS defined by a set of (Facts, Prerequisites, Consequences, Extensional Consequences, Vulnerability) where: Facts: is a set of names of associated attributes such as source and destination IP addresses. Prerequisites: is a set of pre-conditions specified in a form of predicates with free variables of facts. Consequences: is a set of post-conditions specified in the form of predicates with free variables of facts.

The partial matching mechanism has been used to avoid the hard-coded correlation as in scenario-based methods. Also if the consequences of the older alerts imply the prerequisites of the later ones, they will be correlated. Definition 5. Correlated Attack Graph CAG(N,E) is defined as a Directed Acyclic Graph (DAG) consisting of a set of nodes N connected by edges E. Nodes n1,n2,n3, ....,ni  N

756

represent the hyper-alert set and edges e1,e2,e3,....ej represent the prepare for relationship.

Algorithm: Alert Correlation Input: elementary alerts generated by the IDS Output: Correlated Attack Graph CAG(N,E) Methods: 1- Let CAG(N,E) = null 2- Map elementary alerts to hyper alerts (h0,h1,......,hi) 3- Let h0 isolated hyper-alert 4- For k=1 to i If a. at least one Prereq(hi+1)  Conseq(hi) U Prereq(hi+1)  ExConseq(hi) b. Vul(hi+1) exists. c. Conseq(hi).End_time >= Prereq(hi+1).Start_time U ExConseq(hi).End_time >= Prereq(hi+1).Start_time Then Add CAG(nhi, nhi+1) 5- Return CAG(N,E)
Figure 2. Alert Correlation Framework

effectiveness of our approach to recognize attack scenarios, to correctly correlate the alerts, and to minimize the false positives. Both DARPA 2000 datasets contains attacks conducted in stages. The attacker, first, probes the target system to identify the live machines, tries to breaks in the system, installs the DDoS software, and finally, launches the DDoS attack to off-side network. The difference between the two datasets is that the LLDOS 2.0.2 includes more sophisticated stages and stealthy attacks. We have tested our methods on both, using the traces of the DMZ and the inside network. Snort 2.8.2 [21] with default configuration has been used to generate elementary alerts which are saved in MSSQL database. In addition to our system, we have used the system developed by [2,3] (TIAA) for comparative evaluation.
TABLE I. Phase
SUMMARY OF ATTACK PAHASES IN LLDOS1.0

dataset Inside1.0 Inside2.0.2 Inside1.0

Alert name
ICMP PING ICMP Echo Reply No alerts RPC portmap sadmind request UDP RPC portmap Solaris sadmind port query udp request RPC sadmind UDP PING ICMP Destination Unreachable Port Unreachable RPC portmap sadmind request UDP RPC portmap Solaris sadmind port query udp request RPC portmap Solaries sadmind port query udp portmapper sadmind port query attempt RPC sadmind query with root credentials attempt UDP RPC sadmind UDP NETMGT_PROC_SERVICE CLIENT_DOMAIN overflow attempt RPC portmap Solaris sadmind port query udp request RPC portmap sadmind request UDP RPC sadmind UDP NETMGT_PROC_SERVICE CLIENT_DOMAIN overflow attempt RPC sadmind query with root credentials attempt UDP RPC portmap Solaries sadmind port query udp portmapper sadmind port query attempt INFO TELNET login incorrect No alerts RSERVICES rsh root Same as in Phase2 with different source address SNMP AgentX/tcp request BAD-TRAFFIC tcp port 0 traffic SNMP trap tcp SNMP request tcp ICMP Destination Unreachable Port Unreachable

#
20 20 76 76 3 72 2 2 2 2 2

Phase1: probing Phase2: Service mapping

Inside2.0.2

We have to mention that the difference between the consequences and the extensional consequences parameters is that, the first one is used to create an explicit edge while the other one is for implicit correlation. The vulnerability knowledge can be collected using a vulnerability scanner such as Nessus[22]. V. IMPLEMENTATION AND EXPERIMENTAL RESULTS

Phase3: Break-ins

Inside1.0

14 14 14 14 14 4

In this paper we have implemented the first part of the system namely, knowledge-based correlation engine. The test has been conducted in offline fashion to validate our results comparing with other approaches. A prototype has been designed and implemented using C++ language and MSSQL database. We have conducted a comparative methodology to asses that the algorithm is effective to provide realistic results. In [2,3] and most of other approaches a huge and unmanageable graph is generated due to incorrectly correlated alerts particularly if a large dataset is used. We have performed two experiments to test our correlation method. The first experiment has been performed with DARPA 2000 datasets [20] to comparatively validate our approach. The second experiment has been conducted using a real dataset collected from our lab containing various attacks and injected by background traffic. A. DARPA Dataset Experiment DARPA 2000 datasets [20] including LLDOS 1.0 and LLDOS 2.0.2, are often used to evaluate IDS and alert correlation systems. The evaluation goal is to test the
Phase4: Installation of mstream software Phase5: Launching DDoS attack

Inside2.0.2 Inside1.0 Inside2.0.2 Inside1.0

8

Inside2.0.2

4 3 1 1 1

To understand how the correlation method identifies the causal relationships between Snort's alerts, we have summarized the related alerts generated by Snort during the five phases of the attack in Table I. Each phase has triggered certain group of alerts according to the attacker activities. We have to mention that the performance of any correlation

757

system relies on the underline IDS performance. In other words, if the IDS misses some attacks, the correlation system consequently will miss the attack. However, missed attacks can be predicted and an algorithm for this task will be presented in upcoming paper. We can summarize from Table II: - Snort has not detected the behavior of launching the DDoS attack itself; however, sequence of the attack has been detected. - Some different alerts are related to the same attack such as sadmind daemon. However, we have not ignored these alerts because the correlation system should identify such cases. - In the second scenario of the attack many behaviors have not been detected and that is because of the stealthy nature of the attack. However, the correlation system has to recognize these activities by discovering the causal relationships between alerts. Table II shows the collected results from the first experiment comparing our system to the system in [2,3]. It is clear that we have improved the rate of both false positives and false negatives in LLDOS 1.0. However, the unsatisfactory results from the experiment of the second dataset LLDOS 2.0.2 are similar to TIAA[2,3] system, because of inability of Snort[21] to detect all the attack activities. To measure the effectiveness of the proposed system, we have calculated the false positives and the false negatives according to the formula:
# correlated alerts actual correlated alerts optimal # correlated alerts actual # not correlated alerts # correlated alerts optimal TABLE II. REUSLTS OF LLDOS DATA SET

lab contains different multistage attacks: -Database injection attacks: MSSQL, MYSQL, and Oracle. -Web shell attacks: ASP, JSP, and PHP WebShell -Backdoor trojans The network consists of eight machines: three attacking machines, four target machines, and a Dual Quad core machine as a monitoring server. The trace file contains 25 multi-stages attacks interspersed within a large number of background traffic and random isolated attacks. The results are shown in Table III. It has been observed that only 76,341 alerts are related to the real planned attack, and the remaining alerts are either false positives or isolated ones. The system is capable to correlate 66,497 alerts, however a percentage of 9.5% of them are correlated where are not related to the attacks sequences. In addition, a number of 1,274 alerts are unobserved by the alert correlation system, where they are involved in the conducted attacks. Twenty three out of twenty five scenarios have been correctly correlated which has achieved a reliable performance. The two undetected scenarios have been identified as five independent attacks and that due to missed alerts by the underlying IDS. However, missing alerts will be addressed in our future work and the proposed extensional consequences will be useful in this respect. The vulnerability parameter has played an obvious role to reduce false correlation, where invulnerable target is not involved in correlation mechanism.
TABLE III. RESULTS OF LAB EXPERIMENT
Snort alerts related alerts correlated alerts false correlated alerts not correlated alerts scenarios detected scenario false detected scenarios not detected scenario Multistage attack detection rate 2,546,232 76,341 66,497 6,323 1,274 25 32 7 2 92%

LLDOS1.0 DMZ Elementary alerts Related alerts False positives (Snort) Optimal correlated alerts Correlated hyper- TIAA alerts(total) MARS Correlated hyper- TIAA alerts(related) MARS Not correlated TIAA alerts MARS False positive rate TIAA MARS False negative TIAA rate MARS 3546 463 65.3% 206 275 223 174 184 32 22 25.1% 8.25% 15.5% 10.7% Inside 602 358 40.9% 182 235 198 155 165 27 17 22.5% 8.1% 14.8% 7.23%

LLDOS2.0.2 DMZ 1148 10 99.9% 8 13 11 3 3 5 5 38.5% 27.3% 62.5% 62.5% Inside 127 21 83.5% 7 11 11 6 6 1 1 36.4% 36.4% 14.3% 14.3%

VI.

CONCLUSION AND FUTURE WORK

B. Our Lab Experiment We have collected a dataset from real experiment in our

We have proposed a correlation framework to achieve high quality multistage attack recognition in real time. Two components of the system have been presented: offline and online components. In this paper we have developed a part of the offline component which is the knowledge-based engine. The proposed approach is mainly based on phenomena of "cause and effect" which is basically used in plan recognition models. Two novel methods have been developed to overcome the limitation of current systems: vulnerability and extensional consequences. It has been demonstrated that this mechanism improves the identification of attack plans and reduces the graph complexity. False positives have been reduced comparing with other approaches using vulnerability knowledge. For future work, the rest of the framework components will be developed. We also will incorporate real time component to

758

analyze attack plans based on the rules generated by the offline component. Furthermore, statistical engine will be used to provide a probabilistic inference for alert clustering. Prediction of incoming events which is beyond the predefined rules can be achieved using a cooperation between the two engines (statistical and knowledge). Hypothesizing of unknown attacks can be identified based on attributes similarities. However, there are still few more challenges will also be addressed such as distinction between single and cooperated attack, automatic generation of knowledge dictionary.

[18].

[19]. [20]. [21]. [22].

and Storage, International Conference on, pp. 115-121, International Conference on Networking, Architecture, and Storage (NAS 2007), 2007. Jie Ma, Zhi-tang Li, Wei-ming Li, "Real-Time Alert Stream Clustering and Correlation for Discovering Attack Strategies," Fuzzy Systems and Knowledge Discovery, Fourth International Conference on, vol. 4, pp. 379-384, 2008 Fifth International Conference on Fuzzy Systems and Knowledge Discovery, 2008. Basic Analysis and Security Engine; http://base.secureideas.net/ Lincoln Labs Information Systems Technology, http://www.ll.mit.edu/mission/communications/ist/corpora/ideval/data/i ndex.html Snort: A free lightweight network intrusion detection system for UNIX and Windows; http://www.snort.org/ Nessus: Security Scanner; http://www.nessus.org

REFERENCES
[1]. [2]. B. Zhu and A. A. Ghorbani. Alert correlation for extracting attack strategies. International Journal of Network Security, 3(2):244-258, 2006. Peng Ning, Yun Cui, Douglas Reeves, and Dingbang Xu, "Tools and Techniques for Analyzing Intrusion Alerts," in ACM Transactions on Information and System Security, Vol. 7, No. 2, pages 273--318, May 2004. Peng Ning, Yun Cui, Douglas S. Reeves, "Constructing Attack Scenarios through Correlation of Intrusion Alerts," in Proceedings of the 9th ACM Conference on Computer & Communications Security, pages 245--254, Washington D.C., November 2002. A. Valdes and K. Skinner. Probabilistic alert correlation. Lecture Notes in Computer Science, 2212:54-68, 2001 K. Julisch. Clustering intrusion detection alarms to support root cause analysis. ACM Trans. Inf. Syst.Secur., 6(4):443-471, 2003. Li, Z., A. Zhang, et al. Real-Time Correlation of Network Security Alerts. Proceedings of the IEEE International Conference on e-Business Engineering, IEEE Computer Society, 2007 R. Agrawal and R. Srikant: Mining sequential patterns. In: Research Report RJ 9910, IBM Almaden Research Center, San Jose, California, October 1994. F. Cuppens and R. Ortalo. Lambda: A language to model a database for detection of attacks. In RAID '00: Proceedings of the Third International Workshop on Recent Advances in Intrusion Detection, pages197-216, London, UK, 2000. Springer-Verlag. F. Cuppens. Managing alerts in a multi-intrusion detection environment. In 17th Annual Computer Security Applications Conference New-Orleans, New-Orleans, USA, December 2001. F. Cuppens and A. Miege. Alert correlation in a cooperative intrusion detection framework. In SP '02: Proceedings of the 2002 IEEE Symposium on Security and Privacy, page 202, Washington, DC, USA, 2002. IEEE Computer Society. S. Eckmann, G. Vigna, and R. Kemmerer. Statl: An attack language for state-based intrusion detection, 2002. S. J. Templeton and K. Levitt. A requires/provides model for computer attacks. In NSPW '00: Proceedings of the 2000 workshop on New security paradigms, pages 31-38, New York, NY, USA, 2000. ACM Press. X. Qin. A Probabilistic-Based Framework for INFOSEC Alert Correlation. PhD thesis, Georgia Institute of Technology, 2005. X. Qin and W. Lee. Attack plan recognition and prediction using causal networks. In ACSAC '04: Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC'04), pages 370-379, Washington, DC, USA, 2004. IEEE Computer Society. H. Debar and A. Wespi. Aggregation and correlation of intrusiondetection alerts. In Recent Advances in Intrusion Detection, pages 85103, 2001. Zhi-tang Li, Jie Lei, Li Wang, Dong Li, "A Data Mining Approach to Generating Network Attack Graph for Intrusion Prediction," Fuzzy Systems and Knowledge Discovery, Fourth International Conference on, vol. 4, pp. 307-311, Fourth International Conference on Fuzzy Systems and Knowledge Discovery (FSKD 2007) Vol.4, 2007. Ai-fang Zhang, Zhi-tang Li, Dong Li, Li Wang, "Discovering Novel Multistage Attack Patterns in Alert Streams," Networking, Architecture,

[3].

[4]. [5]. [6]. [7].

[8].

[9]. [10].

[11]. [12].

[13]. [14].

[15]. [16].

[17].

759

