Communication Networks and Services Research Conference

Critical Episode Mining in Intrusion Detection Alerts
Mahboobeh Soleimani and Ali A. Ghorbani
Faculty of Computer Science
University of New Brunswick
Fredericton, NB, E3B 5A3
(Email: m.soleimani, ghorbani@unb.ca)
Abstract

between false and true alerts. Among different alerts
that are generated by an IDS, some of them are critical
for that particular network. That is, according to some
background knowledge, existence of those alerts in the
list of alerts is indicator of a critical attack. Some attacks are multi-step attacks where attacker has to take
multiple steps to complete the attack. Due to the fact
that these kinds of attacks can be combined with bogus attacks or slow attacks, a signature based IDS cannot recognize them. Since a huge most of alerts (99%)
are false alerts [11], determining meaningful and significant alerts is vital for network administrator. Most of
the alerts that are generated by an IDS in a network are
redundant occurrence of a frequent benign event that is
matched by a strict rule of an IDS [11].

One of the most important steps in attack detection
using Intrusion Detection Systems (IDSs) is dealing with
huge number of alerts that can be either critical single
alerts and multi-step attack scenarios or false alerts and
non-critical ones. In this paper we try to address the
problem of managing alerts via a multi-layer alert correlation and ltering that can identify critical alerts after each step of correlation and ltering. After applying
the approach on LL DDoS 1.0 data set, we achieved very
good results in terms of critical alert detection rates,
running time of approach and its memory usage. Our
method could extract all of critical and multi-step attacks in LL DDoS 1.0 data set while we had almost 90%
reduction in number of alerts.

Researchers proposed various techniques to manage
huge number of alerts or extract multi-step attack scenarios from IDS alerts. Most of the proposed methods
use machine learning techniques to extract and correlate
information from individual alerts. Different machine
learning methods are applied to extract hyper information based on individual alerts and nding the similarity
between different alerts and aggregating them to reduce
the size of the alert set. In this work we use a multilevel machine learning method to address the aforementioned problems regarding the alerts generated by signature based IDS. Our approach employs a multi- ltering
method, which on the one hand identi es critical singlestep and multi-step attacks among alerts and on the other
hand provides a means for reducing run-time and memory usage. Moreover, We proposed a framework for
reducing the number of alerts and emphasizing on the
most critical ones.

1. Introduction
Intrusion Detection Systems (IDSs) are notable components in network security infrastructure. IDSs trigger
security alerts for the malicious activities in a typical
network. They are generally categorized as signaturebased and anomaly-based. Quality of the alerts which
are generated by the signature-based IDSs is mainly dependent on the quality of the signature-based rules and
the preciseness of the IDS con guration les. However,
the number of alerts that are generated by an IDS is too
large, which makes managing meaningful and important
security events a cumbersome duty for an administrator.
There are different analyzers that are used for running
query on a database of alerts generated by IDSs. For example ACID or SnortSnarf [6, 22] are analyzers that are
developed for Snort IDS. They just provide some statistical analysis over all of the alerts which are generated by an IDS. However, these tools cannot distinguish

978-0-7695-3135-9/08 $25.00 © 2008 IEEE
DOI 10.1109/CNSR.2008.62

The rest of this paper is organized as follows: Related
work is discussed in Section 2. In Section 3, the de nitions, frameworks and algorithms are explained. Section 4 presents the implementation and evaluation of our

155
157

ability statements to enhance Bro’s [25] byte-level alert
signatures with regular expressions and context derived
from protocol analysis. Another approach is to match
alerts with vulnerability reports. In [14] Lippmann et
al. showed how such information can be used to prioritize alerts, depending on the vulnerabilities of the target: even correctly identi ed signs of intrusions can be
given a lower priority or even be discarded if the target
has been identi ed not to be vulnerable to that speci c
attack. A formal model for alert correlation and leveraging such information has been proposed by Morin et
al. [15]. Also, [16] used two orthogonal and complementary approaches namely CLARAty and ALAC to
reduce the number of false positives in intrusion detection. CLARAty is based on data mining and root-cause
discovery, and ALAC is based on machine learning and
both techniques t into standard alert-management systems. Besides, In [10] They proposed alert data mining
framework that performs alert correlation analysis by
using mining tasks such as axis-based association rule,
axis-based frequent episodes and order-based clustering.
It also provides the capability of classifying false alarms
in order to reduce false alarms from intrusion detection
system. TASA [12] performs the analysis on all the data
in of ine mode, and then makes it possible for an administrator to explore among frequent episodes very easily. Actually, the administrator is able to see its favorite
episodes by specifying some thresholds and templates.

method. Finally, Section 7 presents concluding remarks,
and suggests some future works.

2. Related Works
In the following we summarize some of the recent
research works in the area of alert correlation and alert
mining. Debar and Wespi [11] describe an algorithm
and an architecture of an Aggregation and Correlation
(AC) Component. The goal of the algorithm is to form
groups of alerts by creating a small number of relationships. The Probabilistic Alert Correlation (PAC) system [24] represents alert groups by means of so called
meta-alerts, supporting set-valued attributes. Similarly
to the PAC, the Alert-Stream Fusion (ASF) [5] maintains a continuously updated list of alerts called scenarios. The Hyper-alert Correlation (HAC) method [18, 17]
correlates alerts using prerequisites and consequences of
intrusions. It is based on the observation that most intrusions consist of many stages, with the early stages
preparing for the later ones. The Cooperative Intrusion
Detection (CID) framework [3, 4, 7] integrates heterogeneous IDSs to generate more global and synthetic alerts.
Correlated Hacking Behavior (CHB) Analysis [26] employs architecture with bidirectional communication between IDSs and centralized correlator, so that the results
of correlation can be sent back to IDSs to improve their
detection rate and accuracy. The M2D2 model for IDS
alert correlation [2] provides concepts and relations relevant to the security of an information system. Qin and
Lee [19, 20] present an alert correlation system combining a Bayesian correlation system (naive Bayes) with
a statistical correlation system using Granger Causality
Test (GCT) [8], a time series-based causal analysis algorithm. Zhu and Ghorbani [27] focus on developing a
new alert correlation technique that can help to automatically extract attack strategies from a large volume of
intrusion alerts, without speci c prior knowledge about
these alerts. In real-time alert correlation[23], Sadoddin
et al. propose a framework for real-time alert correlation which incorporates novel techniques for aggregating alerts into structured patterns and incremental mining of frequent structured patterns. In [1] they proposed
a real-time detection system using known multistage attack patterns. They used sequential pattern mining after
applying time window to divide the single long alert sequence into multiple subsequences.
However, there are some works that speci cally focus on improving the quality of alerts. For example,
[21] tried to improve the quality of alerts by leveraging
additional information, such as alert context and vulner-

Even all of these works and similar other works try to
extract patterns from huge number of alerts and provide
alert correlation based on those patterns, they spend less
attention to verifying different patterns and managing
huge number of pattern that can be generated. The only
means that is used in previous works to control the number of patterns is minimum frequency without verifying
whether or not the least frequent pattern is an important
single-step or multi-step attack scenario. In this work
we are going to address this issue by a multi- ltering
decision Tree based method.

3. The Proposed Framework
The main goal of this work is to discover all of the
possible sequences of alerts and their combinations and
then identifying the most critical ones using a machine
learning method. In the following Subsections we formulate the concept of alert sequence and the de nition
of an episode.

158
156

y ∈ V).
Example: Consider episode α = (V, ≤, g) in gure
3. The set V contains two nodes; we denote them by x
and y. The mapping g labels these nodes with the alerts
that are seen in the gure: g(x) = Sadmind Ping and
g(y) = Sadmind Amslverify Over ow. An alert of type
Sadmind Ping is supposed to occur before an alert of
type Sadmind Amslverify Over ow, i.e., x precedes y,
and we have x ≤ y.
We use the concept of serial episodes to extract different serial combinations of an alert sequence to verify which one can be a critical sequence of alerts that is
called a multi-step attack scenario.
We can construct different episodes with different
lengths as is explained in [9]. But, in [9] for controlling the number of episodes that would be generated,
they regarded a minimum frequency for each episode.
In [9] frequency of an episode is de ned as the fraction
of windows in which the episode occurs. That is, given
an event sequence s and a window width win, the frequency of an episode α in s is
f r(α, s, win) = |w∈W (s,win)|αoccursinw|
W (s,win)
That is, whenever in a certain window time an
episode is extracted among a sequence of events, its
number of occurrences would be taken into the consideration. If it is less that a minimum threshold, it will
be ignored. Since we are looking for nding multi-step
attacks or single-step attacks that are critical for a particular network, we need to consider the entire episodes
rather that the frequent ones. However, if we don’t
manage the extracted episodes, the number of different
length of episodes can be very huge. Therefore, we applied a new approach that handles the extracted episodes
by selecting the most critical ones. In this work, we rely
on our expert knowledge about known critical singlestep or multi-step attack scenarios based on a network
asset pro le and we lean on alerts that would be red
by IDS. Thus, imperfect detection of IDS may result in
missing episodes. But, this problem would be addressed
in future work. However, the most important characteristic of this work is discerning those important patterns
that are not obvious among a huge number of alerts.
To this end we de ne the following de nitions:
De nition 1 (critical episode).
An episode is critical in an alert sequence s if either:

Figure 1. Generating candidate attack sequences using window time of win

3.1. Alert sequences and episodes
An IDS generates alerts that are security alarms based
on intrusion incidents in the network traf c. In a sequence of alerts, each alert has an associated time of occurrence. An alert is a pair (A , t), where A is an alert attribute set and t is the occurrence time of alert. The alert
can actually contain several attributes that are source IP,
destination IP, source port, destination port, attack priority and attack type.
A sequence of alerts s is a triple (s, Ts , Te ), where
s = ((A1 , t1 ), (A2 , t2 ), ..., (An , tn ))
is an ordered sequence of alerts such that ti ≤ ti+1 for
all i = 1, ..., n-1. Ts and Te are start and end time of
sequence of alerts, where Ts ≤ ti < Te for all i = 1, ...,
n.
Formally, a window on an alert sequence s =
(s, Ts , Te ) is an alert sequence w = (w, ts , te ), where
ts < Te and te > Ts , and w consists of those pairs
(A, t) from s where ts ≤ t < te . The time span te − ts
is called the width of the window w, and it is denoted
width (w). Given an alert sequence s and an integer win,
we denote by W (s, win) the set of all windows w on s
such that width(w) = win.
Dividing the alert sequence according to time window size is shown in Figure 1 that leads to multiple candidate sequence generation.
As de ned in [9], an episode is a partially ordered
collection of events occurring together that can be described as directed acyclic graphs. Episodes are de ned
formally as triple α = (V, ≤, g) where V is a set of
nodes, ≤ is a partial order on V, and g : V → A is a
mapping associating each node with an event type. The
interpretation of an episode is that the events in g(V)
have to occur in the order described by ≤. In this paper,
we de ne an event as an alert that is generated by IDS.
Therefore, g associates each node with an alert. Consequently, based on de nitions in [9], serial episodes are
de ned formally as follows: Episode α is serial if the
relation ≤ is a total order (i.e., x ≤ y or y ≤ x for all x,

1. All of its sub-episodes are critical or
2. The entire episode is a portion of a multi-step attack
scenario.
De nition 2 (critical single-step attack). An episode

159
157

Figure 2. Multi-layer framework

Figure 3. Serial episode α
with length one is a critical single-step attack if its attributes match all of the following characteristics:

We construct the knowledge-base about critical
single-step attacks by gathering all of the critical services in asset pro le and then ltering those alerts with
the highest priority that their attack type is related to a
critical service. Based on [17], we nd the prerequisite
and consequence of alerts to detect different steps of a
multi-step attack scenario for critical multi-step attack
detection.

• Its source or destination IP address should match
the IP addresses of critical servers in the network.
(We suppose that critical servers are listed in asset
pro le.)
• Its attack priority is high. (attack priority is reported by IDS)

3.2. Identifying Criticality using Decision
Tree

• Its attack type is related to the most important services that are provided in the network.

Each particular network has its own speci cations
and asset pro le. However, security and safety of some
of components that provide vital services in a network
are prominent. An IDS in a network can inspect the
network traf c and generate alerts whenever characteristics of network traf c match its rules. consequently,
a signature-based IDS can trigger a huge number of
alerts. Browsing large number of alerts with over 90%
[11] false positive is cumbersome for administrators.
Therefore, administrators are more interested in knowing about the most critical and noticeable alerts. Critical
alerts are those that are related to the most signi cant
servers, or those that their attack type is an indicator of
a crucial intrusion attempt (as de ned previously).

De nition 3 (critical multi-step attack).
An episode with length more than one is a critical
multi-step attack if its attributes match all of the following characteristics:
• In each step, the source and destination IP addresses must be the same as most critical servers
in the network.
• The sequence of occurrence of different steps of an
episode should correspond to sequence of occurrence of a multi-step attack. That is, attack type
of each step should match the steps of a multi-step
attack scenario.

160
158

Based on asset pro le and expert knowledge, administrators can provide a database of their most critical
servers and services. Moreover, they can highlight those
alerts that are critical for those vital services that are provided in their network. Based on those expert knowledge, we applied Decision Tree for deciding about critical alerts that are red by an IDS. The whole idea is
illustrated in Figure 2
As is shown in Figure 2, we extract the critical singlestep or multi-step attacks based on expert knowledge
that are represented with a Decision Tree. At rst, using the Algorithm 3.2, we extract all of the candidate
episodes with length one (that are single-step attacks)
and then using the Algorithm 3.1, we take out the critical alerts (that are de ned in the next section. Those
critical episodes would be reported to administrator as
single-step critical alerts. However, these alerts would
be used for generating the episodes with length two. So,

knowledge about critical servers and services in the network. The following items would be considered for deciding about criticality of an episode:
• Source and destination IP address
• Attack type
• Destination port number
• Priority of attack
• Sequence of alerts (whether sequence of alerts in
an episode follows a multi-step attack scenario)
The overall process is shown in Figure 4
At rst, alerts would get aggregated for omitting the
redundant alerts. However, since in this method we consider window times for episode extraction, just those
alerts that happen in the same window would get aggregated.

3.3. Algorithms
Given all of the candidate episodes, Algorithm 3.1
selects the critical ones. This Algorithm uses Algorithm
3.2.
Algorithm 3.1: C RITICALITY I DENTIFIER(C, l)
C: A collection of serial episodes
that are created by Algorithm 3.2
l: length of episode
Output: The episodes of C that are critical
based on criticality measures
Initialization
counter = 0
for n 
← 1 to |C|
if searchInDecisionT ree(C[n])
do
then criticalEpisodes[counter + +] = C[n];

Figure 4. Overall procedure for criticality
detection
in the rst iteration lots of episodes that are less important for administrator would be ignored and the most
critical ones would be shown to administrator. Next,
based on critical episodes with length one, Algorithm
3.2 generates the candidate episodes with length two.
There episodes would be veri ed by next Decision Tree
that keeps information about two-step critical attacks.
So, we would have just those two-step attacks that are
critical and meaningful for that network and so on. In
evaluation section, we showed the in uence of criticality
ltering on a number of generated episodes and run time
of application. This procedure can continue as many
time as administrator prefers and it is rmly dependent
on length of probable multi-step attack that administrator may be interested in.
The Decision Tree is constructed based on expert

Algorithm 3.2 shows the candidate episode generation method. We adapted the method that was used by
Mannila et al. [9] to be suitable for criticality identi cation. In the algorithm [9] , an episode α = (V, ≤, g) is
represented as a lexicographically sorted array of alerts.
The array is denoted by the name of the episode and the
items in the array are referred to with the square bracket
notation. For example, a serial episode α with alerts of
types A, C, C, and F is represented as an array α with
α[1] = A, α[2] = C, α[3] = C, andα[4] = F .

161
159

Figure 5. A sample multi-step-attack in LL DDoS 1.0
Collections of episodes are also represented as lexicographically sorted arrays, i.e., the ith episode of a collection F is denoted by Fl [i]. Since the episodes and
episode collections are sorted, all episodes that share the
same rst event types are consecutive in the episode collection. In particular, if episodes Fl [i] and Fl [j] of size l
share the rst l − 1 events, then for all k with i ≤ k ≤ j
we have that Fl [k] shares also the same events. A maximal sequence of consecutive episodes of size l that share
the rst l − 1 events is called a block. Potential candidates can be identi ed by creating all combinations of
two episodes in the same block. For the ef cient identication of blocks, we store in Fl .block start[j] for each
episode Fl [j] the i such that Fl [i] is the rst episode in
the block. The only change that we made in the algorithm is using the concept of criticality instead of frequency of episodes for candidate episode generation (according to de nitions).
The total time complexity of Algorithm 3.2 is
O(l2 Fl2 log |Fl |).

Algorithm 3.2: C ANDIDATE C RITICAL E PISODE G EN(F, l)
F: A sorted array Fl of critical serial episodes of size l
l: length of episode
Output: A sorted array Fl+1 of critical
serial episodes of size l + 1
Initialization
for n 
← 1 to |C|
for i ←
 1 to l + 1
do
do C[i] = φ;
k = 0;
if l = 1
thenfor h ← 1 to |Fl |
current block start = k + 1;




for j = Fl .block start[i]; Fl .block start[j] =




Fl .block start[i]; j = j + 1

do













































if j = i then continue



with the next j at line 6;








comment: Fl [i] and Fl [j] have l − 1 rst





event types in common, build



a potential candidate α




as their combination:




for x 
← 1 to l




α[x] = Fl [i][x];


 do α[l + 1] = Fl [j][l];




comment: Build and test subepisodes β









that do not contain α[y]:



do for y ← 1 to l − 1








for x ← 1 to y − 1










do β[x] = α[x];












for
y ← 1 to l







 do β[x] = α[x + 1];







do if β is not in F then continue with




l










the next j at line 6;











comment: All subepisodes are in Fl













store α as candidate:







k
=
k
+
1;








Cl+1 [k] = α;









Cl+1 .block start[k] =

current block start;

outputCl+1 ;

4. Implementation and Evaluation
We have implemented this work in Java; also we have
employed snort 2.7.0 for generating alerts. We used
DARPA 2000, LL DDoS 1.0 data set [13] that includes
a distributed denial of service attack. Figure 5 shows a
graph that represents different steps of one of multi-step
attacks that can be seen in LL DDoS 1.0 dataset. The
corresponding alerts are generated by snort [22]. After
applying our approach using different window times, the
results that are shown in following tables are achieved.
After replaying 3 hours of LL DDoS 1.0 tcpdump trafc on snort, 986 alerts are generated. Tables 1, 2, 3
,
show the number of extracted episodes with different
lengths before and after applying our approach as well
as criticality identi cation percentage and the correctness of reduced episodes percentage. We gathered expert knowledge about the simulated network that was
used for having multi-step attack. Using these information we construct Decision Trees that could decide
about critical episodes with different lengths. Then, we
aggregated the redundant alerts by nding similarity be-

162
160

Table 1. Window width = 80 min, Running time = 6171 ms, Number of original alerts = 986
Length 1
Length 2
Length 3
Length 4

Length 1
Length 2
Length 3
Length 4

Length 1
Length 2
Length 3
Length 4

Number
of
episodes before reduction
24
195
35
35

number of critical episodes

Number of
false episode

Percentage of correct episode (%)

Episode reduction
(%)

Criticality identication(%)

2
21
35
8

0
17
29
0

100
19
17.14
100

91.6
89.23
0
75.14

100
100
100
100

Number
of
episodes before reduction
24
170
35
35

number of critical episodes

Number of
false episode

Percentage of correct episode (%)

Episode reduction
(%)

Criticality identication(%)

2
21
35
8

0
17
29
0

100
19
17.14
100

91.6
87.64
0
75.14

100
100
100
100

Number
of
episodes before reduction
24
131
19
10

number of critical episodes

Number of
false episode

Percentage of correct episode (%)

Episode reduction
(%)

Criticality identication(%)

2
21
19
0

0
17
13
0

100
19
31.57
0

91.6
83.96
0
0

100
100
100
0

Table 2. Window width = 60 min, Running time = 5672 ms, Number of original alerts = 986

Table 3. Window width = 40 min, Running time = 4297 ms, Number of original alerts = 986

Without reduction

With reduction

Table 4. Reduction in number of episodes

Length of episode

Number of generated episodes

Length 1
Length 2
Length 3
Length 4
Length 1
Length 2
Length 3
Length 4

986
971210
955670640
9.394E+11
24
170
35
35

Number of meaningful / critical
episodes
2
21
35
8
2
21
35
8

Meaningless/noncritical
generated
episodes
984
971189
955670605
9.394E+11
22
149
0
27

quently memory usage and running time of application.
Figure 6 shows the in uence of different window times
on the running time of application. As is shown in Tables 1, 2 and 3, using window times with length 80 and
60 minutes, we could identify all of 8 multi-step attack
scenarios that exist in LL DDoS 1.0 data set. But when
we used window width with length 40 minuets, just three
steps of a multi-step with length four could be detected.

5. Conclusion and future works
Figure 6. Different running times, based
on different window widthes

In this paper we proposed a new method for extracting the most critical and useful information in alert sequences that can be generated by an IDS. We used a pattern mining algorithm to obtain all of different combinations of alerts and then applied multi-layer decision tree
decider for identifying those patterns that either follow a
multi-step attack scenario or represent a critical singlestep attack. Proposed alert mining approach assists administrators to come aware of the most critical alerts in
the alert set, based on the speci cation of their network.
So, administrators will be able to discriminate critical
attack patterns that are almost 10 through 30 percent
of all of patterns. As a future work we are planning to
use other sources of information such as network topol-

tween alerts (which was mainly based on similarity between the attack type and IP addresses of alerts). Next,
we extracted episodes with different lengths and in each
step of episode extraction. At rst we choose the critical
ones with length l using Decision Tree and then based
on those critical episodes we constructed episodes with
length l + 1. According to the results, longer multi-step
attacks can be detected using wider window time. Table 4 summarizes the effectiveness of the proposed approach in reducing the number of episodes and conse-

163
161

ogy discovery systems and rewall logs to decide about
the criticality of alerts more self-adjusted an dynamic.
Moreover, we are planning to address the problem of
constructing multi-step attacks where some of the steps
are missing.

[14] S. D. Lippmann Richard, Webster Seth. The effect of
identifying vulnerabilities and patching software on the
utility of network intrusion detection. Springer-Verlag,
2516:307–326, 2002. Recent advances in intrusion detection (RAID2002).
[15] D. H. D. M. Morin Benjamin, Me Ludovic. M2d2: a formal data model for ids alert correlation. Springer-Verlag,
2516:115–137, 2002. Recent advances in intrusion detection (RAID2002).
[16] D. H. D. M. Morin Benjamin, Me Ludovic. Data mining
and machine learning-towards reducing false positives
in intrusion detection. Information Security Technical
Report, pages 169–183, 2005.
[17] P. Ning and Y. Cui. An intrusion alert correlator
based on prerequisities of intrusions. Technical report,
North Carolina State University, Raleigh, NC, 2002.
Available from ftp://ftp.csc.ncsu.edu/pub/tech/2002/TR2002-01.ps.Z.
[18] D. S. R. Peng Ning and Y. Cui. Correlating alerts
using prerequisites of intrusions. Technical report,
North Carolina State University, Raleigh, NC, 2001.
Available from ftp://ftp.csc.ncsu.edu/pub/tech/2002/TR2002-01.ps.Z.
[19] X. Qin and W. Lee. Statistical causality analysis of infosec alert data. In Recent Advances in Intrusion Detection (RAID2003), volume 2820 of Lecture Notes in
Computer Science, pages 73–93, Pittsburgh, PA, 2003.
[20] X. Qin and W. Lee. Discovering novel attack strategies from infosec alerts. In ESORICS 2004, 9th European Symposium on Research Computer Security, volume 3193 of Lecture Notes in Computer Science, pages
439–456, Sophia Antipolis, France, 2004.
[21] V. P. Robin Sommer. Enhancing byte-level network intrusion detection signatures with context. In 10th ACM
conference on computer and communication security,
pages 262–271, Washington, DC, 2003.
[22] M. Roesch and C. Green. Snort ids. Web page at
http://www.snort.org/, September, 2007.
[23] R. Sadoddin. An incremental frequent structure mining
framework for real-time alert correlation. Master’s thesis, University of New Brunswick, 2007.
[24] A. Valdes and K. Skinner. Probabilistic alert correlation. In In Recent Advances in Intrusion Detection
(RAID2001), pages 54–68, 2001.
[25] P. Vern. a system for detecting network intruders in realtime, 1999. Computer Networks, 23-24.
[26] J. Wang and I. Lee. Measuring false-positive by automated real-time correlated hacking behavior analysis. In
In Information Security 4th International Conference,
volume 2200 of Lecture Notes in Computer Science,
pages 512–535, 2001.
[27] B. Zhu and A. A. Ghorbani. Alert correlation for extracting attack strategies. In International Journal of Network
Security, volume 3, pages 244–258, Nov 2006.

References
[1] D. L. Ai-fang Zhang, Zhi-tang Li and L. Wang. Discovering novel multistage attack patterns in alert streams. In
NAS 2007, pages 115–121, 2007.
[2] H. D. Benjamin Morin, Ludovic Me and M. Ducasse.
M2d2: A formal data model for ids alert correlation.
In Recent Advances in Intrusion Detection (RAID2002),
pages 115–137, 2002.
[3] F. Cuppens. Managing alerts in a multi-intrusion detection environment. In 17th Annual Computer Security
Applications Conference, pages 22–31, New Orleans,
2001.
[4] F. Cuppens and A. Mi‘ege. Alert correlation in a cooperative intrusion detection framework. In 2002 IEEE Symposium on Security and Privacy, pages 202–215, 2002.
[5] O. Dain and R. K. Cunningham. Fusing a heterogeneous
alert stream into scenarios. In ACM Workshop on Data
Mining for Security Application, pages 1–13, Philadelphia, PA, 2001.
[6] R. Danyliw. Analysis console for intrusion detection,
2002. http://acidlab.sourceforge.net/.
[7] A. M. Frederic Cuppens, Fabien Autrel and S. Benferhat. Correlation in an intrusion detection process. In
S Ecurite des Communications sur Internet (SECI02),
page 153 171, 2002.
[8] C. W. Granger. Investigating causal relationships by
econometric methods and cross-spectral methods. In
Econometrica, pages 424–428, 1969.
[9] H. T. H Mannila. Discovery of frequent episodes in event
sequences. In Data Mining and Knowledge Discovery,
Springer, pages 259–289, 1997.
[10] M. S. S. K. J. Jeong. An alert data mining framework
for network-based intrusion detection system. In Information Security Applications, volume 3786/2006, pages
38–53. Springer Berlin / Heidelberg, 2005.
[11] L. M. R. S. Jouni Viinikka, Herv Debar. Time series
modeling for ids alert management. In ACM Symposium
on Information, computer and communications security,
pages 102–113, New York, NY, USA, 2006.
[12] T. H. Klemettinen M., Mannila H. Interactive exploration of interesting ndings in the telecommunication
network alarm sequence analyzer (tasa). In Information
and Software Technology, volume 41, Number 9, pages
557–567, June 1999.
[13] L. Laboratory.
2000 DARPA intrusion detection evaluation data set, 2000.
Available from
http://www.ll.mit.edu.

164
162

